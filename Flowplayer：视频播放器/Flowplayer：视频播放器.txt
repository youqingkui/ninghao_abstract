00-00-课程介绍

Flowplayer 是一款在线视频播放器，你可以放它用在你的网站项目里，去在线播放视频 … 这个课程我们一起学习一下怎么样使用这款播放器。
首先我们学习一下怎么样快速的去配置 flowplayer 播放器，让它可以在线播放视频 …   然后我们再去手工配置播放器 … 了解一些 <video> 属性 …  比如怎么样自动播放视频 ..  控制视频的循环播放 … 还有预载入视频的属性 ..
然后我们再给视频添加一个封面图像 …  为封面图像添加动画效果 …   
再用 Flowplayer 播放器的引导页面的功能 …  去为视频添加一个图像的引导页面 …
按下来我们再去了解一下播放器的配置选项 … 比如去设置播放器的尺寸 …  开启或者关掉播放器的某些功能等等 …
我们还要学会创建视频的播放列表  … 给播放列表添加导航按钮 …
为视频添加字幕 … 控制字幕的样式 …  最后我们再去了解一下播放器的皮肤 …  控制在播放器上面显示的元素 …  使用皮肤设计器去定制播放器的皮肤 …. 
好，下面一起进入到这个使用 flowplayer 播放器的课程 ….


01-01-播放器的简单快速的配置

我们可以先来看一下使用 flowplayer 播放器播放视频的最快速的方法。先打开我们事先准备好的一个 html5 文档 …
注意，文档的声明一定要使用 html5。因为 flowplayer 会用到 html5 里的一些标签。
然后我们要在这个网页上嵌入 flowplayer 用到的一些资源 …  
在网页的 <head> 标签上 … 先要嵌入 jQuery … 
<!-- jQuery 库 -->
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js"> </script>
然后是 flowplayer  …
<!-- flowplayer -->
<script type="text/javascript" src="//releases.flowplayer.org/5.4.3/flowplayer.min.js"> </script>
最后我们需要再嵌入一个 flowplayer 的皮肤 … 也就是播放器的外观 …  
<!-- 皮肤 -->
<link rel="stylesheet" type="text/css" href="//releases.flowplayer.org/5.4.3/skin/minimalist.css">
上面这些文件都存储在了云上，用户访问这个网页的时候，浏览器会在云服务器上直接下载这些文件  ….  可以节省我们一点资源 … 
下面在网页的 <body> 标签里，去添加点简单的 HTML 代码来使用播放器去播放视频 … 
<div class="flowplayer">
     <video>
          <source type="video/mp4" src="http://mydomain.com/path/to/intro.mp4">
    </video>
</div>
首先我们要创建一个播放器的容器 .. 可以使用 <div> 标签 …
在这个容器上要添加一个 flowplayer 类 …
在它的里面，我们可以使用 HTML5 的 <video> 标签 ..  
在这个 <video> 标签里 … 去指定播放器要播放的视频的来源 …  这里我们要用到的是 <source> 标签 ..
加上一个 type 属性 … 要播放的视频是 mp4 格式的 … 所以 type 的值可以设置成 video/mp4 …
然后再使用 src 属性来指定视频的位置 …
在 video 目录下有一个视频 … 输入 video … 斜线 …  再加上视频的名称 …  video/video/croods-tlr3_h720p.mov
保存 … 到浏览器上去预览一下 …
网页上已经显示 flowplayer 播放器了 … flowplayer 首先会用 HTML5 模式的播放器 … 如果浏览器不支持 HTML5 … 会退回成 flash 模式的播放器 ..
播放器的宽度默认是 100% ，高度会根据一个 ratio 比例值自动去设置 …
另外播放器会使用视频里的第一帧作为视频的封面 … 
点击 播放按钮 … 可以播放视频 ...


01-02-手工配置播放器

使用 Flowplayer 的自动配置，只需要在播放器的容器上，添加一个 flowplayer 这个 CSS 类，然后里面使用 video 标签去包装视频的播放源 … 播放源可以使用 source 标签去指定 ….
另外我们也可以手工去安装配置播放器 …  首先，这个视频播放器的容器上的 CSS 类需要换成除了 flowplayer 以外的其它任何的名称。
打开资料包 01-02 里面的网页 …. 找到播放器容器 ….   这里我们把容器上的 flowplayer 类 …   改成 ninghao-player  … 这里你可以改成任何你喜欢的名字 …. 
播放器容器里面，同样可以使用 video 标签，还有 source 标签 ..  去指定视频的来源 …. 
然后在这个容器的下面，我们要使用 flowplayer 插件去安装一下播放器 … 
先输入一组 <script> 标签 ..
在里面再输入 $(".ninghao-player").flowplayer() …   这行代码的意思就是，找到页面上的 ninghao-palyer 这个 CSS 类 … 
然后为这个类所在的元素上使用 flowplayer 播放器 ..
我们可以先保存一下 … 再到浏览器上预览一下 … 
你会看到，播放器可以正常工作，点击播放，可以播放视频 …   （快进两下 ...）


01-03-video 属性，自动播放，循环，预载还有封面

在 <video> 标签上，我们可以添加一些额外的属性来改变播放器的行为，比如让播放器自动播放，循环，设置视频的预先载入，还有视频的封面等等。
下面我们演示一下这些属性的作用 ….
autoplay
先找到播放器上的 <video> 标签  …   先试一下自动播放 …  可以使用 autoplay …  保存 …
你会看到当页面加载以后，播放器会自动去播放视频 … （暂停）
loop
再试试 循环 … 用到的属性是 loop …   保存 …
我们把视频拖放到快要结束的地方 ….   
播放完视频以后，会循环再次播放这个视频  …
preload
再试一下预载视频的属性 … 我们先去掉这个 autoplay 自动播放的属性 ..
保存 …
 flowplayer 会预载入视频 …  所以，在页面加载以后，你会看到播放器上会显示视频第一帧的图像 … 
另外还有视频的时长 …  我们可以关掉这个预载功能 ..
在 <video> 标签上添加一个 preload 属性 … 把它的值设置为 none … 意思就是，不使用预载功能 …
保存 …
现在在播放器上就不会显示视频第一帧作为封面了 … 而且播放器上也不会再显示视频的时长 … 
poster
下面我们可以使用 poster 属性，手工去为视频设置一个封面图像 ..
在我们的网页项目的 video 目录里面，有一张事先准备好的视频的封面图像 …
然后找到 <video> 标签  … 输入 poster="../video/croods-03.jpg"  （#鼠标放在图像上）
保存 … 
你会看到，在视频没有播放之前，会显示我们设置的封面图像 …


01-04-视频封面图像

为视频添加封面图像有两种方法，你可以在 <video> 标签上添加 poster 属性，然后指定要使用的封面图像的位置 … 或者我们也可以使用 CSS ，为播放器的容器去添加背景图像。
不管用哪种方法，flowplayer 都会在播放器的容器上面，添加一个 .is-poster 的 CSS 类。
我们可以把这两种方法配合在一起使用，这样可以得到一些比较有趣的效果，你可以使用 CSS 控制封面图像的位置，尺寸，可以添加动画效果等等。
如果同时使用这两种方法添加封面图像，Flowplayer 会优先使用在 <video> 标签上的 poster 属性里指定的封面图像 .. 
验证
我们先用 Chrome 浏览器的开发者工具，查看一下播放器 …  因为之前我们在 <video> 标签上添加了 poster 属性 … 所以在播放器的容器上，flowplayer 会添加一个 .is-poster 的类。
同时添加的封面图像，也会作为播放器容器的背景图像 … 
CSS
下面我们给页面添加一个样式表，在后面我们需要用到这个样式表，为播放器或者页面，去添加一些自定义的样式。
先新建一个目录  ….  命名为 css
在这个目录下面，新建一个样式表 … 命名为 style.css …  
打开网页 … 使用 link 标签，把这个样式表链接到页面上 ….  
再打开这个样式表 ….   先添加一个简单的样式 …  为播放器的容器 … 去设置一个背景的颜色  …
播放器上我们添加了一个 ninghao-player 的 css 类 … 可以使用这个类作为样式的选择器 …
.ninghao-player {
     background-color: #000
}
在浏览器上预览一下 …
现在播放器的背景就会变成黑色的了 ….


01-05-视频封面的动画效果

下面我们可以使用 CSS 做点有意思的事情，去为播放器的视频封面添加一点过渡的效果 .. 
CSS 过渡效果就是从一种样式，过渡到另一种样式，过渡的时候会使用一个动画效果。
我们可以在播放器容器上面的 .ninghao-player 这个类上，设置过渡的初始的样式 … 然后在 .is-poster 这个类上，去设置过渡到的最终的样式 …
因为最开始播放器不会使用 .is-poster 这个类 ..  flowplayer 只有在确定我们为视频添加了视频封面以后，才会在播放器的容器上添加这个类 …
所以这个过渡效果才会有效 …
先打开自定义的样式表 …   在 .ninghao-player 上，我们再设置一下背景的尺寸 …  background-size … 设置为 50% … 
另起一行再设置一下背景的位置  … background-position … 水平位置设置为 50% …  垂直位置设置为 -100% ..
background-position:  50% -100%;
这样，背景图像会跑到播放器容器以外显示 …  
下面我们再设置一下过渡到的最终的样式 …
我们用 .is-poster 作为样式的选择器 …
.is-poster {
                           background-size:100%;
                           background-position: 50% 50%;
                        }
背景尺寸设置为 100% …    再设置一下背景位置 … 水平是 50% … 垂直位置是 50% … 
最后我们再设置一下过渡的效果 … 
在这个 .ninghao-player 上 …  使用 transition …  
首先我们要指定想要过渡显示的属性 … 这里我们要过渡显示的是背景 … 所以可以设置成 background …
然后是过渡效果持续的时间 … 设置为 1s .. 也就是 1 秒钟的时候 …  我们还可以设置一下显示过渡效果的延时 … 设置为 .5s …
也就是 0.5 秒之后再去过渡 …
保存 …  回到浏览器上看一下 …
0.5 秒以后，视频封面会从播放器的最上面 ，大小是 50% ，过渡到播放器容器的中间，大小会变成 100% …
过渡的时候会使用一种动画效果 ….


01-06-使用额外的 CSS 类为播放器添加更多的样式

我们可以使用 Flowplayer 提供了其它的 CSS 类，继续去为播放器添加样式或者效果…   （# 演示）比如播放器在暂停的时候，会添加一个 .is-paused 类 …
在播放视频的时候，.is-paused 会变成 .is-playing 类 …
鼠标放在播放器的时候，会添加一个 .is-mouseover 的类 … 鼠标离开的时候，这个类会变成 .is-mouseout ...
下面我们可以使用 .is-mouseover  这个类，去添加一个鼠标悬停在播放器上面的时候的效果 ..  
.is-mouseover{
                            opacity:.9;
                            background-size:103%;
 }
我们把这个样式放在 .is-poster 样式的下面 …
.is-mouseover …. 然后用 opacity .. 修改一下不透明度 …  设置为 .9 … 不透明度设置为 90% ..
再用 background-size … 设置下背影的尺寸 … 设置为 103%
这样鼠标悬停在播放器上面的时候，播放器的不透明度会变成 90% …  封面图像的背景尺寸会变成 103% 
为了使用过渡效果 … 我们要改一下在 .ninghao-player 上的 transition … 这里我们设置的过渡的属性是 background …
不过我们在 is-mouseover 上使用了 opacity … 要想让这个样式也使用过渡效果 ..  可以把这个 background  … 修改成 all
这样会去过渡显示所有的样式 … 不仅仅是背景相关的样式 …
保存 …
打开浏览器 ….  
鼠标放在播放器上 ….  你会发现，播放器整体会有一点透明 … 并且视频封面的背影会放大一些 …
过渡到这些样式的时候，会使用一种过渡的效果….


01-07-引导页面  - Splash screen

Flowplayer 有一个引导页面的功能，也就是网页显示以后，只显示我们在播放器上设置的封面图像，并不去加载播放的内容。
就是 HTML5 模式下，不载入 <video> 标签 …  Flash 模式下不载入 object ..
当用户点击封面图像以后，flowplayer 才会载入要播放的内容 … 这就是 Flowplayer 的 Splash screen 引导页面的功能。
使用这个功能的好处是网页的载入速度会提高很多 …  比较适合想同时在一个页面上使用很多个播放器 …
注意，这个 splash screen 的功能，有点像 poster ，这里我们添加了两个播放器，使用的就是视频的 poster 添加的视频封面 …
我们可以审核一下播放器元素 … 你会发现，这里有 <video> 标签的内容 … 说明播放器已经加载了 … 
点击播放一个视频  … 同时我们可以点击播放另一个视频 …  
如果使用 Splash screen 的话，我们一次只能播放一个视频  … 也就是点击播放一个视频 … 当点击播放另一个视频的时候，之前播放的视频会自动停止并且会被移除掉。
回到网页项目的代码  …
在播放器上使用 splash screen 的功能，我们要先在播放器上添加一个 is-splash 的类 …
然后可以使用内联的形式，去为这个播放器容器添加背景图像，这个背景图像就是引导页面的图像 … 可以是视频的封面图像 …
我们先复制一下 poster 里面的这个图像的地址 … 然后去掉 poster 属性 … 
因为我们可以使用 splash screen 代替 poster..  
在播放器的容器上，用 background … 去添加 splash 背景图像 …  这里我们直接把样式添加到这个 <div> 标签上 …. 
style="background:url( video/croods-tlr3_h720p.png);"
再添加一个 background-size … 设置背景的尺寸为 100% … 这样这个引导页面图像也会变成响应式的 …
同样的方法我们可以再处理一下另外一个播放器 … 
先添加一个 is-splash …   设置一下引导页面的背景  …    去掉 poster 属性  … 
然后保存 … 
回到浏览器 ….  刷新 …   现在播放器就使用了引导页面的功能，表面上看起来跟 poster 没啥区别 ..
我们可以查看一下元素 …   
你会发现 …  播放器容器里的 <video> 标签没有载入进来 …  
点击播放 ….   现在 Flowplayer 才会载入视频来播放 …  
如果我们点击页面上其它的播放器来播放视频  …    之前播放的视频会自动停止 …   
在视频播放的时候 … 按一下 ESC 键 … 可以取消载入视频，退回到引导页面上 ….


02-01-播放器尺寸的设置

Flowplayer 播放器的宽度其实就是播放器容器的宽度… 播放器的高度会根据一定的比例自动去设置 … 默认这个比例是0.5625 … 也就是 16:9 …
设置播放器的尺寸，一般我们不去设置它的固定的高度 .. 而是去设置这个比例的值 …
如果你想让播放器的高度正好是视频的高度 .. 你可以用视频的高度除以视频的宽度 … 把得到的值，设置为播放器的比例就可以了。
设置这个比例有几种方法 … 我们来看一下 …
使用 data 属性设置
这里我们直接把这个比例值使用 data 属性，放在播放器的容器上面 ..
在 .ninghao-player 所在的 <div> 标签上 … 输入 data-ratio="" 
用这个属性来设置播放器的比例 …   我们要播放的视频高度是 544 像素  … 宽度是 1280 像素 ..
544 / 1280 … 结果是 0.425 …
所以我们可以把这个 ratio 的值，设置为 0.425 
保存 …
打开浏览器 …   你会发现 … 现在播放器的尺寸正好是视频的尺寸 …  
因为我们设置的是比例，而不是固定的宽度 … 所以当我们改成播放器宽度的时候  ….  播放器的高度会使用这个比例去缩放 …  
所以播放器永远都会是正确的尺寸 … 
使用 CSS 设置
除了可以使用 data-ratio 属性去设置播放器的比例，我们还可以通过 CSS 来设置 ….
先去掉这个 data-ratio 属性和它的值  ..
然后在网页的样式表里，或者直接在页面上的样式里去定义这个比例的样式 ..
样式的选择器可以使用我们在播放器容器上定义的 css 类 … 再加上 .fp-ratio 这个类 …
.ninghao-player .fp-ratio {}
然后设置一下 padding-top …  它的值应该是一个百分比 … 0.425 换成百分比的形式，应该是 42.5% ..
  .ninghao-player .fp-ratio{
                           padding-top: 42.5%;
                        }
保存 …  再回到浏览器 …
（#改变尺寸）同样 … 播放器的尺寸可以使用正确的比例去缩放 …


02-02-播放器的全局配置

Flowplayer 有一些配置选项，比如是否启用全屏的功能，快捷键，设置播放器的比例，模式，音量等等。
你可以根据自己的需求去设置，在这个地址里，你可以参考 Flowplayer 的所有的配置选项。
设置这些选项有两种方法，可以通过 Javasciprt ，或者使用 HTML 的 data 属性  …
不过如果你想设置播放器的全局的设置，我们需要使用 Javascript 的形式来设置 …  播放器的全局设置会影响到页面上所有的播放器 …
下面我们先演示一下全局设置的方法。
在嵌入 Flowplayer 脚本文件的下面 …. 我们可以去配置 Flowplayer 播放器的全局设置 …
先输入一组 <script> 标签 …
然后使用这样的形式来设置播放器 …  开始是 flowplayer  然后是一个点儿 …   conf 代表配置选项 …  接着就是要具体配置的选项的名称 …
比如我们想让播放器默认的音量  … 相在的配置选项是 volume …   数字  1 ，表示 100% 的音量 ...
先输入配置选项的名称  volume …  然后是等号 … 等号后面是选项的具体的配置 …  这里我们设置成一个小数 .. 输入 0.8 
保存 …  打开浏览器 …
先点一下播放按钮 …  在播放器的控制栏上，你会发现，默认的音量大概是 80% ...
因为我们使用的是全局设置的方法，所以，这个设置会影响到页面上所有的播放器 …
播放一下另外一个视频  …   默认的音量也是 80% 
下面我们再去配置一个选项 …   在播放器的右上角有一个全屏的按钮 … 点击可以全屏幕播放视频 … 
如果你不想使用这个全屏幕功能，我们可以关掉它 …
回到网页项目 ….   在配置播放器全局设置的地方 … 另起一行 …  输入 flowplayer.conf.embed …  意思就是我们要去设置一下播放器的嵌入选项 …
输入 flowplayer.conf.fullscreen
意思就是我们要去设置一下播放器的全屏幕选项 …  默认这个选项的值是 true … 也就是使用全屏幕功能。
 这里我们设置为 false … 关掉这个全屏幕播放视频的功能。
true 就是开启某些设置，false 就是关掉某些设置 … 
flowplayer.conf.fullscreen   = false; 
保存 … 
回到浏览器 …    点击播放 …   
现在播放器的右上角就不会显示那个全屏幕播放视频的按钮了 … 因为我们关掉了这个功能。


02-03-全局配置的另一种写法

前面我们介绍了一种配置播放器全局选项的一种写法，就是每行代码配置一个选项 …   下面我们介绍一下另一种写法。
找到配置播放器的代码  …  同样使用 flowplayer.conf 开始 …
然后输入一个 = 号，后面再输入一个大括号 ...
flowplayer.conf = {
                muted           : true,
                fullscreen      : false
    }
在这个大括号里，我们可以配置播放器的不同的选项 … 
左边是要配置的选项的名称  … 比如我们要静音 … 使用 muted  …   名称后面加一个 : 号，冒号的右边是选项的值 …
这里我们输入 true …
想继续去配置其它的选项 … 可以使用一个英文状态下的逗号分隔一下 ….
另起一行 … 然后使用同样的形式 …   左边是配置的选项，中间用冒号分隔一下，右边是设置的值 ..
fullscreen : false
这样我们可以把之前每行配置一个选项的代码删除掉了 …  
保存 … 打开浏览器 …
点击播放 …  音量的默认状态是静音 …  播放器的右上角没有了全屏幕的按钮 …


02-04-针对个别播放器的设置

我们不但可以设置播放器的全局设置，还可以单独为页面上的每一个播放器去设置选项 …  单独为播放器的设置去覆盖掉全局设置。
针对个别播放器的设置可以通过 Javascript 的方式，也可以使用 HTML 的 data 属性的方式 …
先看一下用 Javascript 的方式 …
当前我们的页面上有两个播放器，每个播放器上设置了不同的 CSS 类 ..  .player-1 …. 还有 .player-2
在播放器的设置我们手工设置安装了这两个播放器 …   注意手工安装 flowplayer 的代码在一个 $() 里的 function 后面的大括号里 …
它的作用就是，当网页准备好以后，才会执行这个大括号里的代码  … 这样可以保证能成功的安装 flowplayer 。
下面我们可以单独设置一下 .player-2 这个播放器
在这个 . flowplayer 这个括号里 … 先输入一组大括号 …   然后在这个大括号里，可以去配置播放器的相关选项 …
现在播放器的全局设置里，关掉了播放器的全屏幕功能 … 
下面我们可以单独让 .nh-player-2 这个播放器开启这个全屏幕的功能 … 
输入要配置的选项 …. fullscreen  … 后面是一个冒号 …  冒号右边是要设置的值  …  这里我们设置为 true … 
这样 .player-2 这个播放器就会启用全屏幕播放的功能 …
保存一下 ….  回到浏览器上 …
我们先看一下第一个播放器 …  
点击播放 … 播放器右上角没有全屏幕的图标 … 说明这个播放器仍然会去使用全局设置里配置的选项 …
再看一下右边这个播放器 …  点击播放 …
在这个播放器的右上角，会有这个全屏幕的图标 …. 
因为我们单独为这个播放器添加了配置的选项 … 开始了全屏幕功能 ..  单独为播放器做的设置为覆盖掉全局里的设置。
所以这里会显示这个全屏幕的图标 …


02-05-针对个别播放器的设置的另一种方法

单独去配置个别的播放器，除了可以使用 Javascript 的方法，我们还可以使用 HTML 的 data 属性的方法 … 这种方法更直观一些 …
首先，找到你想要单独设置的播放器所在的容器  … 一般就是这个带有播放器 CSS 类的 <div> 标签  …
然后输入 data … 后面一个横线 ..  再加上选项的名称  …  
比如我们要设置一下播放器的默认的音量 …  可以输入 data-volume="" 
在等号后面的引号里，可以输入这个属性的值  …  比如我们设置成 0.5 …  这样默认这个播放器的音量是 50% …
保存 … 回到浏览器 …  点击播放 …  
你会看到，现在播放器的默认的音量是一半，也就是我们使用 data-volume 属性设置的 0.5 …
tooltip
下面我们再试一下选项 …  在视频没有开始播放之前 … 把鼠标放在播放器上面的时候 …  会显示一个工具提示 … Hit ? for help …
我们可以去掉这个工具提示 ..
回到网页项目 … 找到播放器容器 … 要设置的选项是 tooptip … 输入 …  data-tooltip … 设置为 false … 不使用这个工具提示 …
保存 ….  回到浏览器 … 
鼠标放在这个播放器上 …  
现在就不会再显示那个工具提示的信息了 …


03-01-播放列表

播放列表就是制作一个视频的列表，然后播放器可以按照这个列表里的顺序去播放视频，用户也可以任意选择列表里的视频去播放 …
先来看一下在 Flowplayer 上创建播放列表的基本方法 …
在播放器容器的里面 …  就是这个带有安装播放器时的 CSS 类的 <div> 标签 …  把播放列表放在播放器容器里面的好处是，我们可以根据播放器的不同的状态，去设计播放列表的样式 ..
比如你可以分别去设计在视频暂停或者播放时的播放列表的样式。
在这个 <video> 标签的下面 ，我们可以去添加视频的播放列表 … 
先输入一组 <div> 标签  …  上面添加一个 CSS 类 …  类名是 .fp-playlist ..  这是 Flowplayer 默认的播放列表容器的类名 …
div.fp-playlist
<div class="fp-playlist"></div> 
你可以修改播放列表的 query 配置选项 … 去重新设置这个类名 … 
播放列表里的每个项目都可以使用一个 <a> 标签去定义 …
a[href="../video/croods-$$.mp4" style="background:url(../video/croods-p-$$.jpg)"]*3
在 <a> 标签里面的 href 属性里 .. 可以去设置视频的位置 ..   然后我们可以使用 CSS 为这个播放列表项目添加一个背景图像 …
这样我们就创建了一个视频列表 …  里面有三个视频 …  下面我们到浏览器上去预览一下 …
这里并没有显示播放列表  … 这是因为我们需要手工为这个播放列表添加一些样式才能让这个播放列表显示出来 …
在下面视频里我们再去看一下 ….


03-02-播放列表的样式

我们先去为播放列表创建一个样式表 … 在网页项目的根目录下面，先创建一个 css 目录 …  
然后在这个目录下面，添加一个 style.css 样式表 …   你可以根据自己的需求去命名这个样式表 … 或者你也可以把播放列表的样式添加到网页上已有的样式表里 …
再打开网页项目 … 在 <head> 标签上 … 去链接一下刚才我们创建的播放列表的样式表 …
<link rel="stylesheet" href="css/style.css">
再浏览到播放列表的代码 …. 这里播放列表容器上有个 fp-playlist 的类 …  播放列表里的项目都是 <a> 标签 ..
我们可以使用这些东西作为样式的选择器 …
打开 playlist.css  …
先设置一下播放列表项目的 <a> 标签的样式 … 
.fp-playlist a{
}
默认 <a> 标签是行内元素，我们可以使用 display 把它设置成块级元素 … 然后可以再设置一下它的高度和宽度  … 这样我们就应该可以看到这个列表列表了 …
.fp-playlist a{
    display:inline-block;
    width:80px;
    height:80px;
    margin-right:20px;
}
用 display 属性，把播放列表的 <a> 标签设置成 inline-block …  d:ib … 它会把元素设置成块级元素 … 并且他们会显示在同一排 …
再设置一下宽度  … width:80px …. 还有高度 … height:80px …  在项目的右边再添加一点边距 …
margin-right:20px …
播放列表容器
下面再去设置一下播放列表容器的位置  …   
.fp-playlist{
    position:absolute;
    bottom:-105px;
    text-align:center;
    width:100%;
}
先用 position … 设置位置为绝对位置 …   再设置一下绝对位置的底部的位置 …  bottom:-105px  
这样这个播放列表的位置会是播放器位置的底部再往下 105 个像素 …
为了让这个播放列表能居中显示 … 我们可以先设置一下它的宽度  …  width:100% …  设置为 100% 
再用 text-align … 设置为 center …  这样播放列表会相当于播放器居中显示 …
保存一下 …     打开浏览器 …    现在播放列表会显示在播放器的下面 … 
点击播放列表里的项目 …  会在播放器中去播放对应的视频 ….  
激活样式
下面我们再去给播放列表里的当前播放的项目添加点样式 ..    这样用户可以分别出当前播放的视频属于列表里的哪个项目 …
Flowplayer 会在播放列表里的当前项目的元素上添加一个 .is-active 的类 …  我们可以去设计一个类的样式 ..
回到样式表 …  输入 …
.fp-playlist .is-active{}  … 这个样式选择器的意思就是 … 去设置一下 .fp-playlist 这个类下面的 .is-active 的样式 …
添加一个黑色边框 …  border:1px solid #000; 
我们可以让底部的边框粗一些 …   border-bottom:3px solid #000;   保存 …  回到浏览器 …
现在，播放列表的当前项目 … 会用黑色的边框标记出来 …. （#点击选择）


03-03-上一个与下一个按钮

这个视频我们给播放列表添加一个控制播放上一个和下一个视频的按钮 …  先去添加按钮必须的 html 代码 …
先用一个 <a> 标签 …    里面的锚文本可以用一个向左的箭头 .. &lsaquo;    
在 <a> 标签上，我们要添加一个类 … class="fp-prev"   这行代码是控制播放上一个视频的按钮 … 
下面我们再去添加控制播放下一个视频的按钮 … 先复制这行代码  … 粘贴 … 再修改一下 ..
这里我们用一个 向右 的箭头 … 
控制播放下一个视频的按钮上的类应该是 fp-next …   fp 就是 flowplayer 的简称 … next 表示下一个 ..
按钮样式
准备好需要的 HTML 以后，下面我们去给按钮添加样式 …  打开 playlist.css 这个样式表　… （# 实时预览）
先输入样式的选择器 …
.fp-prev, .fp-next{}
这个选择器的意思就是，我们要同时为这两个类添加一些样式 …
先定义它们的位置属性 …  position … 设置为 absolute … 绝对的位置 ...
position:absolute;
然后让它相对播放器垂直居中显示 … 可以设置五上 bottom … 设置为 50% …  再设置下字体 font-family:sans-serif
上一个，下一个
下面我们再分别设置一下这两个按钮的位置 …  先设置一下 .fp-prev …
.fp-prev{} 
用 left 属性 .. 设置为 -40px … 这样控制播放上一个视频的按钮，会相对于播放器的左边，向左偏移 40 个像素 ..
然后我们再设置一下控制播放下一个视频的按钮 … 
.fp-next{} …  我们让它基于播放器向右偏移 40 个像素  …  用 right 属性 … 值是 -40px
继续
下面我们再去设置一下按钮的大小 …  font-size:35px; 
让按钮可以点击的区域大一些 … 我们可以把它转化为 block 元素 … display: inline-block  .. 设置为行内级别的块级元素 ..
然后设置一下它的高度和宽度 …. height:35px;  width:35px …. 
再设置一下行高 … line-height: 25px …   让按钮文字居中显示 … text-align:center;
下面可以再设置文字的颜色  … color:#ccc;    这是一种灰色 ...
为了让鼠标放在按钮上使用鼠标指针变成指向的样式 … 可以设置 cursor 为 pointer …
 cursor:pointer;
.is-mouseover
下面我们可以给按钮添加鼠标悬停的样式 …   这里我们并不直接设置按钮的悬停样式 … 而是借助 flowplayer 给我们提供的一个有用的类 ..  is-mouseover …  当用户把鼠标放在播放器上面的时候 
flowplayer 会为播放器添加这个 is-mouseover 的类..
这个样式的选择器可以这样来写 …
.is-mouseover .fp-prev, .is-mouseover .fp-next{}
然后里面用 color 属性设置一下颜色  …  这里我们设置成黑色 …     去掉下划线 tdn
保存 …
测试
去浏览器上测试一下 …. 
这里你会看到，播放器的左右两边各有一个按钮 ….    鼠标放在播放器上面的时候 … 按钮的颜色会改变 …
点击按钮 …  可以播放，在播放列表里面的，下一个 …   或者 上一个 视频 ….
HTML
<a class="fp-prev">&lsaquo;</a>
<a class="fp-next">&rsaquo;</a>
CSS
.is-mouseover .fp-prev, .is-mouseover .fp-next{
    color:#000;
}
.fp-prev, .fp-next{
  position:absolute;
  bottom:50%;
  cursor:pointer;
  font-size:35px;
  color:#ccc;
  display:inline-block;
  height:35px;
  width:35px;
  text-align:center;
  line-height:25px;
}
.fp-prev{left:-40px}
.fp-next{right:-40px;}


04-01-字幕

Flowplayer 支持我们为视频添加字幕，可以使用 vtt 格式的字幕，这种字幕格式是 HTML5 标准的一部分 …  现在你看到的就是一个 vtt 字幕文件  …
文件的开始要用一个 WEBVTT … 表示这个字幕是一个 vtt 格式的字幕 ..  然后可以使用下面的形式去定义内容在某个时间段显示在视频上 …
最开始这部分是内容出现在视频上的具体的时间 …  后面这个时间是结束显示字幕文字的时间 …  
另起一行，再输入在这个时间段要显示的文字内容 … 
你可以使用同样的形式，去定义在视频的其它时间段要显示的文字内容。
添加字幕到视频上
下面我们把这个字幕文字作为一个轨道添加到视频上去显示 …   先打开网页项目的文件 …    找到播放器的代码 … 
在播放器的 <video> 标签里，除了可以添加视频源，我们还可以去添加字幕的来源 …
这里我们要用到的是 <track> 标签  …  然后用 src 属性 … 去指定一下字幕的位置 …   我们的字幕是在 video 目录下 …  字幕的文件名是 …
<track src="video/croods-tlr3_h720p_chs.vtt">
保存 … 
打开浏览器去预览一下 …   点击播放 …   
视频播放到某个时间的时候，就会去显示在字幕文件里设置的，这个时间段上的文字内容 …   过一会儿，会显示下一个时间段里的内容 ….  
要注意的是，虽然 Flowplayer 支持我们为视频添加多个字幕文件，比如多种语言的字幕 …  不过目前它还没有为用户提供一个可以让用户切换字幕的界面 … 
并且 一旦为视频添加了字幕，也没有办法让用户可以关掉字幕。


04-02-字幕的样式

默认字幕在视频上显示的样式是，字幕的文字是白色，还有一个透明的灰色的背景。下面我们去修改一下这个字幕的样式。 Flowplayer 会把字幕内容放在一个带有 .fp-subtitle 类的 <div> 标签里…  
字幕的文字内容会用段落标签来包围… 
我们可以去覆盖 flowplayer 默认为这个类添加的样式 …
打开网页项目的样式表 …   因为我们要去覆盖原有的 .fp-subtitle 类的样式 … 所以样式的选择器应该拥有更高级别的拥先权 …
可以这样来写 … 
开始用播放器容器上定义的类名 … 这里我们用的是 .nh-player-1 …  然后空格 .. 再输入 .fp-subtitle …   后面再加上一个 p 
这样在这里定义的样式，就会覆盖掉原有的 .fp-subtitle 下面的 <p> 标签的样式了 … 也就是字幕文字的样式
可以先用 font-size … 修改一下字幕文字的大小 …  
font-size:25px; 
你也可以改变文字背景的颜色  …
background:#0482ff; 
可以用 opacity 来控制字幕文字的不透明度 …  0.5 … 0.9 ...
opacity: 0.9;   
或者我们可以去掉文字的背景 …  background:none;
然后再给文字添加点阴影的效果 ….
text-shadow: 1px 1px 1px #000000;


05-01-皮肤 - 播放器的外观

Flowplayer 的皮肤，就是播放器的样式，都是用 CSS3 来设计的。 Flowplayer 给我们准备了三款皮肤，你可以基于这些皮肤去修改，或者也可以从头来设计自己的播放器皮肤。
我们之前已经看到了 flowplayer 的 minimalist 这款皮肤的样式 … 下面我们再试其它两款皮肤  …
先找到嵌入播放器皮肤样式表的代码  …. 修改一下 … flowplayer 的皮肤在 skin 这个目录下面 … （#点击边栏）
先看一下 playful.css 这个皮肤  …   
<link rel="stylesheet" type="text/css"
            href="flowplayer-5.4.3/skin/playful.css">
保存 … 回到浏览器 …   现在播放器用的就是 playful 这款皮肤  … （# 随便点点 ）
再回到网页项目 … 然后试一下 functional 这个皮肤  …
<link rel="stylesheet" type="text/css"
            href="flowplayer-5.4.3/skin/functional.css">
保存 …  
现在播放器的样式就是在 functional.css 样式表里设计的 … 
选项
下面我们再去看看 Flowplayer 为播放器皮肤提供的一些额外的 CSS 类 …  在播放器上添加这些类，可以改变播放器的样式 …
比如现在播放器，当我们把鼠标放在播放器上面的时候，才会显示控制栏 … 如果你想让控制栏一直显示在这里，我们可以添加一个
.fixed-controls 的 CSS 类到播放器上面 ...
我们先把播放器的皮肤改回成 minimalist …
然后找到播放器的代码  …  在播放器容器的上面 … 添加一个 .fixed-controls …
保存 … 回到浏览器 …
现在不管我们是否把鼠标放在播放器上面，控制栏会一直显示 ….
下面我们再去试几个 … 
加上一个 color-alt …   保存 …   （#播放）
默认的播放进度是蓝色的 .. 加上 color-alt 以后，播放进度会变成白色 …  类似的还有 color-alt2  ….
现在播放进度会变成红色 …   再试一下 color-light …  这个类是针对亮色的视频优化的样式 .
播放按钮会变成黑色 … 控制栏会变成白色 …
另外还有一些类可以控制，播放器控制栏上的元素的显示 … 比如，添加一个 no-volume 类 … 可以去掉控制音量的东西 … 用 no-mute … 可以去掉静音选项 … 
加上一个 aside-time 可以让时间显示在播放器的左上角 …  或者，你不想显示时间 … 可以加上一个 no-time …
想在控制栏上加上一个播放或暂停的按钮，可以添加一个 play-button 类 …


05-02-皮肤设计器

http://flowplayer.org/designer/
flowplayer 的官方网站提供了一个可以在线设计播放器皮肤的功能，我们可以先选择一款基本的皮肤 …  最上面会显示 Flowplayer 默认带的三款皮肤  …
每款皮肤还有几种不同的样式 …   这里我们基于 minimalist 去定制一个皮肤 …    选择它的第三种形式 …   然后我们再修改一下控制栏的样式 …
Controlbar
Overlayed 可以控制，控制栏是否会覆盖显示在视频之上 …   取消这个选项 … 控制栏会紧接着视频底部显示 …  
然后我们再去修改一下控制栏上不同地方的颜色  …  Background 就是控制栏的背景颜色 …  点击后面的颜色块 … 可以打开一个颜色选择器去选择想要的颜色  ..
或者我们也可以直接在它前面的文本框里输入颜色的值  …  背景我们设置为  #232323 … 一种深灰色 ..
Timeline 是播放器时间轴的背景颜色 …  设置成 #3f3f3f …   Progress 是视频播放进度的颜色 …  我们用一种绿色 … #1b7e5a …
Buffer 是视频下载进度的颜色  … 我们可以设置成一种比时间轴深一点的颜色  …   #323232 
最后的这个 Site Background 是网站背景的颜色  …  这里我们可以不用管它 …
UI
UI 这块可以控制在播放器上显示的东西 ..   Time 是时间  …  Top/Left ，可以让时间显示在播放器的左上角 …   Volume 时音量 … Slider 是控制音量的滑块 …
Play 是播放按钮 … 我们可以加上这个 …
Embed 是播放器的嵌入功能 …  Fullscreen 可以全屏幕播放视频 …  Dark icons 可以使用暗色的按钮元素 … 
Features
Features 上可以设置播放器的功能 ..  勾选 Playlist 可以开启播放列表 …   Keyboard shortcuts 是播放器的快捷键的功能 ..  
Google analytics 是 Google 分析的功能 … Subtitles 是视频的字幕 …
Playback
Playback 是跟播放相关的一些特性 …  Start width a splash image .. 可以使用播放器的引导页的功能 …  Preload video 选项可以决定是否要预先载入视频 …
Loop 是播放器的循环播放的特性 …
完成
都设置好以后，我们可以点击 View source … 查看源代码  …
你可以看到，最开始嵌入了 flowplayer 的 minimalist 皮肤  …  
这个 custom player skin  下面的样式，是我们通过设计器设计的播放器皮肤的样式 …   我们可以复制这块样式，到自己的网页项目的样式表里 …
另外，如果你修改了播放器的其它的设置 ..  在播放器容器上面 … 会有一些额外的 css 类 … 你可以复制这些类到你的播放器的容器上 …
这里我们先只复制自定义的播放器皮肤的样式 …
放在 style.css 这个样式表上 …
然后打开浏览器 …  
你会看到 … 播放器的样式会变成我们在皮肤设计器里修改的那样 …


05-03-快捷键 -快速控制播放器播放视频

Flowplayer 播放器设置了一些很有用的快捷键，使用它们，可以快速的控制播放器的行为 …    鼠标放在播放器的上面 …
按一下 空格 键 … 可以播放视频 …    再按一下 … 可以暂停播放视频 
esc 键 … 可以停止播放视频 … 
f 键是全屏幕播放视频 …  再按一下 …  可以退回到原始的状态  …  或者使用 esc 键也可以 …
控制播放器的音量 … 可以使用上下箭头 …  向上箭头是增大音量 …   向下的箭头是减小音量 ..
想要静音的话 … 可以按一下 m 键..
快放视频，可以使用 shift 键，加上向右的箭头 ..    默认最快可以 2 倍的速度播放视频 … 
慢放视频可能用 shift 再加上向左的箭头 …  默认最慢可以使用 1/4 的速度播放视频 
单独按下向右的箭头，可以分段前进浏览视频  …  每次会向前跳转 10% 的进度 …
单独使用向左的箭头可以后退浏览视频 …  每按一次也可以后退 10% 的进度 …
我们也可以使用数字键去控制视频播放的进度 …    比如按一下 5 会浏览 50% 的进度 ….   
如果你拖放到了某个时间点上 …   在视频播放了一会儿以后，你又想回到那个时间点 … 可以按一下  .  
每按一下 .  
视频都会返回到之前拖放到的那个时间点上播放 ….


06-01-使用 Google 分析统计视频的播放

我们可以使用 Google 分析来统计用 Flowplayer 播放的视频的相关信息，比如视频的播放次数，播放时间等等。 首先我们需要去创建一个 Google 的帐户。
然后再去开通 Google 分析的功能 …  再为想要统计的网站创建一个跟踪的配置 …  
这样你会得到一些跟踪的代码 … 把这些代码放在网页上，可以统计用户的访问  …  不过这里我们只需要得到这个跟踪 ID …
这个大写的 UA 开头，后面加上一串数字的代码就是跟踪 ID …. 先复制一下 …
安装
回到网页项目的代码 …   在 Flowplayer  上启用 Google 分析的功能有两种方法 … 一种是用 data 属性 …
找到播放器的代码  … 然后添加一个 data-analytics …  在等号后面的引号里，输入 Google 分析的跟踪 ID …
另一种方法是，可以去配置一下播放器的全局设置 ….
flowplayer.conf.analytics = "UA-27182341-1";
在引号里加上 Google 分析的跟踪 ID .. 这样我们就不用为页面上的每个播放器都去使用 data 属性来添加 Google 分析的功能了 …
这个全局设置可以为页面上的所有播放器都启用 Google 分析的功能 …
测试
过一段时间以后，Google 分析会记录用户播放视频的情况 … 打开 Google 分析的帐户 …  （#点击报告 ）
打开 内容 …  事件 …. 热门事件 …
在这里你会看到一个 Video / Seconds played …  这就是 Google 分析统计的视频的播放情况 …  点击打开 …
html5/mp4 ..  是使用的播放器的模式，还有视频的格式 …    事件总数 … 就是视频播放的次数 … 
事件的价值是视频的总共播放的时间  …   平均价值是每次平均播放的时间 …  单位是秒 ….
我们可以进一步打开 …    这里会显示不同的视频的播放的情况   …
点击右上角的工具栏 … 可以使用不同的图表展示数据 … …  
在这里，你还可以选择一个次级维度 …   比如在技术 这里，选择 操作系统  …  这样在下面，你会看到用户使用不同的操作系统播放视频的情况 …. 
要注意的是，如果你在国内，访问 Google 的时候很可能会遇到问题 … 解决的办法是，可以使用代理服务器访问 Google … 或者可以使用 VPN …


