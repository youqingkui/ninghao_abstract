01-01-认识 PHP

在这个课程里面，我用的编辑器是 Brackets  ...  先在 web 目录里面，新建一个目录 ... 可以叫做 php-course ...  然后用编辑器打开这个目录 ..   文件 - 打开目录 ... 浏览到刚才创建的目录 ... 打开 ... 
这样这个目录里面所有的东西都会在编辑器的边栏上显示出来 ..  新建一个目录 01-01 ..  然后在这个目录的下面，新建一个 php 文件 ...  php 文件的扩展名是 php ...  index.php  ...  这样我们就创建了一个 php 文件，叫做 index 
想要实时预览输出的结果，可以点击这个闪电图标 ...  或者打开文件菜单，选择 实时预览 ...  第一次实时预览 php 文件的时候，会提示我们设置一个根目录地址 ...  因为预览 php 文件，需要 web 服务器，还有 php 解释器 ... 这些东西已经在我们之前搭建的 web 开发环境里面包含了。
所以这个根目录，可以是 localhost:8888  ...  后面加上我们最开始创建的目录 ...  php-course  ...   这样在预览 php-course 里面的 01-01 下面的 index.php 这个 php 文件的时候，打开的地址应该就是 localhost:8888/php-course/01-01/index.php
现在，我们已经有了一个 php 文件，并且可以在浏览器上实时预览输出的结果 ...  这个视频我们去简单的认识一下 php
php 的代码可以嵌入到普通的 html 代码里面 ... 比如在这个 php 文件里，我们可以先去添加一个简单的 html 文档的结构  ...  因为在 Brackets 编辑器里，我安装了 emmet 插件 ... 所以，可以输入一个 ! 号，然后按下 tab 键 ... 这样就可以得到一个简单的 html 文档的结构 ... 
在这个文档的 body 标签里，可以去输入一点 php 的代码  ...  
这里可以先添加一个普通的 html 的标题标签  ..  h1 ... movieTalk  ...  movieTalk 是我虚拟的一个网站的名字 ... 
<h1>movieTalk</h1>
然后在它下面，再去添加一点 php 。
在文件里面，开始输入 php 的代码，首先要使用一个 php 的开始的标记 ...  然后在 php 代码结束的地方 .. 输入一个 php 结束的标记 ...
php 的开始标记是一个尖括号的左半部分 .. 加上一个 ? 号 ... 
结束的标记 ... 先是一个 ? 号 ... 然后是尖括号的右半部分 ...  
在它们之间，我们可以去添加需要的 php 代码  ...   比如这里我先用一个 echo 命令 .. 去在屏幕上输出点东西 ...   要输出的东西是一段文字 ... 需要在文字的周围添加一组引号 ..  可以是单引号，也可以是双引号 ...  您好 ... 在这行代码结束的地方 ... 需要使用一个分号 ... 表示这行命令到这里就结束了 ... 
<?php echo '您好！'; ?>
在浏览器上，你会看到，输出了使用普通的 html 标签标记的 movieTalk  ...  下面是使用 php 输出的 您好 这两个字 ... 
工作原理
用户在请求查看这个 index.php 文件的时候 ...   web 服务器会把文件当成 php 来处理 ...  文件里面的 html 会直接输出到浏览器上 ...  遇到 php 的标记 ... php 解释器会解释这里面的 php 代码的意思。算出结果以后，再把它交给 web 服务器，然后 web 服务器会把最终的结果交给用户的浏览器 ... 
也就是不管我们的 php 代码有多复杂 ... 最终交给用户的，只是简单的 html 代码  ...


01-02-注释 - Comments

在程序里面添加注释是一件挺重要的事，注释可以帮助别人读懂你的意思，也可以提醒未来的自己。
在 PHP 代码里面，添加单行的注释，可以使用两个斜线 ...   在这里我们可以先整理一下这行代码  ..    让 php 开始的标记单独在一行 ...  结束的标记也单位在一行 ..
在这个 echo 语句的上面，添加一行注释 ... 先输入两个斜线 ...   加上一个空格 .. 然后再输入注释的具体的内容 ...
// 认识 PHP
很多编辑器都有代码高亮的功能 ...  在我的编辑器里 ... 注释的内容的文字是灰色的 ... 
你会发现，在屏幕上，不会输出注释的内容 . ..  
如果注释的内容有很多行，可以使用这样的形式 ... 
开始是一个斜线加上一个星号 ...  经常也会在多行注释的第一行使用两个星号 ...   注释结束的地方使用一个星号斜线  ... 
这样在它们之间的所有的东西都会被认为是注释的内容 ... 
不过一般，每一行注释的内容开始都用一个 * 号。 所有这些注释内容都不会显示到屏幕上 ..


01-03-变量 - Variables

在程序里面，可以使用变量来表示一块数据 ..  变量有点像是数据的代号，或者名字 ...   一但定义了一个变量，让它去表示一块数据以后，我们就可以在程序的其它地方，使用变量的名字，来得到他表示的数据。
在 php 里面，定义一个变量，可以使用一个 $ 符号 ... 然后再加上变量的名字 ...  这个名字可以使用字母 ... 数字，或者下划线 .. 但是不能使用数字开头 ...   而且变量的名字是区分大小写的 ...
比如在这里，我们先去定义一个变量 ..  输入一个 $ 符号 ...  变量的名字是 name ...   这样我们就定义了一个叫 name 的变量 .. 不过它现在还没有值  .. 
在定义变量的同时，使用一个等号，可以给它赋一个值  ..  这个等号，就是赋值运算符 ... 
这里我们让 name 这个变量等于 王皓  ...    王皓这两个字的周围用了一组引号 ... 表示这是一个字符串类型的值 ... 
在下面，使用　echo 输出 您好，这行代码里， 可以加上这个变量 ...   在 您好的后面加上一个点，这个点，表示连接  ...  要连接的是 $name 这个变量  ... 
在浏览器上，会显示 ... 您好 王皓 .. 
        $name = '王皓';
        echo '您好！' . $name; 
改变
变量的值是可以改变的 ...   比如在这行代码的下面，我们再重新去给 $name 这个变量赋一个值  ..  让它等于 小雪  ...  另起一行，再去输出一行文字  .. 
        $name = '小雪';
        echo '您好，' . $name . '<br>'; 
在后面再连接一个 <br> 标签  ...     
保存 ...   会显示 您好，王皓，您好，小雪 ...  第一次要求输出 $name 变量的时候，它的值是 王皓 ...  接着我们又重新给 $name 变量一下值，让它去代表 小雪 这两个字   ... 再次要求输出它的时候 ...  就会使用这个新的值了 ... 
意义
定义好一个变量以后，我们就可以在程序的不同的地方，去使用它。 比如在这个文件的开始，去定义一个变量 ...  叫它 site_name 。它的值是网站的名字 ...   movieTalk ... 
<?php
    $site_name = 'movieTalk';
?> 
下面，在想要输出网站名字的地方，我们都可以去使用 $site_name 这个变量去代替  ...  比如在 title 标签之间，可以使用 $site_name 代替 ...
<?php echo $site_name; ?>
另外，在这个 h1 标签里面，也使用这个 $site_name .. 
你会看到，页面的标题 ... 还有页面上的这个 h1 标签，都会输出 $site_name 这个变量表示的值  .. 也就是 movieTalk  .. 
这时候，如果你想改变网站的名字 ...  我们只需要修改 $site_name 这个变量的值 ...  
改成 ninghao 
在页面上，你会看到，所以使用这个变量的地方的内容都会变成修改之后的值了。


02-01-字符串 - String

字符串就是文字，可以是一个单词，一个短语，也可以是一段文字。在 PHP 里面定义一个字符串，可以使用单引号或者双引号。
在 ninghao 这个词的周围加上一个单引号 ...   可以把它交给一个变量，可以直接使用 echo 把它输出到屏幕上 ... 
echo 'ninghao';
我们可以再把它变成一名话 ...  We're ninghao  ..    这里会出现一个语法错误的提示 ... 这是因为在使用单引号定义的字符串里面，不能包含其它的单引号 ... 如果你想输出这个单引号，需要转换一下它的意义 ... 可以在它的前面，加上一个 斜线 ... 
echo 'We\'re ninghao';
这样就能正常输出它了 ... 或者， 可以把定义字符串用的单引号，换成双引号 ...   这样就不再需要这个转义用的斜线了 ..
echo "We're ninghao";
在双引号里面，我们还可以包含变量 ...   在上面先去定义一个变量 ...
$name = 'ninghao';
然后把这个变量放到下面这行代码里 ...   去掉 ninghao 这个词 ... （#保存）
替换成上面的变量 ... 
echo "We're $name";
另外，在双引号里，还可以识别出转义序列 .. 像回车符，换行符，制表符等等 ... 
再看一下换行符 ...   在下面我们可以再输出一个字符串 ....
echo 'How are you doing ?';
查看一下源代码 .... 这个字符串都显示在同一排 ... 
回过来，我们在 We're $name 这个字符串的最后加上一个 \n  ..  这个符号就是换行的意思 ... 要注意的是，不同的系统使用的换成符都不太一样 ... Windows 上用的是 \r 回车符，再加上一个 \n 换行符 ...   UNIX 类型的系统上面，只用一个 \n 表示换行 ... 
保存 ... 回到显示源代码的这个页面  ...  刷新  ...  
现在输出的第二个这个字符符会显示在第二行 ... 因为在 We're ninghao 这个字符串里面，我们加上了一个换成符 \n ... 
要注意的是，使用单引号定义的字符串，不能识别出这些转义符号 ..  比如你在单引号定义的字符串里面，加上了一个 \n ，会直接输出这个 \n 。


02-02-Heredoc

除了使用单引号还有双引号定义字符串，还可以使用 heredoc 的形式去定义字符串 ...  这种方法比较适用去定义有很多行文字的字符串 ...  它可以识别出字符串里面的变量 ，转义序列 ... 还可以输出双引号 ... 
定义的方法是这样的 ... 先要使用三个小于号 ...  加上一个空格 ... 然后可以再加上一个标识 ...  你可以随便去命名这个标识 ...  我们需要用到这个标识去结束定义这个字符串 ... 
比如我要定义显示一段歌词的字符串..  可以叫做 LYRIC ... 一般这个标识都是大写的形式 ... 
<<< LYRIC 
另起一行 .. 可以输入字符串里面的文字 ...   文字里，可以使用 HTML 标签  ... 
今天我，寒夜里看雪飘过，怀着冷却了的心窝飘远方。<br>
风雨里追过，雾里分不清影踪，天空海阔你与我，可会变。 
然后在上面，再去定义两个变量 ... 
$track_name = '海阔天空';
$band_name = 'Beyond'; 
再把这两个变量也放到这个字符串里面 ... 
$track_name 今天我，寒夜里看雪飘过，怀着冷却了的心窝飘远方。<br>
风雨里追过，雾里分不清影踪，天空海阔你与我，可会变。 - $band_name 
结束以后，要另起一行 ...  加上标识 ...  LYRIC  ...  再加上一个分号 ... 要注意的是，这个结束的标识跟开始定义这个字符串用的标识应该是一样的 ... 并且它需要在单独的一行 ... 不能跟其它的代码在同一行 ...  比如这个 PHP 文件里面，没有使用 php 结束的标记 ... 因为 php 会自动加上这个结束的标记 ...   这样如果这个 heredoc 的结束标记是这个文件的最后一行 ... 很可能在加上 php 结束的标记的时候，会跟这个 heredoc 的结束标记在同一行 ... 这样就会出现一个错误 ... 
现在，我们就可以输出这个字符串了，也可以把这它交给一个变量.. 随便我们怎么用 ... 
在它的前面，加上一个 echo  ... 
在屏幕上，会显示出这个使用 heredoc 形式定义的字符串 ...


02-03-清理字符串前后多余的字符 - trim

用户在表单里面输入的东西，有时经常会在内容的前后多出一些没用的空格..  得到这些内容以后，使用 trim() 函数，可以去掉字符串前面和后面的空格 ...  trim() 函数也会去掉字符串前后的回车符，换行符，水平垂直制表符还有字符串结束符。
先定义一个字符串 ...  $email  ...  它的值是一个邮件地址 ... 在这个地址前后，先故意加上两个空格 ... 
$email = ' wanghao@ninghao.net ';
然后把这个 $email ，放到 var_dump 这个函数把它输出到屏幕上 ...   在 var_dump 函数的周围可以输入一组 pre 标签，这样会保持输出的格式   ...   
你会看到在屏幕上，会显示出 $email 的类型，还有字符数 ..   一共是 21 个字符 ...  这个字符数包含字符串前后的空格 ... 
输入一个逗号 ... 另起一行 ... 再用 trim 函数去整理一下这个 $email ... 
trim($email)
保存 ...  屏幕上显示的第二行就是使用 trim() 函数以后的 $email ...  现在，这个字符串的字符数是 19 ..  因为 trim 去掉了 $email 前后的两个空格 ... 
跟这个函数类似的还有 ltrim 和 rtrim ....  ltrim 可以去掉左边的空格 ...  rtrim 可以去掉右边的空格 .. 
ltrim($email),
rtrim($email)
去掉左边的一个空格 ... 字符数是 20，去掉右边的一个空格，字符数也是 20 。
其它
如果在字符串前后包含换行符，回车符这些东西，trim 函数也会把他们去掉 ...   在这个 $email 字符串里，加上一个回车符 \r ... 再加上一个换行符 \n ..
保存 ...  你会发现，trim 还有 rtrim 并没有去掉字符串右边的这两个符号 ...  这是因为，在定义 $email 的时候，用的是单引号 ... 单引号不会转义这些字符  ...  我们需要把它变成双引号 ... 
这次，trim 还有 rtrim 就会去掉 $email 这个字符串右边的空格，回车符还有换行符了 ..   
我们可以给这些函数传递它的第二个参数，也就是指定一下要删除掉的东西。比如我们只想去掉空格还有回车符 ...  
在 trim 这里，输入一个逗号 ...  然后再指定一下要删除掉的东西 ...  这里需要使用一组双引号 ...   在引号里面，先输入一个空格，再加上一个 \r ，这就表示，我们只想去掉字符串前后的空格，还有回车符 ...  
trim($email, " \r"),


02-04-字符串格式化

想把字符串全部变成大写的字母，可以使用 strtoupper 函数。str 应该就表示 string 的意思，to upper 是 to uppercase 的简称 ..  表示要把字符串转换成大写的形式 ... 
输入 strtoupper ... 一组括号 ...   可以把要转换的字符串作为这个函数的一个参数 ...  magic ...  这个函数会返回大写之后的字符串 ... 前面加上一个 echo ，可以把转换以后的字符串输出到屏幕上..
echo strtoupper('magic');
（#注释，保存 ）
小写
把字符串转换化小写的，用的是 strtolower 函数 ...  string to lowercase  ..  比如把 Magic 这个字符串转换成小写的 ... (#先输入 Magic，然后加引号，然后再加括号)
可以把它作为 strtolower 函数的一个参数 ... 再用一个 echo 把它输出到屏幕上 ... 
会把字符串里面大写的字母全部变成小写的 ... （#注释，保存）
首字母大写
如果只想把字符串的第一个词的首字母变成大写的，可以使用 ucfirst ...  uppercase first ... 
准备一个字符串 ... how are you doing ?  .. 把它作为 ucfirst 函数的一个参数 ... 
echo ucfirst('how are you doing?');
这个字符串，只有第一个词的首字母是会是大写的 ...   想把每个词的首字母都变成大写的，我们可以使用 ucwords 函数 ... 
每个词首字母大写
echo ucwords('how are you doing?');
添加反斜线
再把字符串放到数据库里的时候，我们需要给内容里面的单引号，双引号这些东西的前面加上一个 反斜线 ...   因为数据库会认为这些符号有特别的意思 ..  不过我们不需要手工去添加这些反斜线  ...  在往数据库里存储内容之前，可以使用 addslashes 函数，去自动给内容里面需要的地方添加上反斜线.. 
比如这个字符串 ... We're ninghao 
把它作为 addslashes 函数的一个参数 ..  再把返回的结束输出到屏幕上 ...
echo addslashes("We're ninghao");
你会发现，在 We 后面的单引号的前面，自动加上了一个反斜线 ... 这样就可以安全的把这个字符串放到数据库了 ... 
然后在从数据库里读取出内容以后，可以使用 stripslashes 函数，去掉自动添加的这些反斜线 ...
echo stripslashes("We\'re ninghao");
这个函数，去掉了 We 和后面的单引号之间的那个反斜线 ...


02-05-查找字符串中的字符串

查找一个文字里面是否包含指定的内容，如果包含的话，就返回这块内容。实现这个功能，可以使用 strstr() 函数。 先定义一个字符串 ...  比如一个电子邮件地址 ... 
$email = 'wanghao@ninghao.net';
然后用 strstr() 函数去看看在这个 $email 里面，有没有 @ 这个符号 ... strstr ... 这个函数的第一个参数是一个字符串 ... 这里就是 $email 这个字符串 ...  第二个参数就是那个要判断的是否包含的内容。我们要做的是看看 $email 这个字符串里面，有没有 @ 这个符号 ... 所以，这里的第二个参数就应该是这个 @ 符号 ...  前面再加上一个 echo .. 输出返回来的结果 ...
echo strstr($email, '@');
因为 $email 这个字符串里面包含 @ 符号 ...  所以就会返回这个字符串里面，包含 @ 符号之后的这部分内容 ...  这里返回来的就是 @ninghao.net ... 
如果不包含要找的字符串的话 ... 这个函数会返回 false ... 
想得到前面那块内容 ... 可以把 strstr 的第三个参数的值，设置成 true ... 
echo strstr($email, '@', true);
这个 strstr 函数是区分大小写的 ..  想不区分大小写，可以使用 stristr 函数。另外还要注意这个 strstr 只会返回第一个匹配的地方之后的内容 ...  
下面，我们再去定义一个字符串 ...
$site = 'blog.ninghao.net';
再用一个 strstr() ... 要检查的字符串是 $site .... 要找的东西是一个点 ... 再输出返回来的结果 ... 
echo strstr($site, '.');
这里返回来的是 .ninghao.net ...   也就是从第一个出现在 blog.ninghao.net 这个字符串上的点开始之后的内容 ..  去掉最开始的这个点 ... 可以使用前面的视频里介绍过的 trim 函数 ...  指定一下这个函数的第二个参数 .. 也就是要去掉的东西 ... 
echo trim(strstr($site, '.'), '.');
如果你想返过来 .. 从后往前去查找 ...  可以使用 strrchr 函数 .. 
echo strrchr($site, '.');
得到的结果是 .net ...  因为从后往前，第一个出现 . 的地方就是这个 net 前面的点 ...  所以会返回这部分内容 ...


02-06-查找字符串中的字符的位置号

如果你只想知道指定的字符串在某个字符串中出现的位置，我们可以使用 strpos ..  str 是 string ，pos 应该是 position 的简称 ...
比如去看一下 $site 这个字符串里面，第一个点出现的位置 ...  strpos .... 第一个参数是被查找的字符串 ... $site .. 第二个参数是要找的字符串 ...  这里就是一个点 ... 
然后再输出找到的结果 ... 
echo strpos($site, '.');
显示的是 4 ，也就是，在 blog.ninghao.net 这个字符串里面，第一个点出现的位置是4，这个字符的序号是从 0 开始的 .. 
在这个函数里，我们还可以去指定一个偏移量 ...  意思就是，从第几个字符以后开始查找 ...   这个偏移量是 strpos 函数的第三个参数 ... 
先输入一个数字 2  .. 保存 ... 
得到的结果还是 4，也就是从第 2 个字符开始往后查找这个点 ...  第一个点在这个字符串中的位置仍然是 4 。
再改成 5 试一下 ...   保存 .. 
得到的结果是 12 ....  也就是在这个字符串里面，第二个点出现的位置 ..   因为这个偏移量 5 ，已经越过了第一个点出现的位置 ...   5  以后的第一个点在这个字符串里的位置就是 12 。 也就是 net 前面的这个点。
strrpos
如果想找出这个字符串里面，最后一个点出现的位置  ...  可以使用 strrpos ...   这个函数用法跟 strpos 函数的用法是一样的 ..  
echo strrpos($site, '.')
保存 ... 得到的结果是 12 .. 也就是在 blog.ninghao.net 这个字符串里面，最后一个点出现的位置是 12 。
这个函数也支持一个偏移量的参数 ...  而且这个偏移量可以是一个负数 ..


02-07-替换字符串中的字符串

把一段文字里面的某些词用你指定的词替换掉，这就是 str_replace 函数的功能。
比如我们想把一段文字里面，所有的宁皓这两个字，替换成一个指向宁皓网的一个链接。 str_replace()  ... 它的第一个参数，就是想要替换掉的东西 .. 这里就是 宁皓 这两个字 ...
第二个参数是要替换成的东西，也就是把宁皓这两个字替换成什么 ... 要在第二个参数这里设置一下 ...  要替换成一个链向宁皓网的链接 ... 
第三个参数就是一段文字  ...  也就是在这段文字里面，出现的所有的宁皓网这两个字 .. 都会被替换成一个链向宁皓网的链接 ...   最后再输出替换之后的结果 ... 
echo str_replace('宁皓', '<a href="http://ninghao.net">宁皓</a>', '宁皓是一个网站');
在这里，你会看到，字符串里面的宁皓这两个字，已经被替换成一个链接了... 
多词替换
要替换的，还有替换成的东西还可以是一个数组 ... 比如你想把在一段文字里面一些指定的词，替换成你想要的东西。 下面去试一下 ...
先定义两个变量 ...  $title 等于 海阔天空 ..  $artist 等于 Beyond ... 
$title   = '海阔天空';
$artist  = 'Beyond'; 
再去定义一个字符串 .. $lyric ...    在这个字符串里面，有一个尖括号 title ，还有一个 尖括号 artist ....  下面，我们可以把字符串里面的这两样东西，用 $title 变量，还有 $artist 变量的值替换掉 ... 
$lyric = '今天我，寒夜里看雪飘过，怀着冷却了的心窝飘远方。<title> - <artist>';
str_replace() ...  先设置一下第一个参数 ...  它可以是一个数组  ...  array .. 数组里的项目 ... 就是要被替换掉的东西 ...  这里就是尖括号 title 还有 artist ...
然后，第二个参数，也是一个数组 ... 是对应的要替换成的东西 ...  array ...  把尖括号 title 替换成 $title 的值 ...   还有把尖括号 artist 替换成 $artist 的值 ... 
第三个参数是要执行替换动作的字符串 ...  $lyric ...  前面再用一个 echo ... 输出替换之后的结果 ...
你会发现， $lyric 字符串里面的尖括号 title 还有 artist ，都被替换成对应的变量里面的值了 ...


02-08-用指定的分隔符号把字符串转换成数组

现在我这里有一个字符串 ...  就是这个 $tracks ... 它的值是用竖线分隔开的一些文字  ...  使用 explode 函数 ... 我们可以使用竖线作为分隔符，把这个字符串转换成一个数组。
explode() ... 它的第一个参数是一个分隔符号 ...  在我们这里，可以使用竖线作为分隔符号 ... 这样竖线左右的东西都可以成为数组里面的项目 ... 
第二个参数就是要转换成数组的字符串 ... 这里就是 $tracks ... 
这个函数会返回转换之后的结果 ...   可以给这个结果起个名字 ...  $tracks_array ...  
然后再用一个简单的 foreach 循环，输出这个数组里面的每个项目的值 ... 
$tracks_array = explode('|', $tracks);
foreach($tracks_array as $track) {
    echo $track . '<br>';
}
在这里，你会看到转换成数组之后的这个 $tracks_array 的每个项目的值。
implode
跟这个 explode 函数的功能相反的是 implode，它可以把一个数组转换成字符串，同时可以在字符串之间添加一个分隔符号 ... 
implode .. 第一个参数是一个分隔符 ...  这里我们用一个 减号 ...  第二个参数是一个数组 ...  这里我们可以把 $tracks_array 这个数组转换成一个字符串 ...  然后输出这个结果 ... 
echo implode('-', $tracks_array);
在屏幕上你会看到，转换之后的字符串 ... 中间会用一个减号作为分隔符号 ...


02-09-截取固定长度的字符串

想要截取一段文字的固定的长度的内容 ...  比如前 20 个字。可以使用 substr ... 或者 mb_substr ... 
这里有一行文字  ...  现在我们可以使用 substr 去截取一下 ..  substr ...  第一个参数是要截取内容的字符串 ...  这里就是 $content ... 第二个参数是截取开始的地方 ..  第一个字符是从零开始的 ... 比如我们要截取这段文字的第一个字儿 ... 开始的地方应该是 0  ... 
第三个参数是截取的长度 ..  输入一个 1  ...  然后前面用一个 echo ，输出这个函数返回来的东西 ... 
$content = '继续革命，是 Beyond 乐队在 1992 年 7 月 31 号发布的专辑，专辑里包含《长城》，《农民》，《遥望》这些经典歌曲。';
echo substr($content, 0, 1);
保存 ...  在屏幕上会显示一个乱码 ... 
原因是我们要截取的内容是中文字符 ...  一个英文字母会点用一个字符... 但是一个中文字会占用3个字符 ...   我们把截取结束的位置改成 3 ..
echo substr($content, 0, 3);
这样，在屏幕上才会显示出第一个中文字 ...  
对于截取多字节的文字，更好的方法是使用 mb_substr 函数  ...  要使用这个函数需要 php 安装 mbstring 这个扩展 ... 
这里把 substr ，改成 mb_substr ...   函数里面的现在的这些参数先不用动 ...  然后需要再去添加 mb_substr 函数的第四个参数 .. 也就是需要去指定一个字符的编码格式 ...  这里我们设置成 utf8
echo mb_substr($content, 0, 3, 'utf8');
这次你会发现，截取了三个文字 ... 也就是使用 utf8 字符编码的，使用 mb_substr 函数截取的文字，一个中文字就是一个字符 ...  一个英文字母也会被认为是一个字符 ... 
这里我们截取这段文字的前 13 个字 ...   后面，可以再加上一个要省略号 ... 表示这是一段被截取了的文字  ...
echo mb_substr($content, 0, 13, 'utf8') . '...';


03-01-数组 - Array

数组，就是一组数据，或者叫一个数据的列表，数据的集合。英文是 array 。在程序里面经常会用到数组来表示一组相关的数据。 比如用数组可以去表示一张专辑里面的所有的曲目，或者用一个数组来表示跟这张专辑相关的数据，数组里面可以包含专辑的名字，作者，曲目，发行的年代等等。
下面，我们去定义一个数组试试 ... 
在 php 程序里面，定义一个数组有两个方法，一种是使用 array() ,还有一种方法是使用方括号的形式 ... 这种方法只能用在 PHP 5.4 以后的版里面 ..  PHP 5.4 以前的版本不认识这种方法定义的数组。
先试一下用 array 定义数组 ...  $tracks 等于 array();  这样我们就定义了一个空白的数组 ，叫做 $track 
$tracks = array();
往这个数组里面添加项目可以这样 ...   数组的名字 .. 加上一个空白的方框号 ...   等于 ... 后面是数组项目里的值 ... 
$tracks[] = '长城';
长城这两个字儿的周围用了引号，所以它应该是一个字符串类型的值  ... 
调试
查看这个数组里的东西可以使用 print_r 或者 var_dump 函数，把它输出到屏幕上 ...  这两个函数都是 PHP 自带的功能。在它的周围，可以输出一组 HTML 的 <pre> 标签  ... 这样会保留输出的格式 ...  
// 调试
echo '<pre>';
print_r($track);
echo '</pre>';
在浏览器上，你会看到， $track 这个数组 ... 现在里面已经有了一个项目 ...  项目的值是 长城   ...   注意长城左边的这个数字，是这个项目的序号，或者叫索引号 ...   这个号码是从 0 开始的，也就是，在数组里面，第一个项目的序号是 0 ，第二个项目的序号会是 1 。
下面，再往这个数组里添加几个项目  ... 
$tracks[] = '农民';
$tracks[] = '不可一世';
$tracks[] = '遥望';
$tracks[] = '无语问苍天';
现在，这个叫 $track 的数组里面，一共有，1，2，3，4，5 个项目  .. 第五个项目的序号是 4 ，因为项目的序号是从 0 开始的。
定义数组时就为它添加项目
在定义项目的时候，我们可以直接去添加数组里面的项目  ...  在这个 array() 函数里面，直接去添加数组里的项目 ...   项目跟项目之间用一个逗号分隔开 ... 
array('长城', '农民');
先注释掉下面的这些代码  ... 
保存 ...  你会看到在这个数组里的项目 ... 
PHP 5.4 以后，可以用方框号的形式去定义数组 ...   像这样 ...  直接在数组项目的周围，添加一组方框号  ...   
//$tracks = array('长城', '农民');
$tracks = ['长城', '农民'];
访问数组里面的项目
要得到数组里面的项目的值，可以使用数组的名字，加上方框号，方框号里面是数组项目的序号 ...  比如要得到 $tracks 项目里面的第一个项目的值  ... $tracks 方框号 ... 第一个项目的序号是 0 ... 在前面再加上一个 echo 输出这个项目的值  ... 
echo $tracks[0];
在屏幕上会显示 长城  ...   因为它是 $track 数组里的第一个项目的值  ...


03-02-往数组的项目里添加或删除项目

往数组里面添加新的项目，在上一个视频里已经介绍了，可以使用一个空白的方框号，在等号右边是这个项目的值  ...   比如我们要往 $track 这个数组里再去添加一个新的项目  ... 
$tracks = array('长城', '农民', '不可一世', '早班火车');
$tracks[] = '遥望';
你会看到新添加的这个项目会是这个数组的最后一个项目 ... 
使用 PHP 给我们提供的 array_push 函数，同样可以把新的项目追加到指定的数组上 ...   array_push  ...  我们需要给这个函数指定两个参数  ...  第一个参数是要追加项目的数组的名字 ..  这里是 $tracks 这个数组 ...  输入一个逗号分隔一下..  再去给它指定第二个参数  ... 也就是要追加到数组上的项目  ...  可以是一个项目，也可以是多个项目  ...  如果是多个项目，中间可以用一个逗号分隔一下 ... 
array_push($tracks, '无语问苍天', '温暖的家乡');
现在，$track 这个数组又会多了两个项目，无语问苍天，还有温暖的家乡 ..
array_pop
删除数组里面的最后一个项目，用的是 array_pop 这个函数 ...  比如要删掉 $track 这个数组里面的最后一个项目 ...  array_pop ...  给这个函数指定一个参数.. 也就是要删除项目的数组的名字 .. 
array_pop($tracks);
你会发现，$track 数组里的最后一个项目就不见了 .. 
每次执行这个函数，都可以把这个数组的最后一个项目删除掉。
array_shift
想要删除掉数组里面的第一个项目  ...  使用的是 array_shfit 这个函数 ..   
array_shift($tracks);
（command + / 切换）删掉第一个项目以后，数组里面的项目序号都会发生改变 ... 
unset
我们也可以决定删除掉数组里面的具体的某个项目 .. 这次要用的是 unset 函数 ...  它可以重置变量  ...  unset ...  在给它一个要重置的东西 ..
比如，现在 $tracks 这个数组里，第三个项目是  不可一世 ... 要把它从这个数组里删除掉，可以这样 .. 
数组的名称 ... 加上方框号 ... 方框号里面指定一下项目的序号 ...  不可一世 这个项目的序号是 2  ... 
保存 ...  你会发现，这个项目现在就会从 $tracks 这个数组里面被删除掉了。


03-03-关联类型的数组

关联数组，英文是 Associative array  ...  这种类型的数组里面，每个项目都有一个名字，数组项目的名字叫做键，英文是 key ，跟它对应的是项目的值  ... 
关联数组里面的数组项目的键与值之间，需要用到一个箭头符号，也就是一个等号加上一个大于号 ... 
下面，我们去定义一个关联数组  ...  先给这个数组起个名字 ...  叫做 $album  ...  这个数组里面的数据都是跟音乐专辑相关的 ..  比如有专辑的名字，发行年代，艺术家等等 ...   
定义数组可以使用 array()   ..  然后去添加数组里面的项目 ...  因为这是一个关联数组，所以，每个项目需要有个名字 ...  输入一组引号 ... 然后 title  ...    这个 title 就是这个数组项目的名字　.... 再输入一个箭头符号 ...    在它的右边，就是这个项目的值  ... 
$album = array(
    'title'    => '继续革命'
);
现在，我们就定义好一个关联类型的数组，$album  ... 
在下面，我们再用 print_r ，把这个数组里的东西输出到屏幕上看一下 ...  
在这个 $album 数组里面有一个项目，这个项目的名字叫做 title ，它的值是 继续革命  ... 
下面，再去给这个数组添加两个项目  ...   先添加一个发行日期的项目 ....  项目的名字可以是 release_date  ...   它的值是 1992-07-31  ...  用逗号分隔一下 ... 再添加一个 artist  艺术家 ...  它的值是 Beyond  .. 
    'release_date'  => '1992-07-31',
    'artist'        => 'Beyond'
这个关联数组里又会多了两个项目  ... 
要输出关联数组里面的项目，可以使用数组的名字 ... 方框号  ... 在方框号里，指定一下要输出的项目的名字 .. .  比如要得到 $album 这个数组里面的 title 这个项目的值 ... 可以这样 ...   $album 方框号 ...  title ... 在前面再加上一个 echo  输出它的值  ...
echo $album['title'];
在浏览器上，会显示出它的值  ...  就是这个 继续革命  ..


03-04-嵌套的数组

嵌套数组就是，在一个数组里面，包含其它的数组。到目前为止，在我们定义的这两个数组里面，项目的值的类型都是字符串 ...  其实数组里的项目的值可以是任意类型的。 把项目的值设置成一个数组，这个数组就是嵌套数组。
比如在音乐专辑这个数组里面，可以再去添加一个曲目的项目 ... 这个项目的值是一个数组  ...   在这个嵌套的数组里面，可以包含这张专辑相关的曲目。
项目的名字是 tracks  ...  跟它对应的值是一个数组，这个数组里的东西就是之前我们定义的 $tracks 这个数组  ...  可以复制一下 ...  然后粘贴到这里 ... 
'tracks'        => array('长城', '农民', '不可一世', '早班火车')
在屏幕上，你会看到 $album 数组里面，多了一个叫 tracks 的项目，它的值又会是一个数组。想要得到这个嵌套的数组里面的东西，可以这样 ...   数组的名字 ...  $album  ... 一个方框号 .. 在方框号里指定一下项目的名字 ...  这里就是 tracks ...  在它后面，再输入一组方框号 ... 在这组方框里，可以指定一下嵌套数组的项目的序号或者名字 ..  比如我们想得到 早班火车 的值 ... 它的序号是 3 ，所以在这里，可以输入 3 ... 
前面加上一个 echo ，输出这个项目的值  ... 
echo $album['tracks'][3];
在屏幕上，会显示这个嵌套数组里面，序号是 3 的这个项目的值  ...  早班火车 ...


03-05-检查数组里是否包含特定名字的项目 - array_key_exists

如果想知道一个数组里面是否包含指定的键，也就是，是否包含特定名字的项目，可以使用 array_key_exists 函数  ... 
我们可以先改造一下这个调试用的代码  ... 把 print_r 换成 var_dump ...  这个函数可以输出值的类型。
下面我们去看一下，$album 这个数组里，是否包含 artist 这个项目 ...  array_key_exists  ... 函数有两个参数，第一个参数是要判断的项目的名字 ... 这里就是 artist .. 它的周围要用一组引号 ...   然后在第二个参数里指定一下要检查的数组的名字... $album  ... 
array_key_exists('artist', $album)
得到的结果是 bool 括号 ...  true  ...  这个 bool 是值的类型 ... bool 就是布尔值 ...  它的值就是 true ，或者 false  ...  1 或者 0 。
括号里面就是得到的值，这里是 true ，这就表示，在 $album 这个数组里面，包含 artist 这个键的项目 ... 
再试一个 ..  检查一下 $album 里面有没有 location 这个键 ... 
这次返回的结果的是 false  ...  说明不包含 location 这个键的项目 ...


03-06-检查数组里是否包含特定值的项目 - in_array

array_key_exists 只会去检查数组里面，是不是有指定的键的项目  ... 它并不关心项目的值是什么  ...  如果说你想判断一个数组里面，有没有特定值的项目  ...  可以使用 in_array   ...
in_array
比如我们想看看 $tracks 这个数组里面，有没有 长城 这首歌  ...  in_array  ...  这个函数有两个参数，第一个参数是要判断的值 ..  这里就是 长城  ...  用一组引号包装一下 ... 表示这是一个字符串类型的值  .. 
第二个参数是要判断的数组  ...  $tracks 
in_array('长城', $tracks)
这个 in_array 函数返回的值是一个布尔类型的值  ..    这里显示的是 true  ... 这就表示，$tracks 这个数组里面，包含 长城 这个值的项目 ... 
array_search
要得到值的位置，可以使用 array_search   ...   array_search ...  比如我们要看看 长城 这个值在 $tracks 这个数组里面的位置 ...  第一个参数是要判断的数组项目的值  ...  长城  ... 第二个参数是要判断的数组的名字 ...  $tracks ...
这里，返回的结果是 0 ，这个结果的类型是 int ，一个整数类型的值  ...   这表示，长城，在 $tracks 这个数组里面的序号是 0  ... 
array_search('长城', $tracks)
下面，再去判断一个值的位置 ... 比如看看 继续革命 在 $album 这个数组里面的位置  ... 
array_search('继续革命', $album)
这次返回的结果是一个 string，字符串类型的值，这里的数字 5 是结果的字符数   ... 这个值是 title  ...   也就是跟 继续革命 这个值对应的是 title 这个名字。


03-07-对数组排序 - sort

现在我这里有一个数组 ... some_number .. PHP 5.4 以上的版本，可以直接使用方框号去定义数组 ...
这个数组里面是一些数字类型的值  ...   这里我用 var_dump ... 把这个数组输出到了屏幕上...  你会看到，数组项目的顺序，就是我们在定义这个数组时候的顺序 ... 
下面用 sort() 函数，去给它重新排下顺序 ... 
 var_dump
 (
     $some_number,
     sort($some_number)
 );
注意，这个函数只会返回 true 或者 false ，并不会返回排序之后的数组 ...   函数的参数是用引用的方式传递进来的 ..  command + k ，可以查看一下这个函数的文档 ...  
你会发现，这个 array 参数... 前面有一个 & 符号，表示这是用引用方式传递进来的参数 .. 也就是，这个 sort() 函数，会改变传递进来的变量的值 ... 
在这个 sort() 函数的下面，我们再试着输出这个 $some_number 数组的值 .. 
 var_dump
 (
     $some_number,
     sort($some_number),
     $some_number
 );
现在，$some_number 这个数组里的项目的顺序就有些变化了，排在第一个的是数字 1 ，因为它是这个数组里面最小的数字 ... 然后是 3，最后是 6 。
sort_flags
在 sort  函数里，设置它的第二个参数，可以改变按照什么类型的值来排序 ...  比如我们想要按照数字类型的值排序，可以在这里，加上一个 SORT_NUMERIC
sort($some_number, SORT_NUMERIC),
这里得到的结果是一样的 ...  下面再给 $some_number 这个数字添加一个项目 ..  加上一个数字 11 ...
$some_number = [3, 6, 1, 11];
你会看到，如果按照数字类型的值来排序的话，数字 11 会在最后，因为它是这个数字里面最大的一个数 ... 
这回我们再把这个 SORT_NUMERIC 换成 SORT_STRING ，按照字符类型的值来排序 ... 
sort($some_number, SORT_STRING),
这次，数字11会排在数字1的下面 ... 因为现在会把数组项目的所有的值当成字符串来看待。
倒序
想要倒序排列的话 ... 可以把 sort  ... 换成 rsort  ... 
rsort($some_number),
这个函数会把它认为是最大值的数组项目排在第一位 ...


03-08-asort 与 ksort

用 sort 函数排序数组，会改变数组的索引，比如这里，原来数字 3 的索引值是 0 ，重新排序以后， 数字 3 的索引号就变成了 1 。 如果你想保持这个索引值不变，对数组进行排序，可以使用 asort()  ... 这个函数一般会用来对关联类型的数组去排序 ...  
先试一下 ... 把 sort 换成 asrot ... 
保存 ... 你会看到，对 $some_number 这个数组重新排序以后，数组项目的索引号还是以前的索引号 ...  排在第一的数字 1 ，它的索引值是 2 ，因为这就是它之前的索引值 ... 
下面，我们再用这个函数去排列一下关联数组 ...  这里我已经定义好了一个关联数组 ... 用来表示水果的价格的 $fruit_prices ... 
$fruit_prices = ['banana' => '9.3', 'orange' => '7.5', 'apple' => '8.6', ];
先输出这个数组 ...  $fruit_prices, 
再用 asrot 对它排下顺序 ...  asort($fruit_prices),
最后，再输出这个重新排序之后的 $fruit_prices  ...  
用 asort 重新排序以后，数组里面的键与值的对应关系不会发生改变 ...   
数组项目的值最小的是七块五一斤的桔子 ...  然后是 八块六的苹果，最后是九块三的香焦  ... 
想反过来排的话，可以使用 arsort 函数 ... 
arsort($fruit_prices),
asort 还有 arsort 都是根据数组项目的值去排序 ...  如果你想按照数组项目的名字，也就是数组项目的键，去排序的话，要用的是 ksort  ... 
ksort($fruit_prices),
现在，排序之后，排在第一个的是 apple ，然后是 banana  ...  因为小写的字母 a 小于小写的字母 b ...  
最后是 orange .. 
跟它对应的，还有一个 krsort ..  它可以使用倒序排列 ... 
krsort($fruit_prices),


03-09-数组的控制指针

数组里面有个指针，用来指向某个数组的项目 ...  比如我们在使用 foreach 循环去处理数组里的项目的时候，其实它用的就是数组里面的指针  ..   PHP 提供了一些函数，可以让我们手工去控制这个指针的位置。下面，我们去试一下 ... 
得到指针当前指向的数组项目，可以使用 current()  ...   把一个数组作为它的参数 ... 
 current($fruits) 
返回的是 apple 项目，也就是默认的指针位置就是数组里面的第一个项目 ...   往下移动一个位置，可以使用 next() ... 
next($fruits)
结果是 banana ，也就是 apple 这个项目的下一个项目 ... 
再执行一下 next() 会再往后移动一个位置 ...
next($fruits)
这次返回的结果是 orange ... 
现在指针指向的是 orange 这个项目  ... 想要往上移动一个位置，可以使用 prev() ...
prev($fruits)
orange 的上一个项目是 banana ... 
直接把指针指向数组里面的最后一个项目 ...  用的是 end() 函数 ... 
end($fruits)
最后一个项目是 orange ... 
回到数组里的第一个项目，我们可以使用一个 reset() ... 
reset($fruits)
另外还有一个 each() 函数，第一回执行它的时候，会返回数组里的第一个项目 ...  再执行一次，就会往下移动一个位置 ... 
each($fruits)
结果就是 $fruits 数组里面的第一个项目 ... apple ...  each 函数会给我们返回一个数组 ...  在这个数组里面，会包含当前指针指向的项目的值，还有这个值对应的键是什么。


03-10-用函数处理数组里的每个项目 - array_walk

如果你想用一个函数去处理数组里面的每一个项目 ... 我们可以使用 foreach 循环去处理每个项目 .. 或者使用 array_walk() 函数 ... 
现在屏幕上显示的是 $fruits 数组 ...  下面，我们用 array_walk 函数去处理一下这个数组里面的项目 ...  可以在每一个项目的值的前面，加上一个 # 号 ... 
array_walk ...  这个函数一共有三个参数 ... 第一个参数是要处理的数组 .. 第二个参数是处理这个数组用的函数 ... 第三个参数是一个可选的参数 ... 是给处理数组用的函数传递的参数 ... 
这里我们要处理的是 $fruits 这个数组 ....  然后，处理它的函数，可以直接使用一个匿名函数 ...  这个函数可以接受两个参数 ..  一个是 $value ，表示数组里面的值 .. 一个是 $key ，表示数组项目的键 ...  这个 $value 参数可以用引用的方法来传递 ... 
然后在这个函数里面，重新去设置一下数组项目的值  ...  $value 等于 一个 # 号 ...  再加上项目原来的值  ... 
array_walk($fruits, function(&$value, $key) {
     $value = '# '. $value;
});
保存 ... 
你会发现 ... $fruits 这个数组里面的每一个项目的值的前面，都加上了一个 # 号。


03-11-数组的并集，交集，差集

这个视频我们来看一下，怎么样找出数组的并集，交集，还有差集。
现在，这里有两个数组 ...  a 和 b  ....  a 数组里面有两个项目  苹果 和 桔子，   b 数组里面也有两个项目， 苹果和香蕉。 要找出这两个数组的并集，我们可以先把这两个数组全并到一块儿，然后再去掉重复的项目 ...
合并数组，可以使用 array_merge ...   在这个函数里面，指定一下要合并的两个数组 ... 数组 a 还有 数组 b
array_merge($a, $b)
保存 ... 现在得到的结果就是两个数组合并到一块的结果 ...  数组 a 里面的苹果，桔子，还有数组 b 里面的苹果香蕉...
合并之后，有两个重复的项目，就是 苹果 ...   我们可以再去使用 array_unique 函数去处理一下这个结果 ... 它可以去掉重复的项目 ...
    array_unique(array_merge($a, $b))
这次得到的结果就是，苹果，桔子，还有香蕉 ...  也就是 ab 两个数组的并集。
交集
现在，我们要去得到这两个数组的交集，也就是两个数组共有的项目 ...   要用到的是 array_intersect 函数 ... 在这个函数里，指定一下要求交集的数组 ..
array_intersect($a, $b);
保存 ...  得到的结果里面，只会包含 苹果  这个项目 .. 因为它是这两个数组共用的一个项目 ... 
差集
要找出两个数组里面不一样的项目，可以使用 array_diff  ...   同样在这个函数里面指定两个数组 ...  注意这个顺序是很关键的 ...  如果你要找出数组 a 里面有的项目，在数组 b  里面没有的 ...  要把数组 a 放到前面，然后是数组 b 。
有点像是用数组 a 减去数组 b 。
array_diff($a, $b)
这里得到的结果就是 桔子 ...  因为数组 b 里面不包含 桔子 这个项目 .. 
下面，我们把这两个数组的顺序倒过来 ... 
array_diff($b, $a)
保存 ... 结果是 香蕉 .. 用数组 b 里的项目，减去数组 a 里的项目 ...  会剩下这个 香蕉 ... 因为在 a 里面，不包含这个项目 .... 
如果我们把 a 里有的  b 里没有的，跟 b 里有的，a 里没有的合并到一块儿 ... 结果就是一个对称的差集 ... 
array_merge(array_diff($a, $b), array_diff($b, $a))
得到的结果就是桔子，还有香蕉 ...    去掉了 a 和 b 这两个数组里面一样的项目 ...   也就是 苹果 这个项目 ...


04-01-流程控制 - 条件判断 - if

PHP 执行代码的时候都是从上往下，一行一行的去执行，不过通过一些语法，我们可以控制代码执行的顺序。比如，使用 if 语句，可以先去判断一个条件，如果条件是真的，就去执行一段代码，如果是假的，就是执行另一段代码。
下面去试一下这个 if 语句  .. 先在这个 PHP 文件里面，定义几个变量 ...   $user_name ... 用户名等于 王皓 ...  $user_role ... 用户的角色是 admin  ...  再加上一个 $is_login  ... 表示用户是否登录了 ..  这里先设置成 true  ... 
$user_name = '王皓';
$user_role = 'admin';
$is_login = true;
我们可以假设这些变量的值都是通过某种方式得到的，比如从数据库里面提取出来的 ... 
然后用 if 语句去做一下判断 ...     if 就是如果的意思 ...   然后加上一个括号 ... 在括号里面，就是要判断的条件 ..  比如我们要判断一下用户是不是已经登录了  ...   输入 $is_login  ... 
在后面再加上一组花括号 ...  在这个花括号里面，可以去设计一下，当要判断的条件是真的时候，要执行的代码  ... 
在这里，我们输出一个问候的信息 ...  您好：  后面加上 $user_name  ... 
if ($is_login) {
    echo '您好：' . $user_name;
}
保存 ...  在屏幕上会显示 您好：王皓 ...   因为要判断的条件，也就是 is_login ，会返回一个真的假 ...   
这回我们把 $is_login  的假改成 false  ...    
你会看到，屏幕上就没有显示问候的信息了 ... 因为判断的条件会返回一个假值 ...   
else
在这里，我们可以使用一个 else ，去添加一个如果判断的条件返回假值的时候要执行的代码  ..   else  ... 后面再加上一组花括号 ... 用一个 echo ，输出，请先登录.. 这几个字 ... 
现在，屏幕上会显示 请求登录 ... 因为要判断的条件 $is_login 返回的是一个假值  ... 
再把它改成 true  ...  这回又会显示这个问候的信息了 ... 
else {
    echo '请先登录...';
}
&&
有时候要判断的条件不只一个，或者要判断的情况也不太一样 ...  比如我们想在用户登录了并且他的角色是管理员的时候，去做一点特别的事儿 ...  
在这个 $is_login 的后面，加上两个 & 符号 ..  用它可以连接其它要判断的条件 ...  而且用这个符号连接的不同的条件，只有这些条件全都返回真的时候，它才会返回一个真值 ...  要想让多个条件只要有一个真的就行 ...  可以使用或这个逻辑操作符，可以使用两条竖线来表示 || ... 
这里要判断的另一个条件是 $user_role 要等于 admin ... 注意这里我用了三个等号 ...  一个等号的意思是去赋值 ... 
如果是两个等号，就表示去判断两个值是否相等 ...   三个等号的意思是， 这两个值不但是相等的，并且值的类型也必须是一样的 ... 
这样这个要判断的条件就是，如果用户登录了同时这个用户的角色得是管理员 ... 才会去执行在它后面的这块代码  ...  
这里，我们可以输出一个 您好管理员：  ...  保存 ... 
屏幕上会显示，您好管理员  ...   
elseif
如果有继续要判断的情况，可以在这块儿代码里使用一个 elseif  ... 去设置其它的条件 ...   elseif  ... 加上一组括号 ... 括号里是要判断的条件 ... 条件是 $is_login ... 看看用户是不是已经登录了 ...  再输入一组花括号 ...  如果登录的值  ...  输出一个问候 ...
elseif ($is_login) {
    echo '您好：' . $user_name;
}
这样整个这段代码的意思就是，如果用户登录了，并且他还是管理员，那么就显示一个 您好管理员，再加上用户的名字 ... 如果用户不是管理员，但是已经登录了 .. 显示的是 您好，后面加上用户的名字 ...  如果用户没登录，也不是管理员 ...  会显示一个请示登录的信息 ... 
演示
现在显示的是您好管理员 ...   把 $user_role 的值换成一个其它的值  ...  比如 author ...  这次用户就不是管理员了 ... 但是 $is_login 的值仍然是 true  ... 所以，会显示 您好 ... 再加上用户名 ... 
再把这个 $is_login 的值，改成 false  ... 现在用户即不是管理员，也没有登录  .. 所以，会显示 请先登录 ... 这几个字儿 ...


04-02-条件判断 - switch

使用 switch 语句可以去判断多种不同的情况，然后根据这些不同的情况去做不同的事情。 比如我们可以根据电影的评分，分成几个级别，然后去显示相应的推荐信息 ... 
先去定义一个变量  ...  可以用 $rate 来表示电影的评分  ...  先给它一个值  ... 
$rate = 5; 
然后在它的下面，使用一个 switch  ...  输入 switch  ...  一组括号 ...  括号里面是要判断的值，或者要判断的情况 ...  这里输入 $rate  ...  然后输入一组花括号 ... 在这组花括号里面，可以使用 case 这个关键词，去设置不同的情况 ...  
比如，如果电影的评分大于 8 分的话，就显示一个 不能错过的好电影！  ...  输入 case  ...  $rate 大于 8  ...   这样我们就定义了一种情况， 也就是当评分大于 8 的时候  ...   在它后面输入一个冒号  ...  
然后另起一行 .. 去设计一下，满足这种情况的时候要去执行的代码  ...   这里我们只是简单的在屏幕上输入一行文字  ...  echo  不能错过的好电影  ... 
在这种情况的结尾处 ... 再使用一个 break;  它的意思就是，执行完这小段代码以后，跳出这个 switch 语句  ...  也就是，只要评分大于 8 分，满足了这种情况，执行了想要执行的代码以后，就跳出这个 switch 语句，不再去对比其它的情况了 ... 
另起一行 ... 再用一个 case ，去设置一种情况 ...   当 $rate 大于 7 的时候  ...  输出 ... 还不错 .. 可以看看  ...   结尾的地方，再用一个 break;
接着再去添加一种情况 ...  case $rate 大于 6 ，当评分大于 6 分的时候  ... 在屏幕上输出 挺一般，看不看都行 .
最后，我们可以使用一个 default ，去添加一个默认的情况 ...    default 冒号  ..  另起一行 ... 输出 浪费时间，还是别看了  ...  然后再 break 出来 ... 
保存 ...  
在屏幕上会显示一个 浪费时间，还是别看了，因为当前 $rate 的值是 5 ，不大于8，不大于7，也不大于6，所以，它满足最后一种情况，也就是这个默认的情况 ...   
我们可以改一下 $rate 的值  ...   换成 6.2 ...  这个值大于6，但是小于7 ，所以满足大于6的这种情况，显示的是 挺一般，看不看都行 ... 
再改成 7.3 ... 这个值大于7，但是小于 8 ，会显示 还不错，可以看看 ...
再换成 8.9 ，现在，$rate 的值大于 8 ，也就会在屏幕上显示 这个在大于 8 的时候要显示的文字 ...  不能错过的好电影  ...


04-03-循环 - while

循环就是当指定的条件为真的时候，就会不断的循环去做一些事情。循环语句有好几种，我们先看一下 while 循环，while 就是当什么的时候 ... 
比如我想输出 10 到 1 这些数字 ...  先去定义一个变量，给它一个值是数字 10 ，然后用 while 语句，循环的时候要判断的条件是，看看这个变量的值是不是大于等于 1 ，如果条件是真的，就输出这个变量 ...  然后，再让这个变量的值，减掉 1 ，这样，下回再循环的时候，它的值就会变成 9 了。就这样一直循环的去执行，真到这个变量的值，不再大于等于 1 。
先去定义这个变量  .. 叫它 $number ... 让它等于数字 10 
然后再使用一个 while 循环 ...   在这个关键词的后面，加上一组括号 ... 在这个括号里，可以去指定一下循环的时候，要去判断的条件 ...  要判断的条件是，$number 的值，大于等于 1 。
接着是一组花括号 ...  在这里，就是每一次循环的时候要做的事情... 
while ($number >= 1) {}
我们可以简单的，去把这个 $number 变量的当前的值输出到屏幕上 ...    后面再加上一个换行标签 ... 
echo $number. '<br>';
接着要做的事就是，让 $number 这个变量的值减去 1 ...  $number 等于 $number 减 1 ...  这行代码的意思就是，把 $number 的值减掉 1 以后，再把得到的结果重新交给 $number 变量。
$number = $number - 1;
这样，完成第一次循环的时候，$number 的值就会变成 9 了 ...   再循环一次，又得让它的值减去 1  ..    最终这个循环的动作是会结束的，因为早晚 $number 的值会小于 1 ..  
这个时候，循环要判断的条件就会返回假值，循环的动作就会结束了。
保存 .. 
你会看到，在屏幕上会显示 从 10 到 1 这些数字  ...   每显示一个数字都说明执行了一次循环的动作  ...


04-04-循环 - for

这个视频我们来看一下 for 循环，使用 for 语句的循环更简单一些 ..  下面，我们可以使用这个 for 语句，去改造一下前面用 while 循环做的事 ... 也就是在屏幕上输出从 10 到 1 这些数字 ...  先注释掉这几行代码  ... 
然后输入 for ..  后面加上一个括号 ...     在 for 语句的这个括号里，我们得去设置三个东西，第一样东西只在循环的一开始执行一回 ... 一般我们会在这里去设置一下循环操作的记数器 ...   比如我们叫它小 i ...   然后给它一个值 ...  等于 10 ..  这个小 i ，只能用在这个 for 语句的内部，在它以外，我们是得不到这个小 i 的值 的 .. 
$i = 10;
第二样东西是每一次循环的时候，要判断的条件 ...   这里可以设置成 $i >=1 ...  如果小 i 的值大于或者等于 1 ，这个循环就会一直执行 ... 
$i >=1;
第三样东西是每一次循环结束的时候要做的事儿 ...  在这里，我们可以让小 i 的值减少 1  .. 
$i = $i - 1
因为这个表达式经常用到，所以 PHP 给我们提供了另一种写法 ... 可以这样 
$i--
意思就是让小 i 的值减去 1 ，再给得到的结果交给小 i 。类似的，还有两个加号的操作符...  它的意思是，把操作符前面的变量的值加上 1 ，再把结果交给这个变量。
每次循环要执行的代码，可以放在一组大括号里面。
要做的事就是要屏幕上输出当前小 i 的值  ... 
echo $i . '<br>';
保存 ... 
屏幕上会显示出从10到1之间的数字  ... 
for ($i = 10; $i >= 1; $i-- {
    echo $i . '<br>';
}


04-05-循环 - foreach

foreach 这个循环语句是专门用来循环数组或者对象用的。
下用先去循环输出 $tracks 这个数组 ....   先输入一个 foreach  ... 然后是一组括号 ...  
括号里的东西要使用特定的形式 ... 先是数组的名字 ...  这里应该是 $tracks 这个数组  ...  后面加上一个 as 关键词 ... 接着是一个临时的变量 ... 
它的意思就是，在每次循环的时候，都会把 $tracks 这个数组里面的一个项目临时交给 $track 这个变量  ...  在这个循环的主体里面，我们可以使用这个 $track 输出这个项目的值 ...  
foreach ($tracks as $track) {
    echo $track . '<br>';
}
保存  ...  在屏幕上会输出 $tracks 这个数组里面的每一个项目的值 ...  在循环开始的时候，foreach 会把数组里面的指针指向第一个项目 ...  然后每次循环都会往向移一下 ... 一直到数组的最后一个项目为止。这样这个循环也就会结束了。
关联数组
循环关联类型的数组有一点点区别 ...   下面，我们可以去把 $album 这个数组里面的项目也全部输出到屏幕上 .. 包括项目的名字，还有项目的值  ... 
foreach  ...   在括号里，先是要循环的数组的名字 ...  $album  ... 再加上一个 as 关键词 ...   因为这是一个关联数组，所以，我们需要两个临时的变量  ... 一个表示项目的名字，一个表示项目的值  ...  
foreach ($album as $key => $value) {
    echo $key . '：' . $value . '<br>';
}
这里 $key 就代表的就是项目的名字 ...  $value 代码的是项目的值  ... 
保存 ... 
你会看到，在浏览器上会显示出 $album 这个项目里面，每个项目的名字还有对应的值。


05-01-表单 - Forms

表单是应用程序跟用户之间交互的一种工具，用户可以通过表单，去搜索自己想要找的东西，可以通过表单在我们的应用上面注册，登录， 发布内容等等。
PHP 可以处理用户填写的表单，得到表单里的内容，再利用这些内容去做一些事情，比如帮用户找到他想看的内容，把内容放到数据库里等等。
$_GET，还有 $_POST，这两个东西里面会存储使用不同的方法提交的表单的内容，$_GET 里面存储的是用 GET 方法提交的表单内容，一般，用户如果只想在我们这里得到点什么东西，用的就是 GET 方法，比如去搜索。用户在浏览器里面输入了一个地址，然后按了一下回车 ... 这个动作用的就是 GET 方法。
$_POST 里面放的是用 POST 方法提交的表单内容，这种方法通常是在想要往我们的服务器里存储点什么的时候用到。比如登录的请求，发布新的内容等等。 
PHP 在处理页面的时候，都会去查看一下，$_GET，还有 $_POST 里面有没有东西 ..   这两个变量的值的类型是一个关联类型的数组 ...  也就是用名值对儿的形式存储的内容 ...   名字就是表单里面的元素的名字 ...  对应的值，就是用户在这个表单元素里面填写的具体的内容 ... 
这种用下划线开头的，并且全部是大写的变量，在 PHP 里面，叫做超级全局变量。


05-02-定义表单

这个视频我们先去添加一个简单的表单，然后再看一下怎么样获取到用户填写的表单里面的内容。
在给这个空白的 php 文件里面添加一个基本的 html 文档的结构 ..  修改下 lang 属性 ... 还有 title  ...    下面再去添加一个简单的表单 ..
一个表单的开始，需要用一组 form 标签 ...   form  ...   在这个 form 标签上，可以去定义表单的提交的方法，还有提交到的那个地址 ... 在这个 action 属性里面，就是指定这个表单要提供到的地方..  先留为空白的 ... 一会儿再回来编辑一下 ... 
表单的提交方法 ...  默认用的是 get 方法 ..  如果想使用其它的方法 ...  需要添加一个 method 属性 ... 属性的值就是方法的名字 ...   这里我们先使用默认的方法 ... 
这里为了更清楚一点，我们还是先加上一个 method 属性 ...  把它的值设置成 get  ... 
<form action="" method="get"></form>
在这个表单里面，我们可以去添加表单的每个元素 ...   可以是文本框，文本的区域，复选框，选择列表等等 ...   先添加一个文本框  ...  也就是 text 类型的 input 元素 .. 
设置一下这个元素的名字 ...  添加一个 name 属性 ...  属性的值就是这个元素的名字 ... 可以叫它 username  ... 这样我们就可以使用这个名字得到用户在这个元素里面填写的值  ... 
再添加一个占位符 ..  placeholder  ...  用户名 ... 
<input type="text" name="username" placeholder="用户名">
下面再去添加一个 email 类型的表单元素  ...   input ...   类型可以用 email  ...  name .. 这个元素的名字是 email ...   再添加一个点位符 ...  Email ..  
<input type="email" name="email" placeholder="Email">
最后我们需要一个提交这个表单用的按钮 ..  我们可以使用 submit 类型的 input 元素，也可以使用 submit 类型的 button 元素 ... 
<button type="submit">提交</button>
这样我们就定义好了一个表单 ...  可以去试一下 .. 打开浏览器 ... 
会显示两个文本框  ...  输入用户名 ...  wanghao  ...  再输入 Email ... 注意这个 email 元素是 email 类型的 input ，所以，它会要求用户输入的内容里必须得有 @ 符号  ...   
先随便输入点东西 ...  点击 提交  ...  会提示邮件地址里缺少 @ 符号 ... 
如果用户使用的是移动设备 ... 在输入 Email 类型的元素的时候，在设备的键盘上应该会显示一个 @ 符号 ... 方便用户输入这个符号 ... 
再输入一个正确的 Email 地址 ... 点击提交  ... 
现在，这个表单，还不能做任何的事情 ...  在下面的视频里，我们再去看一下怎么样使用 PHP 代码，得到用户在表单里输入的东西  ..


05-03-得到用户在表单里输入的内容

用户在提交表单以后，我们可以使用单独的一个 PHP 脚本文件去处理表单里的内容，或者也可以使用当前的脚本文件去处理这个提交请求。
下面先去创建一个单独的文件  ...  新建一个文件 ... 命名为 process.php  ...   下面，我们可以使用这个文件先去处理一下提交表单的请求 ... 
回到 index.php  ..   在这个表单元素里面，去设置一下 action 属性的值  ...   设置成 process.php  ... 这样提交这个表单以后，就会把请求发送到 process.php 这个文件去处理 ..
再打开 process.php  ....  在这个文件里，我们先简单的去把 $_GET 这个超级全局变量里的东西输出到屏幕上 ..   还是用我们之前创建的用来调试的几行代码  ...   把 $_GET 放在 var_dump 函数里面 ... 
<?php
echo '<pre>';
var_dump(
 $_GET
);
echo '</pre>';
保存 ...  再回到浏览器 ...   打开表单所在的页面 ...  输入用户名 ..  email ... 点击提交 ...   表单会把提交，交给指定的 process.php  这个文件去处理 ...  这个文件做的事就是把 $_GET 这个变量输出到屏幕上 ... 
你会看到，这个变量的值是一个数组 ...   数组里面的项目的名字就是表单元素的名字 ...  对应的值就是用户在这个元素里面填写的东西 ... 
username 是 wanghao  ...  email 是 wanghao@ninghao.net ...
再回到 process.php ...  这回我们可以去得到具体的表单元素里的值  ... 想得到用户在 username 这个表单元素里填写的东西，可以这样 ..  $_GET 方框号 ... 再指定一下表单元素的名字 ... 
$_GET['username'] 
其实就是得到关联数组里面的项目的值 ...  再去得到 email 元素里的值  ... 
$_GET['username'],
$_GET['email']
回到浏览器 .. . 再试一下 ...   再输入用户名 ...  email ...  点击 提交 ...   
会显示刚才我在 username 还有 email 表单元素里面输入的东西 ...
POST
下面，我们可以去试一下用 POST 方法提交的表单 ...   先打开表单所在的那个文件... 
把 form 标签上面的 method 属性的值 ... 换成 post ...  method 就是方法的意思 ..  现在这个表单就会用 post 的方法去提交 ... 保存 ...
回到浏览器 ...   输入用户名 .. email  .. 提交 ..
这里会提交 ... Undefined index：username 还有 email ... 这是因为，在处理表单请求用的 process.php 里面，我们用的是 $_GET  这个变量来输出 username 还有 email 里的值  ... 
因为现在表单的提交方法已经变成了 post ... 所以，username 还有 email 元素的值就不在 $_GET 这个变量里了 ... 而是在 $_POST 这个变量里面 ...
回到 process.php ... 把 $_GET 都换成 $_POST ... 保存 ...  回到浏览器 . ..
$_POST['username'],
$_POST['email']
输入用户名 ... 邮件地址 ... 点击 提交  ... 
这次又会在屏幕上显示我在 username 还有 email 元素里面填写的东西了。


05-04-服务器相关信息 - 判断请求的方法

根服务器相关的信息，会放在 $_SERVER 这个超级全局变量里面，它也是一个关联类型的数组。在这个文件里，我们可以输出这个变量里的东西去看一下 ... 
<?php print_r($_SERVER); ?>
(#查看源代码) ， 在这个变量里面，你会看到，有主机名 ...   Web 服务器的类型 ... 端口号 ...  文档的根目录等等 ... 下面，我们利用这里面的两个东西去做点事情 ... 一个是 SCRIPT_NAME ... 脚本的名字 ..   还有一个 REQUEST_METHOD .. 请求的类型 ... 
(#返回)这里我们先去修改一下 form 标签里面的 action 属性的值 ... 可以让表单提交到它本身所在的这个脚本文件 ... 
action="<?php $_SERVER['SCRIPT_NAME']; ?>"
然后我们可以去判断一下 ... 如果当前对这个脚本的请求使用的是 GET 方法 ...  就去显示这个表单 ...  如果用的是 POST 方法 ... 那么我们可以去显示出在表单元素里面填写的内容 ... 
先开启一段 php 代码  .. .用  if 去判断一下 .. 判断的条件是 $_SERVER 这个数组里面的 REQUEST_METHOD 这个项目的值，是不是等于 GET... 如果用的是 GET 方法发出的请求，REQUEST_METHOD 的值应该就会是 GET...   如果用的是 POST 方法发生的请求，它的值就会是 POST .. 
在这个 if 语句的后面，输入一个冒号 .. 然后关闭这行 php 代码  ...   
<?php if($_SERVER[REQUEST_METHOD] == 'GET'): ?> 
在这个表单结束的地方，再开始一段 php 代码  ...  用一个 endif ... 结束这个判断 ... 
<?php endif; ?>
这几行代码的意思就是，如果当前使用的是 get 方法发生的请求 ...就会去显示这个表单 ... 
POST
下面，再去设计一下，如果用的是 POST 方法发生的请求，去把在表单元素里面的填写的内容输出到屏幕上 ...  
<?php if ($_SERVER['REQUEST_METHOD'] == 'POST'): ?>
结束这个判断，用一个 endif; 
<?php endif; ?>
在它们之间，我们还需要去判断一下，如果用户填写的用户名了邮件地址，才会去显示出他们填写的内容，如果没填写的话，就显示一条提示的文字 ... 
判断用户是不是已经在表单元素里填写了内容，可以使用 strlen 这个函数 ... 它可以得到字符串的长度 ...  if ... strlen ，$_POST['username'] ，检查一下 $_POST 里面的 username 这个项目的值的长度 ... 如果得到的结果大于0的话，就可以表示用户在这个元素上面填写了一点东西 ... 
后面再用两个 && 符号 .. 去连接其它的条件 ...  再去看看 email 元素里面是不是也已经填写了内容 ... 
<?php
    if (strlen($_POST['username']) && strlen($_POST['email'])) {}
?>
如果这两个条件都是真的... 也就是 username 还有 email 的值的长度都大于 0 的话，这样就去显示它们里面的值 ...   echo ... 输出点连接的文字  ...  您好 ... 再用一个点连接 username 的值 ...   然后再去输出 email 里面的值  ... 
echo '您好：' . $_POST['username'] . '，您的邮件地址是：' . $_POST['email'];
再去设置一下，如果没有填写内容显示的一个提示的文字 ...  else  ...  echo 输出 ...  请输入正确的用户名与邮件地址。
else {
        echo '请输入正确的用户名与邮件地址。';
} 
保存 .. 下面去浏览器上预览一下 ... 
因为现在我们用的是 get 方法请求的这个页面 ... 所以会显示出这个表单 ...   先不输入内容 ... 直接点击提交 ...  会用 post 的方法把这个请求发送到当前这个脚本文件 ... 因为没有填写内容，所以 ... 提示 请输入正确的用户名与邮件地址 ... 
再返回来 ... 输入用户名 ... 密码...  提交 ... 
这次，会显示出我刚才输入的用户名还有邮件地址 ...


06-01-会话

HTTP 协议是用户跟服务器交流的一种方式，或者叫做客户端与服务端对话的方法。在客户端使用 HTTP 协议发生一个请求，比如用户的浏览器就是一个客户端，服务器接收到这个请求，根据请求做出的响应，比如返回用户想要的内容，或者把用户提供的数据放到数据库里等等。完成以后这个 HTTP 请求就结束了。
所以说，HTTP 是一种无状态的协议，也就是，每次请求都是独立的，他们之间没有什么关联。
这样我们就很难去判断哪些请求来自哪个用户。不过还好，PHP 给我们提供了解决的办法，就是使用会话，英文是 session 。
原理很简单。当用户发出请求的话，我们的应用程序就跟这个用户之间开始一个会话 ...  其实就是生成一串随机的 id 号 ，然后把这个 id 号放到用户那里一份，一般是存储到用户浏览器的 cookie 里面。
这个会话 id 也会放到我们的服务器上一份，默认会放到一个文件里面。我们可以往这个文件里放点东西，比如用户的名字，最后一次浏览的页面，相关的设置等等。
这样下回这个用户再发出请求的时候，我们可以去比较用户那里的 session id ，还有在我们服务器上的 session id ，匹配以后，就知道这个请求来自哪个用户了。


06-02-Cookie

想在用户的浏览器上存储点东西，可以使用 Cookie 。它其实就是一些名值对儿形式的文字。使用 PHP 的 setcookie() 函数，可以去设置要存储到用户浏览器上的 cookie 。
要得到在用户浏览器上设置的 cookie 内容，可以使用 $_COOKIE 这个超级全局变量。下面我们去试一下 ... 
使用 setcookie() 函数  ... 这个函数有一些参数 ...  第一个参数是要设置的 Cookie 值的名字 ...  第二个参数是跟这个名字对应的具体的值。比如我们存储一下用户选择的主题颜色 ... 可以去添加一个叫 color 的 Cookie 值 ... 第一个参数就是 username ... 第二个参数是想要给 color 的值 ...  blue .. 
setcookie('color', 'blue');
这样我们可以通过 username 这个名字，得到的值就会是 wanghao ...  另外 setcookie 函数还有一些其它的参数，比如 Cookie 的过期的时间，路径，域名等等 ... 有兴趣可以查看一下 php.net 上面的相关文档。
再去设置一条 cookie ...  叫它 layout ... 它的值是 wide ... 
setcookie('layout', 'wide');
先保存一下 .. 回到浏览器 ...  刷新一下 ... 
这样在用户的浏览器上，就会设置一条 Cookie ...  我们可以去查看一下 ...  这里我用的是 Chrome 浏览器 .. 可以使用它的开发者工具去查看一下  Cookie  ... 点击右键 ... 审查元素 ..   Resources
打开 Cookies.. 选择 Localhost ... 
在这里，你会看到刚才我设置的 Cookie ，这条 Cookie 的 Name ，名字是 color ...  跟它对应的值是 blue...   还有一个 layout ... 它的值是 wide
这些东西放会在 $_COOKIE 这个超级全局变量里面 ... 所以，可以访问这个变量得到相应的项目的值  ... 
(#返回)，下面可以把刚才设置的这两条 Cookie 里的值输出到屏幕上 ...  先用一个 echo ...   加上点文字  ...  要得到 color 这个 Cookie 的值 ... 可以使用 $_COOKIE 这个变量 ... 它是一个关联类型的数组 ... 得到这个数组里面的项目的值 .. 可以使用一组方框号　... 在方框号里指定一下值的名字 ...  这里就是 color ...   再去输出 layout 里面的值 .. 
echo $_COOKIE['color'] .  '<br>' . $_COOKIE['layout'];
保存 ... 回到浏览器 ... 刷新  ... 
在屏幕上会显示出 color 还有 layout 这两条 Cookie 的值 ... 
其它
在其它的页面， 我们同样可以得到 Cookie 里的值 ... 
(#返回) ... 先复制一下这行代码  ...  新去新建一个文件 ...  命名为 user.php  ...  把复制的代码粘贴过来 ...  
在浏览器里打开这个文件 ... 
同样，在这个新创建的页面上，也会显示出设置的 Cookie 的值。
总结
在客户的浏览器上设置 Cookie 很简单，不过一般我们不会把敏感的信息存储到用户的浏览器上 ..   而且我们不能完全相信在用户浏览器上得到的 Cookie 值，因为用户可以通过工具，修改在自己浏览器上的 Cookie 的值  ... 
这就需要，我们去使用更安全一点的方法， Session 。


06-03-开始会话

开始一个会话，可以使用 session_start() 这个函数 ..    输入 session_start();   保存一下 ... 回到浏览器 ... 
打开这个文件 ...  这样应该就开始了一个会话 ...   点击右键 ... 审查元素 ... Resources ...  打开 Cookies  ... localhost ... 
注意这里除了我们在上一个视频里设置的两条 Cookies 以外，还有一条名字是 PHPSESSID 的 Cookie  ...  它的值，是一串随机的字符串 .. 这个就是开始会话以后，PHP 生成的会话的 ID 号 ... 
默认会把这个 ID 号存储到用户的浏览器上... 另外，在服务器上，也会生成一个 Session 文件 ... 这个文件的路径可以通过修改 PHP 的配置文件 php.ini 里面的 session.save_path 这个指令去更改。
或者也可以使用 session_save_path() 函数去设置 .. 
我用的是 MAMP 搭建的环境  ... 默认它会把 Session 文件放在 /Applications/MAMP/tmp/php 这个目录的下面 ... 
可以打开这个目录看一下 ... 
在这里有几个文件 ... sess 开头 .. 下划线 ... 然后是会话的 ID 号 ...  对比在浏览器上存储的会话 ID ，可以找到对应的文件 ... 
应该是这个文件 ... 
目前这个文件里面是空白的 ...  因为我们现在只是开始了一个会话 .. .还没有往会话里存储内容 ... 
设置会话
在会话里面存储的内容都会包含在 $_SESSION 这个超级全局变量里面。使用这个变量可以得到存储的会话信息，也可以去设置新的会话信息。
比如我们要添加一个存储用户名的内容 ..  $_SESSION ... 方括号 .. 在里面是要设置的信息的名字 ... 可以叫做 username  ...  等于 ... 后面是要设置的跟 username 这个名字对应的值  ....   wanghao  ... 
$_SESSION['username'] = 'wanghao';
保存 ... 回到浏览器上刷新一下 ...  然后再打开跟我当前的会话相符的会话文件 ...  
在这个文件上，你看到的是被序列化的内容  ...  不过我们还是能发现 ...  username  ...   对应的值是 wanghao ... 
得到会话信息
得到设置的会话信息，跟得到一般的关联数组的方法是一样的 ... 先是 $_SESSION ...  方括号 ... 再去指定一下要得到的会话信息的名字 ...  这里就是 username  ...   前面加上一个 echo  ... 
echo $_SESSION['username'];
在浏览器上，会显示出设置的会话信息 ... 
在其它的页面，我们也可以访问到存储在会话里的信息 ... 
打开 users.php  ... 
如果想在这个文件里得到会话信息 ... 首先要使用一个 session_start()  ... 
然后再去输出会话里的信息 ...
echo $_SESSION['username'];
在浏览器里打开这个页面 ...  
同样可以显示出存储在会话里的 username 的值 ...


06-04-重置会话信息与结束会话

重置会话信息可以使用 unset 函数，去把不想要的会话信息删除掉 ...  如果想结束整个会话，可以使用 session_destory() 函数 ... 
比如我们要把上面设置的 username 这条会话信息删除掉 ...  unset ...  $_SESSION['username'] ... 
unset($_SESSION['username']);
保存 ... 回到浏览器上刷新一下 ... 这里会显示一条信息 ... 因为我们试着要去输出会话里的 username 这条信息，但是它已经被 unset ，删除掉了。
结束整个会话，用的是 session_destroy() ... 
session_destroy();
保存 ...  刷新  ...  现在会话就会被删除掉了 ..  保存在我们服务器上的会话信息也会删除掉 ...    
一般在销毁会话之后，可以再把 $_SESSION 设置成一个空白的数组 ...
$_SESSION = array();
然后可以把存储在用户浏览器上的 Cookie 也删除掉 ...


06-05-用户登录的功能

使用会话我们可以实现用户登录的功能，用户在登录表单上输入了自己的用户名，还有密码。然后我们可以验证一下用户提供的这些信息在数据库里存不存在，如果存在，就去设置一条信息会话信息，标记一下这个用户已经登录了。
下面，我们去模拟一下这个用户登录的功能。 这里需要几个文件 ...  index.php ，访问这个页面的时候如果用户没有登录的话就把用户重定向到 login.php ，在这个文件里，可以有一个登录用的表单 ... 如果登录成功，再把用户重定向到 index.php 。
另外还需要一个可以让用户注销登录的文件 ..   可以叫做 logout.php ...  访问这个文件，可以销毁会话 ... 
login.php
先去创建登录用的表单.. 新建一个文件 ... 命名为 login.php ...  
添加一个基本的 html 文档的结构 ... 修改下 lang 属性，还有 title 标签 ... 
然后去添加一个表单 ... 表单的 action 属性，就是表单提交到的地址 ... 可以使用当前这个脚本文件 ... 再把它的 method 属性设置成 post 
<form action="<?php $_SERVER['SCRIPT_NAME']; ?>" method="post"></form>
这个表单需要三个元素 ...  输入用户名的文本框 ...  元素的名字可以是 username ... 
<input type="text" name="username" placeholder="用户名">
还添加一个 password 类型的 input 元素，可以让用户输入密码 ..
     <input type="password" name="password" placeholder="密码">
最后再加上一个提交这个表单用的按钮 ... 
     <button type="submit">登录</button>
在这个文件的顶部，我们可以去处理一下 ....  先用一个 session_start() 开始会话 ..
session_start();
然后确定请求的方法是 POST ...   
if ($_SERVER['REQUEST_METHOD'] == 'POST') {}
然后我们可以去验证一下，用户输入的用户名和密码，一般我们需要去对比存储在数据库里面的用户名和密码，看看有没有跟用户输入相匹配的记录 .. 如果有，我们就去设置一条会话信息 .. 标记一下用户已经登录了 ... 
不过这里为了简单点， 可以去验证两个静态的内容 ..
if ($_POST['username'] === 'wanghao' && $_POST['password'] === '123456') {}
这行代码的意思就是，如果用户输入的用户名等于 wanghao，并且密码是 123456 ...  就表示已经通过验证了 ... 
通过验证以后，我们可以去设置一条会话信息 ...  比如把 is_login ，设置成 true ... 
        $_SESSION['is_login'] = true;
这样在用户发出其它的请求的时候我们可以检查一下会话信息里有没有 is_login，如果有，就说明用户已经登录了 ..
再去设置一条会话信息 ...  让 username 等于 wanghao ... 
        $_SESSION['username'] = 'wanghao';
然后再把用户重定向到 index.php 这个地址上 ...  可以使用 header 函数，去设置一下 Location ... 
        header('Location: index.php');
为了避免输出其它的东西 ... 再用一个 exit();
index.php
下面再去编辑一下 index.php .. 
session_start(); 
开始会话 ..  然后判断一下会话里的 is_login 这个信息有没有值 ... 如果有，用户登录成功以后，才会设置这条会话信息 .. 所以，如果没有这条信息，就表示用户没有登录  ... 这样我们要做的事就是，去把用户重定向到 login.php ... 
if (!isset($_SESSION['is_login'])) {
    header('Location: login.php');
    exit();
}
确定用户已经登录了，我们可以输出一个问候的信息 ... 然后再加上一个 登出 的链接 ...  点击这个链接，可以删除会话 ... 让用户退出登录  ... 
echo '您好：' . $_SESSION['username'] . ' <a href="logout.php">登出</a>';
logout.php
下面，我们我们再去创建这个 logout.php ... 
文件的一开始，还是要用一个 session_start() 开始会话 ... 
session_start();
然后去删除会话 ... 用的是 session_destroy() ... 
session_destroy();
再把$_SESSION 设置成一个空白的数组 ..
$_SESSION = array();
最后，再把用户重定向到 index.php ...
header('Location: index.php');
exit();
预览
现在我们就完成了这个简单的用户登录和登出的功能 ...  下面去测试一下 ... 
先打开 index.php .... 
因为还没有登录 ... 也就是 $_SESSION 里面的 is_login 还没有被设置 ...  所以，会把用户重定向到 login.php .
输入用户名 ...  wanghao ... 密码 .... 123456 ... 
点击 登录 ... 
会用 POST 的方法请求当前这个脚本文件 ...   如果验证通过的话 ... 就会去把会话里面的 is_login 设置成 true  ...  同时也会设置一个 username 的会话信息 ...  然后把用户带到 index.php ...
在 index.php 上，检查到用户已经登录了 ...  所以，会显示问候的信息 ... 还有一个登出的链接 ...
点击这个登出的链接 .... 
会打开 logout.php ...  这个文件会销毁会话 ... 然后再把用户带回到 index.php 上面 ...   因为现在用户已经是未登录的状态，所以，又会把用户带到 login.php 这里来 ...


07-01-函数 - function

function ，就是函数。函数就是一块拥有特定功能的代码，一般函数都会有个名字，想用这个函数做点事的时候，可以使用它的名字去调用它。PHP 本身已经定义好了一些函数，基本上你能想到的常用的功能，都有可能已经有了一个函数去做这件事儿。
除了这些直接可以用的函数以外，PHP 也允许我们自己去创建函数。如果你觉得在程序里，经常会用到某种特定形式的代码去解决点解决 ... 这个时候或许你就需要把这些代码装到一个函数里面，这样就可以重复去利用它了，而且也比较容易维护。
下面，我们来看一下怎么样去定义一个函数。
首先要使用 function 这个关键词，它就是函数的意思  ...  输入 function ...  接着去给要定义的函数起个名字 ...  这个名字最好可以描述这个函数到底能做什么。
比如我要创建一个可以返回 您好 这两个字儿的函数 ... 可以叫它 say_hello ...  在函数名的后面是一个括号，在这个括号里，我们可以给函数去指定它可以授受的参数，等会儿再回来介绍一下参数的作用 ... 
然后是一组花括号...  在这组花括号里，就是这个函数要做的事情 ...    这里我们只是简单的让它输出您好这两个字 ...  echo '您好';
function say_hello() {
    echo '您好';
}
这样我们就定义好了一个超级简单的函数，叫做 say_hello() ...   要去运行这个函数，使用这个函数，或者叫执行这个函数  ...  可以直接使用函数的名字 ... 后面再加上一组括号 ...
say_hello();
你会看到在屏幕上会显示 您好 这两个字儿  ...   一般我们不会去直接输出函数运行出来的结果 ... 而是使用一个 return ，去返回这个结果 ... 像这样 ... 
return '您好';
这样，我们就有机会，可以把这个函数执行的结果交给一个变量 ...  或者把这个结果作为其它函数的参数 .. 这样做更灵活一些 ... 
现在，屏幕上，不会直接输出 您好 这两个字. .. 因为函数执行以后，只是返回了这两字，想要输出它的话，要在前面加上一个 echo ... 
echo say_hello();
意思就是去输出 say_hello() 这个函数执行的结果。
这次在屏幕上，又会显示 您好 这两个字儿了。


07-02-函数的参数

函数经常可以授受一些参数，这样在执行函数的时候，我们可以给它的参数传递具体的值，这样在函数的内部，就可以根据这些参数的值去算出结果。
比如这个简单的函数，现在我们让它可以授受一个参数 ...  在定义函数的时候，可以在函数名字后面的括号里，去给它指定参数 ...  这里给它先添加一个叫  $name 的参数  ...  如果还需要其它的参数，可以使用一个逗号分隔一下，再去添加其它的参数。
现在，在这个函数的里面，我们就可以使用这个 $name 参数了 ...  
在 您好 这两个字儿的后面，连接这个参数 ... 如果再去执行这个函数的时候，我们需要给它的 $name 参数，提供一个具体的值 ... 
function say_hello($name) {
    return '您好 ' . $name;
}
在这个 say_hello 后面的括号里，输入一个值 ..  可以直接在这里输入值，或者也可以使用一个变量来代替 ...   
echo say_hello('王皓');
这次显示的结果是，您好，后面加上我们在执行 say_hello() 函数的时候给它指定的 $name 参数的值  ... 
make_list
下面，我们再去创建一个函数，比如在我的程序里面，经常需要把一个数组转换成一个列表显示出来 ...   根据这个需求，我们去创建一个函数 ... 
先输入一个关键词 ... function  ... 函数的名字可以叫做 make_list ... 创建列表的意思 ..  在括号里，再指定一下这个函数需要的参数 ...  我们需要用户把想要转换成列表的数组传递进来 ...  还需要指定一下列表的类型 ... 比如 ul 无序列表，或者 ol 有序列表  ... 
第一个参数可以叫做 $source  ... 用它来表示传递给函数的数组 ...   中间用一个逗号 ...  第二个参数可以叫它 $container  ..  列表的容器 ..  在设置参数的时候， 可以直接给参数一个默认的值 ... 这样如果用户不给这个参数提供具体的值 ，就会使用这个默认的值 ...   我们给 $container 指定一个默认的值是 ul  ... 
function make_list($source, $container = 'ul') {}
下面， 再去设计一下这个函数具体要做的事 ...   首先，可以去判断一下，用户提供给这个函数的 $source 参数的值是不是一个数组 ...  如果是就去把它转换成列表 ... 如果不是，可以返回一个提示的信息，说明一下原因 ... 
判断数据是不是数组，可以使用 PHP 给我们提供的 is_array 这个函数  ...  先用一个 if 语句 ... 判断的条件是  is_array  ... $source  ..  看一下 $source 的值是不是数组  ... 如果是，就是执行下面这块代码 ... 
  if(is_array($source)){}
可以先定义一个变量 ... 叫做 $lists  ...  给它一个空白的值  ...   然后再用一个 foreach 语句 ，循环一下用户提供的数组  ...  foreach  ... $source as $item ...  在这个循环的内容， $item 就表示本次循环的数组里面的项目 ... 
每次循环都去把项目的值添加给 $lists 这个变量  ...  这里我用了一个 点等于 ...   把循环的值加到 $lists 上面 ...   这样每次循环的时候， 就会把一组用 li 标签包装的数组项目添加到 $lists  上面。
        $lists = '';
        foreach ($source as $item) {
           $lists .= '<li>' . $item . '</li>';
        } 
最后，再让这个函数返回这个列表 ...    可以在列表的周围添加一个容器 ... 这里我用的是双引号，所以可以直接在里面加上变量的名字 .. 
 return "<$container> $lists </$container>";
这样，如果用户给的是一个数组类型的数据 ... 就是返回一个列表 ...  如果给的不是数组类型的数据  ... 可以返回一个提供的信息 .. .
   return '请提供数组类型的数据。';
下面，我们再去执行一下这个函数  ...  先去准备一个数组  ... （#粘贴）
然后输入函数的名字 ..  再去设置一下它的参数 ...  比如让它去把 $tracks 这个数组转换成一个列表 ...  把 $tracks 交给这个函数 ... 注意这里传递参数的顺序是很重要的。
输入一个逗号，再设置一下它的第二个参数 ... 如果不设置这个参数的话，就会使用这个参数的默认的值  .. 也就是 ul  ...  这里还是先输入一个 'ul'
在前面再加上一个 echo ... 这样可以把函数返回的东西输出到屏幕上 ... 
保存 ... 
你会看到 ...  make_list 这个函数根据用户提供的数组，做出了一个无序的列表  ... 
下面， 把这个 ul 换成 ol  ... 保存 ..
这次，又会得到一个有序的列表 ... 
这样每次想根据某个数组去做一个列表的话，都可以去执行一下这个函数 ...


07-03-用引用的方法传递参数

一般来说，如果不做特别的设置，传递给函数的参数，都是作为一个具体的值传递进来的。也就是，不管在函数的内部怎么样去处理传递进来的参数值，都不会影响到代表这个参数的变量的值。
如果，你想影响到这个作为参数传递进来的变量的值 ...  我们可以把函数的参数设置成用引用的方式传递进来。下面，咱们再通过一个演示来理解一下这个引用传递。
先去定义一个简单的函数 ...  这个函数做的事就是去给传递进来的参数加上一组 strong 标签  ...  函数的名字可以是 become_strong  ..  它可以接受一个参数  ...  比如可以叫做 $string  ....  然后在函数的内容 ..  返回这个加粗之后的参数值  ...  注意这里我用的是双引号，所以可以直接在这组引号里面，使用变量的名字 ... 
function become_strong($string) {
    return "<strong>$string</string>";
}
在它上面，再去定义一个变量 ...  $title ... 给它一个字符串类型的值  ...
$title = '继续革命';
在下面的调试的代码里，可以输出这个 $title 看一下 ...   保存 ...   显示 $title 的值是一个 string 字符串 ...  具体的值是 继续革命 .. 
下面， 我们可以去执行一下 become_strong 这个函数 ...  给它一个参数  ... $title ... 
become_strong($title);
现在， 这个 $title 只是作为函数的参数的值传递进来 .. 所以，它不会影响到 $title 本身 ...  在屏幕上，$title 的值仍然是原来的 继续革命 ... 
下面，我们可以让 become_strong 的参数，作为引用传递到函数  ..  这样需要在参数名字的前面加上一个 & 符号 ... 这就表示，这个参数会作为引用传递到函数 ... 
function become_strong(&$string) {
   $string = "<strong>$string</string>";
}
这样我们需要再改造一下函数里面的东西 ..  可以先去掉　return  ..  然后让 $string 这个参数的值  .. .等于后面使用 strong 标签包装以后的它的值 ... 
再保存一下 ... 
在屏幕上你会看到 继续革命 这几个字儿已经加粗显示了 ...  再查看一下源代码 ...   在继续革命的周围，会有一组 strong 标签  ... 
因为现在 become_strong 这个函数接受的参数，是用引用的方式传递过来的 ...  所以，在函数内部对这个参数所做的修改，都会影响到作为它的参数传递过来的那个变量的值。


07-04-使用关联数组作为函数的参数

在调用函数为函数指定参数的时候，我们要注意参数的顺序，第一个参数必须对应的是第一个参数的值，第二个参数对应的是第二个参数的值。
不过有一种方法，可以让我们在给函数传递参数的时候，不考虑参数的顺序。这就是让函数使用关联数组作为它的参数，然后在函数的内部，可以使用这个关联数组里面定义的项目的名字得到数组里面的值。这就相当于是给每一个参数都起了一个名字 ... 
这样在调用函数给函数传递参数的时候，只需要给它传递一个关联数组，然后设置数组里面的项目，项目的名字，还有项目对应的值。
下面，通过一个演示来理解一下 ...  我们去创建一个可以根据链接的地址，还有标题做出一个链接的函数。
function  ... 这个函数可以叫它 make_link  ...  它参数一个参数 ... 这个参数的值应该是一个数组  ...  我们可以给它一个默认的值 ... 让它等于一个空白的数组 ... 
这个函数返回的就是一个链接 ...   一个 html 的链接应该是这样的形式 ... href 属性里面是链接的地址  ... 这里，可以使用 $attributes 的 url 这个项目来表示这个链接 ...  
在这组 a 标签之间，是链接上面显示的标题 ... 在这里，可以使用 $attributes 的 title 这个项目表示这个标题 ... 
return <a href="$attributes['url']">.$attributes['title']</a>;
下面，我们得在这行代码上加上一些引号，还有连接符号 ... 这样才能正常返回这个链接 ... 
 return '<a href="'.$attributes['url'].'">'.$attributes['title'].'</a>';
现在，我们就定义好了这个函数 ...  下面再去用它制做一个链接 ...  调用这个函数 ...  make_link ...  需要给这个函数传递一个参数 ... 这个参数应该是一个关联类型的数组  ...  array  ...  然后这个数组的内容，需要一个叫 url ，还有 title 的数组项目 ... 先去添加 url 这个数组项目 ... 
注意，这里我们不需要关心这些项目的顺序，只要项目的名字对了就行 ... 
url 项目的值应该是一个链接的地址 ...    http://ninghao.net  ...  然后再设置一下这个数组的 title 项目 ... 这个项目的值应该是链接上面的文字 ...  宁皓网 ...  因为这个函数只返回值，想要输出这个返回来的值，需要在前面加上一个 echo  ... 
echo make_link(array('url' => 'http://ninghao.net', 'title' => '宁皓网'));
保存 ... 
在屏幕上会显示一个链接 ...  查看一下这个页面的源代码 ...  你会看到，这个链接上的文字是 宁皓网 ... 链接的地址是 ninghao.net ...


07-05-变量的作用域

作用域，就是应用的范围，变量的作用域就是变量能够使用的范围。 我们在函数的内部定义的变量，叫做本地变量，或者叫局部变量，也就是这个变量的作用域只是在这个函数的内部。在函数以外，我们是访问不了在函数内部定义的变量的。
在函数以外定义的变量叫做全局变量，变量的作用域就是全局作用域。在默认的情况下，在函数的内部，我们也不能访问到全局范围的变量，不过可以在函数内部使用 global 关键词，去声明一下，要在函数的内部使用的全局变量。下面，我们通过几个演示再去理解一下。
先在全局范围内定义一个变量 ... $title 等于 继续革命 ... 
$title = '继续革命';
然后再去定义一个函数 .. 叫做 get_title ... 在函数的内部，我们可以试着去返回 $title 这个变量 ...  
再去执行这个函数 ... 然后看看能不能输出这个函数返回的值  ..  echo get_get_title()  ... 
function get_title() {
    return $title;
}
echo get_title(); 
保存 ...  你会看到，在屏幕上会显示 Undefined variable ：title ... 未定义的变量 title  ...   我们在 get_title 里面，并没有定义 $title 这个变量 ...  虽然在全局范围里面有一个 $title 变量，但是默认情况下，在函数的内部不能访问全局变量 ... 
不过在函数里面，可以使用一个 global 关键词 ... 去声明一下要使用的全局变量 ...
global $title;
再保存一下 ... 这回 get_title 这个函数就会返回在全局作用域里面的 $title 变量的值了。
局部变量
下面，我们可以在这个函数的内部去定义一个变量  ... $label 等于 专辑名称 ... 
然后在函数以外，试试去输出这个叫做 $label 的变量  ...   echo $label;
保存 ...  又会显示一个未定义的变量：label  ...  因为 $label 变量是在函数内部定义的，所以这个变量的作用域就是一个局部作用域 ...  也就是，我们在全局作用域下面，是不能访问到这个变量的。


08-01-创建数据库

创建一个 MySQL 数据库，这里我们可以使用 phpMyAdmin 。打开 phpMyAdmin ...
输入数据库的名字 ... php_course  .. 选择一下数据库整理的字符集 ... 这里我们选择 utf8_general_ci ..  然后点击 创建 ...
再打开这个数据库 ... 在里面添加一个数据表 ...
名字是 posts ...   
再这个表里，再添加几个字段  .. 先添加一个 id 字段  ...  类型是 INT ...   Index 这里，选择 PRIMARY .... 然后在 extra 这栏里，选择 auto_increment ，这样 id 这个字段会作为这个表的主键，它的值会自动增加。
再添加一个 title 字段 ...   类型是 VARCHAR，长度是 255....  Collation 选择 utf8_general_ci
再来一个 content 字段  .. 类型选择 TEXT ...
保存 ...


08-02-连接数据库

想要使用 PHP 去操纵数据库，我们需要先连接到指定的数据库，使用 PDO 的方式来连接数据库，就是去根据一些参数实例化一个 PDO 的对象。
想多了解点关于 PHP 的对象，可以参考宁皓网的《PHP：面向对象基础》这个课程。
连接成功的话，我们就可以使用这个 PDO 对象里面的一些方法，去操纵数据库了。比如可以插入，更新或者删除数据，可以从数据库里面查询出自己想的东西等等。
下面， 我们先看一下怎么样连接到数据库。
可以先给新建的 PDO 对象起个名字 ... 这里我们叫它 $db_handle  ...  然后用 new 操作符 ... 再加上 PDO 这个类的名字 ... 这样就可以去新建一个 PDO 对象了。
$db_handle = new PDO();
在这里，我们需要再去添加一些参数。
第一个参数是跟数据库相关的一些东西 ... 第二个参数是数据库的用户名... 第三个参数是数据库的密码 .. 
在第一个参数里，先去指定一下想要使用的数据库引擎 ...  比如 mysql ，sqlite 等等 .. 在这里我们要用的是 mysql ...  先输入一个 mysql 再加上一具冒号，然后设置一下数据库的主机地址 ...  host 等于 localhost .... 意思就是，我们要使用 mysql 类型的数据库，数据库的主机名是 localhost ，localhost 表示本地的计算机 ... 
'mysql:host=localhost;
再后面再加上一个分号，再设置一下要使用的数据库的名字 ... dbname 等于php_course .. 这个数据库是我们之前创建的 ...   再用分号分隔一下 ... 如果数据库系统的端口号不是默认的 ... 可以用一个 port ，再指定一下数据库系统的端口号。这里我用的 MAMP 搭建的网站环境，它给 MySQL 设置的端口号是 8889 ... 
dbname=php_course;port=8889;
最后，我们可以再设置一下数据库的字符集 ... 对于我们中文用户来说 ... 这个字符集要设置成 utf8 ，不然会显示乱码 ... 设置字符集用的关键字儿是 charset ... 等于 utf8  ... 
charset=utf8',
再用一个逗号分隔一下 ...   设置一下第二个参数  .. . 数据库的用户名 ...  这里我们可以使用 root  ...  这是数据库系统的超级管理员 .. 在真正的应用 程序里面，你可能需要去为不同的数据库分配不同的用户，然后再设置一下必要的权限。
再去设置一下第三个参数  ... 数据库的密码 ...  MAMP 给 root 这个用户设置的密码是 root  ... 
保存 ... 如果没有显示错误 ... 说明我们成功的连接到了指定的数据库上 ...


08-03-处理异常

PDO 使用的是异常来处理遇到的错误 .. 所以，我们可以把要做的事，放到一个 try ...  catch 代码块里 ... 
把这个连接数据库的代码放到 try 里面 ...
try {...}
然后再 catch 代码块里，去设置一下怎么样去处理遇到的错误 ...   它可以接受 PDOException 类型的错误  ...  这里的 $e，表示遇到的错误 .. 
catch(PDOException $e)
然后在这个代码块里，可以使用这个错误对象的 getMessage() 方法，去输出遇到的问题 ...
echo $e->getMessage();
下面，我们可以模拟一个错误 ... 改一下数据库的用户名 ... 
保存 ...  
会在屏幕上输出遇到的问题，提示 Access denied ..


08-04-插入数据

为了安全，在执行 SQL 语句的时候，我们需要先去准备一条声明，然后在这个声明里，用一些点位符，比如要插入的更新的具体的数据，可以使用点位符，接着要去为这个点位符绑定具体的数据。最后再去执行一下。
下面，我们来看一个具体的例子。比如我们要往数据库的 posts 表里插入一条新的记录 ...   
准备
先去准备一条 SQL 的声明 ...  先给这条声明起个名字 .. 这里就叫它  statement ...  等于 ... 准备一条 SQL 声明，要用的是 PDO 对象的 prepare 方法 ... 这个 PDO 对象就是在上面新创建的 $db_handle  ...  调用它的 prepare 方法...
在这个方法里，可以去添加想要使用的 SQL 语句 ...  插入数据用的是 INSERT INTO ...   如果你想学一下使用 SQL 的语句去操纵数据库，可以去看看宁皓网的 《MySQL 基础》这个课程。
在这个 INSERT INTO 后面加上要插入数据的表的名字 ... 这里就是 posts  ... 加上一个括号 ... 指定一下要插入数据的栏 ... 在 posts 表里面有三个栏，id  title ... 还有 content，id 栏是自动增加的，所以不用管它 ... 在这里我们指定一下 title .... 还有 content ... 
VALUES  ... 括号 ... 这个括号里，就是跟前面的栏对应的具体的值 ... 注意，这里我们不能放要插入这两个栏里面的数据直接放在这儿 ... 因为这样做不安全 ...  会有 SQL 注入的风险 ... 
所以，我们需要在这里，先用两个点位符来代替要插入的具体的数据 ... 
这个占位符了可以有个名字 ... 如果不想命名这些点位符，可以直接都用一个 ? ...   这样，第一个 ? 号表示的就是 title 字段的值 ... 第二个 ? 号表示的就是要往 content 字段里面放的数据 ... 
    // 准备
    $statement = $db_handle->prepare
    (
        'INSERT INTO posts(title, content) VALUES (?, ?)'
    ); 
数据
下面，我们再去准备点要往 posts 表里放的数据 ..  一般这些数据可能来自用户填写的表单 ... 不过这里为了演示，我们可以直接去定义两个变量，来代表要插入的数据 。
    $title   = '阿甘正传';
    $content = '他是一个占据着成年人躯体的幼童、一个圣贤级的傻子、一个超越真实的普通人、一个代表着民族个性的小人物。' ;
绑定 
然后我们需要把这里的数据绑定到准备好的声明里面 ...  也就是用这个具体的数据，来代替在声明里面使用的点位符 ... 可以使用声明的 bindParam 方法 ... 
上面准备好的声明叫做 $statement .. 调用它的 bindParam 方法 ... 方法里有两个参数，第一个参数是声明里的点位符 ... 如果我们在声明里给点位符起了名字，在这里就可以使用这个点位符的名字 ... 没起名字的话 ... 可以使用点位符的序号 ...  
1，就表示第一个点位符 ... 
这个方法的第二个参数是绑定的具体的数据 ... 第一个点位符表示的是要往 title 字段里面插入的数据  ... 这个数据，我们定义到了 $title 这个变量里面 .. 所以，这里就应该是 $title 这个变量 ... 
另起一行 ... 再去为第二个点位符绑定数据 ....   
  // 绑定
    $statement->bindParam(1, $title);
    $statement->bindParam(2, $content);
执行
最后我们要去执行一下 .. 用的是声明的 execute() 方法 ...   
  // 执行
    $statement->execute();
演示
这样如果我们刷新了这个页面，就会向 posts 这个数据表里面插入一条记录 ... 这条记录的 title 是在 $title 变量里定义的东西 ... content 是在 $content 变量里定义的东西 ... 
保存 ... 
再打开数据库的管理软件  ..   你可以使用 phpMyAdmin ....  这里我用的是 Sequal Pro ...
打开 php_course 这个数据库 ... 再打开它里面的 posts 这个数据表 ...
在这里，你会看到，刚才我们插入的这条记录。


08-05-使用命名的占位符

在上一个视频里， 在 SQL 声明里，我们用了没有名字的点位符 ... 也就是用一个 ? 号，然后在给这些用 ? 号表示的点位符绑定数据的时候，我们在 bindParam 方法里面，使用了点位的序号，为这些点位符绑定具体的数据。
下面，我们可以再试一下给点位符起个名字 ... 
在这条 INSERT 声明里 ...  第一个 ? 号表示要往 title 字段里插入的数据 ... 我们可以把这个 ? 号，换成更有意义的名字 ... :title  ... 注意点位符的名字的前面都要加上一个冒号 ... 
后面的这个点位符表示要往 content 里面插入的数据 ...  所以，它可以叫做 :content ... 
'INSERT INTO posts(title, content) VALUES (:title, :content)'
这样，在绑定具体数据的时候，可以用这个具体的名字，来代替点位符的序号 ... 
跟 :title 绑定的数据是 $title  ，注意在这个 :title 的周围要加上一组引号 ...    
$content  这个变量对应的点位符就是 :content ... 这里也要加上一组引号 ... 
    $statement->bindParam(':title', $title);
    $statement->bindParam(':content', $content);
下面，可以再去修改一下 $title 还有 $content 的值 ... 
    $title   = 'WALL·E';
    $content = 'WALL·E已经在地球上孤独地生活几百年了，他爱上了自己遇见的第一个机器人伊芙，并跟随着她展开了一场充满奇幻的太空之旅。' ;
保存...  再去执行一下这个页面 ... 
然后打开数据库管理软件 ....  在 posts 这个表里 ... 就又会多了一条记录 ...


08-06-使用关联数组绑定

使用 bindParam 方法，我们得挨个为声明里面用的点位符去绑定具体的值 ...  有一种更简单的方法，不需要使用 bindParam  ...  可以准备一个要绑定到点位符上面的数据的数组 ... 
如果我们用的是有名字的点位符 ...  这样就可以使用这个占位符的名字去命名数组里面的项目的名字 .. 也就是作为数组项目的键 ... 或者叫 key ... 
然后，把这个数据数组，作为 execute() 方法的一个参数 ... 
下面，我们再去试一下这种方法。
先去准备一个关联数组 ...  可以叫做 $data  ...  定义数组可以使用 array() 函数 ...   也可以使用方括号的形式 ... 
数组里面的项目就是跟点位符对应的 ...  先是点位符的名字 ...  title ... 这里不需要前面加上冒号 ...  然后是对应的值  ...  也就是要跟 :title 这个点位符绑定的数据 ... 
再设置一下 content ... 
    $data = [
        'title'   => '海上钢琴师',
        'content' => '一名具有钢琴天赋的孤儿历经一切的苦难：音乐、爱情及两次大战，但他从未放弃过他生长的地方。一部荡气回肠的诗意旅程电影。'] ;
下面，我们可以把这个数组 .. 作为 execute() 方法的一个参数  ...  
$statement->execute($data);
这样就不需要使用声明的 bindParam 方法去挨个为点位符绑定具体的数据了 ...   注释掉这两行代码  ... 
然后再去执行一下这个页面 ....  保存 ... 
再打开数据库管理软件  ... 
这里，在 Posts 表里面，又会多了一条新的数据 ...


08-07-选择数据 - fetch()

用 PDO 类的 prepare 方法准备好一条 SQL 查询语句以后，比如你想从数据库里面选择一些数据出来，执行了这条 SQL 语句，返回来的结果，可以使用 fetch() 方法得到。
fetch 是在 PDOStatement 类上定义的方法。这个方法可以获取到结果集的下一行数据。 另外还有一个 fetchAll 方法，它会返回结果里面的所有的数据。
下面，我们一起去看一下这两个方法。
先去准备一条 SQL 声明，比如我们得到 posts 这个表里面的所有的东西。先定义一个变量来存储这条声明 ...  $statement 等于 ... 用 $db_handle 的 prepare 方法去准备这条 SQL，$db_handle 是使用 PDO 连接到连接库返回来的一个 PDO 对象。
选择数据用的是 SELECT ...  加上一个星号 ... 表示选择所有的栏 ...  FROM posts ... 从 posts 这个表里 ... 
    // 准备
    $statement = $db_handle->prepare
    (
        'SELECT * FROM posts'
    );
这条语句不需要去绑定参数 ...   下面，去执行一下这条声明 ... 用的是声明的 execute 方法 ...
// 执行
$statement->execute();
下面，我们就可以使用 fetch 方法，得到执行了 $statement 以后返回来的结果了。 可以先把这个结果输出到屏幕上看一下 ... 
    echo '<pre>';
    var_dump
    (
        $statement->fetch()
    );
    echo '</pre>';
你会看到， 用 fetch 方法返回来的结果里面的第一排内容。如果再调用一次这个 fetch 方法的话，就会返回结果里面的第二排内容 ... 
 $statement->fetch()
我们可以使用一个 while 循环，去输出得到的所有的结果 ... 
fetch_style
注意 fetch 返回来的是一个数组 ... 这个数组里面有数字键也有带名字的键 ...   使用 fetch 方法的时候，可以决定返回来的数据的样式。
比如可以是数字数组，关联数组，也可以是对象，另外还有一些样式，可以参考一下这个地址：http://cn2.php.net/manual/zh/pdostatement.fetch.php  ，看一下 fetch_style 这个参数的说明。
下面，我们去试几个 ...  想要返回数字数组，可以用 PDO::FETCH_NUM 作为 fetch 方法的参数 ...  再复制一行 ..  然后用 PDO::FETCH_ASSOC 的样式提取数字  ...  ASSOC 表示关联数组 .. 
再添加一行 ...   这次我们可以使用 PDO::FETCH_OBJ ... 这样提供出来的数据会作为一个对象 ... 
        $statement->fetch(),
        $statement->fetch(PDO::FETCH_NUM),
        $statement->fetch(PDO::FETCH_ASSOC),
        $statement->fetch(PDO::FETCH_OBJ)
在这里你看到的这些 PDO::FETCH 什么东西， 它们实际上是定义在 PDO 类上的常量，常量就是表示一个固定值。
这里，用 PDO::FETCH_NUM 提取的内容，只用数字索引键 ...  用 PDO::FETCH_ASSOC 的 fetch ，返回的是个关联数组，也就是数组里面的每个项目都有个名字.. 这个名字就是数据表里面的栏的名字。
最后用 PDO::FETCH_OBJ  的 fetch ，返回来的是一个对象。对象里面的属性的名字就是数据表里面的栏的名字 ... 
setFetchMode
另外在 PDOStatement 里面，还有一个 setFetchMode 方法，使用这个方法，可以给声明去设置一个统一的提取的样式。像这样 ...
$statement->setFetchMode(PDO::FETCH_ASSOC);
这样所有用 $statement 的 fetch 方法提供的内容，都会使用关联数组的样式。


08-08-输出得到的数据

下面，我们可以去输出从数据库里查询出来的数据。准备好 SQL 声明，并且执行以后 ...  再去设置一下提供的数据的样式  ... 使用 PDOStatement 的 setFetchMode 方法去设置一下 ....  设置成 PDO::FETCH_ASSOC ... 用关联数组的样式 ..
$statement->setFetchMode(PDO::FETCH_ASSOC);
然后用一个 while 循环，可以去把得到的数组全部都输出到屏幕上 .. .
while ($row = $statement->fetch()) {}
这样每次循环都会去调用 $statement 的 fetch() 方法提供到一行内容，并且会把得到的东西交给 $row 这个变量 .. 这样在循环的里面，我们可以使用 $row 来表示当前提供到的这行内容 ...  这个循环会在 fetch() 方法返回 false 以后结束，表示已经没有可以提供的数据了。
在循环里面，我们去输出得到的内容 ... 这个内容是一个关联数组 ..  title 里面包含的就是 posts 表里的 title 字段的内容 ...  content 就是 posts 里面 content 字段里的内容 ... 
在 title 周围加上一组书名号 ... 后面再加上 content 里面的内容 .. 最后，再加上一个换行符号 ... 
echo '《 '. $row['title']. ' 》'. $row['content'] . '<br>';
保存 ... 
在屏幕上，会显示出最开始使用 SELECT 语句从数据库里面查询出来的 posts 表里的所有的内容。


