00-00-课程介绍

HTML，CSS，还有 JavaScript … 这三个东西是 Web 开发者必须要学会的东西 …  在这个课程里，我们一起去学习使用 JavaScript 这门语言。
先去介绍一下基本的语法，怎么样去定义变量，访问变量里的值。了解 JavaScript 里面的数据的类型。什么是数组，怎么样去处理数组。还有创建对象，定义函数等等。这部分内容还会介绍一下基本的句子，用 if 和 switch 语句去做判断。
用 while 和 for 语句去循环执行一些动作。
然后再去了解什么是 DOM ，怎么样使用它去操纵网页，获取到网页里的元素，访问元素的属性，添加新的内容到网页上。
最后我们再学习一下 JavaScript 里面的事件，根据在浏览器上发生的事件，去执行在应用里设计好的动作。


00-01-在网页中嵌入脚本代码的方法

下面我们先看一下怎么样在网页上使用 JavaScript  ..  如果想在网页上使用 JavaScript 代码  … 可以先输入一组 script .. 标签  ..   在这组标签里，再去输入一些 JavaScript 的代码 …
浏览器在显示网页的时候，看到有 <script> 标签 … 就会去执行它里面的代码 .. 
如果在你的应用里需要很多 JavaScript 代码  …   一般我们会去为它单独创建一些扩展名是 .js 的文件  ..  再把文件链接到网页上 … 
在这里，我们可以去新建一个文件 … 命名为 script.js .. 
然后回到网页上 ...   使用这样的形式去链接脚本文件。输入 script:src … src 这个属性里的东西就是脚本文件的地址 ..    
再打开这个脚本文件 .. 可以在里面可以输入 JavaScript 的代码 … 
用一个简单的 alert(’Hello’);
这行代码会在加载页面以后显示一个 Hello 的提示窗口 ..  在浏览器打开这个网页去看一下   .. .
打开以后，会弹出这个提示的窗口 …   
(#script.js)
在调试应用的时候，我们经常会用到 console.log()   …  它可以在控制台上输出一些东西，这里面说的控制台，就是浏览器开发者工具里的那个控制台。
比如我们可以计算出来结果，或者指定的内容输出到控制台上 …  像这样 … 
var words = ‘Hello World’;
console.log(words);
一般来说，一句代码就是单独一行 … 在句子的结尾，要加上一个分号 …   
回到浏览器 ..   可以打开控制台 ..  在这个课程里我们会使用 Chrome 浏览器 …    右击点击鼠标 …  审查元素 … 这样可以打开 Chrome 浏览器的开发者工具 …. 
这里的 Console，就是我们说的控制台 ...  
在这个控制台上，会输出我们指定要在控制台上输出的 words 里面的内容 …  Hello World … 
打开或者关闭控制台也可以使用快捷键，alt + command + J  ...  Windows 上应该是 alt + ctrl + J


00-02-注释 - 说明你的意图

在 JavaScript 的代码里可以使用注释 …     如果是单行的注释内容，可以使用  //  作为注释的标记  … 
一般的编辑器会把注释的内容显示成灰色的 … 这样你很容易知道哪些文字是注释的内容 …  注释在程序里面只是提示的作用，可以让未来的自己，还有别人再去读代码的时候可以清楚的知道你的意图 …  
浏览器不会去执行注释里面的代码。
//  在这里可以输入一些注释内容
注释的内容如果是多行的话，可以使用这样的形式 ... 先是一个 /*  ...  在它的后面可以输入多行的注释内容  ...  结束注释，可以再用一个 */ ...
这样在 /* 和 */ 之间的东西，不管有多少行，都会是注释的内容。
你经常也会看到这样的注释  ...  第一行是 /** ... 或者是一个星号 ...  然后另起一行 ... 再输入一个星号，这个星号跟上面这行的第一个星号对齐 ... 加上一个空格 ...   然后是注释的文字 ... 
每一行注释内容都会先是一个星号 ... 加上一个空格，接着是注释的内容 ...  
这样做就是为了让注释内容更好看一些 ...  并没有什么特殊的意义 ...


01-01-变量 - 给东西起个名字

在程序里面，我们可以使用变量来代表数据，变量，实际上就是数据的一个名字。命名了数据以后，在程序里的其它的地方，我们就可以使用这个变量，来代替具体的数据了。
在 JavaScript 里面，想要使用一个变量，我们需要先去声明一下它。声明变量，可以使用关键词 var ， 它是 variable 的简称  …  在它的后面是一个空格，接着是变量的名称 …   
最后要用一个分号，在 JavaScript 里面，表达完一个句子以后，在后面都要一般都需要使用一个分号去分隔一下  …  然后再另起一行输入其它的代码 …  这个分号有点像是完成了一句话。
像这样我们就在程序里面声明了一个叫 band 的变量 …   如果同时声明多个变量的话，可以写在同一行，中间用一个逗号分隔一下 … 像这样 
var band, album;
命名这些变量有一些必须要遵守的规则，比如变量的名称必须用字母，下划线，或者可以使用 $ 符号。 
var 1band;  …  会提示错误，因为变量名用数字开头了 … 
var band1; 是合法的变量名 ..   我们也可以使用下划线 …  var band_1; 
在声明变量的同时，可以直接给变量一个值 .. 
var band = “beyond”; 
现在 band 这个变量里面，会包含 beyond 这个字段串的值。这样再去访问  band 这个变量的时候，会返回它的值  … beyond … 
要注意的是，JavaScript 这种语言是区分大小写的，比如  … var Band = “coldplay”;   这个变量的名字首字母是大写的 B ... 
输入小写的 band …  返回的值是 beyond  ..   输入大写的 B 的 band … 返回的值是 coldplay …    因为 JavaScript 认为我们定义了两个不一样的变量，一个是小写 b 的 band ，一个是大写 b 的 band 。
所以在 JavaScript 里面，一定要注意大小写的问题 …  不仅仅是变量的名称 …  像函数的名称，关键词的名称，都是区分大小写的。
变量里面的值是可以更改的，前面我们声明了一个叫 band 的变量，给它的值是 beyond ..  先确定一下 … 输入 band …. 下面我们再修改一下它的值 …
band = “u2”;  
再输入 band … 现在它返回的值是 u2 … 说明 band 这个变量的值，已经被我们修改了 。
JavaScript 里面变量的命名形式通常会使用 camelcase ，驼峰式 ..  也就是如果变量名里包含两个或以上的词的时候，从第二个词开始，首字母使用大写的 … 比如像这样 
var bandName, 
这种形式的命名方式并不是必须的，不过在很多代码规范里都推荐使用这种形式，所以在我们的程序里面也可以使用这种驼峰式的变量名。


01-02-数据的类型 - 数字，文字，真与假 ...

JavaScript 认识几种类型的数值，比如 number ，数字，像 1，2，3，3.14 这些都是数字类型的值，还有逻辑值，也就是 true 或 false，表示真 或 假，对或错。
还有 string ，字符串，就是文字类型的值，另外还有两个比较特殊， null 和 undefined ， null 表示没值  ..  undefined 表示还没有定义的值 … 
JavaScript 可以动态的给数值去分类，也就是我们不需要特殊指定数据到底是哪个类型的值 … 直接使用就行 …   
我们可以先试一下只去声明一个变量，不给它值 … 
var fullName; 
再输入 fullName  ….  你会看到返回的结果是 undefined …  也就是如果你声明了一个变量，但是没给它值的话，它的值就会是 undefined …   在做逻辑判断的时候，这个 undefined 就相当于是 false ，也就是假的，不对的 … 
用这个没有值的变量 … 去加上一个数字 …    返回的结果是 NaN ..   表示 Not a number  … 不是一个数字 … 
下面我们去定义一个表示人名的变量，给它一个 字符串 类型的值，再去定义一个表示体重的变量 … 再给它一个 数字 类型的值 …  
var fullName = "王皓", weight = 160; 
这里，name 这个变量里的值就是字符串类型的值，因为 王皓 的周围使用了一个引号包装了一下 …  这样 JavaScript 会认为用引号包装的值都是字符串类型的值，这个引号可以是双引号，也可以是单引号。
判断数据的类型，可以使用 JavaScript 内置的一个函数，typeof …   在括号里输入要判断的值，因为要判断的值在一个变量里，所以，我们可以直接使用这个变量的名称表示这个值。
typeof(fullName);
返回的结果是 string … 表示 name 这个变量里面的值的类型是 string ，字符串类型的值。 再试一下 weight 这个变量 ..
typeof(weight);
返回的结果是 number … 表示 weight 里面的值是 数字 类型的值  …     注意在定义 weight 变量的时候，直接输入了数字，没有使用单引号或者双引号包围它 … 这样 JavaScript 会自动的认为这个数值的类型是数字。
再去定义两个变量  ….  名字等于 皓，姓氏是 王 … 
var firstName = "皓", lastName = "王"; 
我们可以把它们加到一起 ….  lastName + firstName;
返回来的结果就是 王皓，lastName 里面的 王，再加上 firstName 里面的 皓 …   这里这个 + 号是一个操作符，如果它的两头都是字符串类型的数值，就会把这两个字符串的数值结合到一起 … 
如果操作数都是 数字类型的值 …  会进行加法运算 …   比如我们让  weight  再加上一个数字 …   weight + 2 …   
160 再加上数字 2 …   结果是 162  ….   这个结果同样会是数字类型的值 … 
下面我们再定义一个表示增加的体重的变量 …  weightIncrease = “2.5斤";    
这个 weightIncrease 的值是一个字符串类型的值 …   因为它的值的周围用了一个引号 …   下面我们可以用 weight 去加上这个 weightIncrease …
结果是 1602.5斤 …  这个结果是一个字符串类型的值 …   它的周围会用一个引号 …   
虽然 weight 的值是数字类型，但让它去加一个字符串类型的值的时候，JavaScript 把这个数字类型的值转换成字符串 … 然后再让它去加上另一个字符串值  …  结果就是两个字符串类型的值结合到了一起 …   结果的值的类型同样会是字符串类型 … 
JavaScript 提供了方法可以把字符串类型的值转换成数字类型的值  …  可以使用 parseInt() 和 parseFloat() … 
parseInt() 可以把字符串转成整数值 …  parseFloat() 可以转换成浮点小数值 .. 
parseInt(weightIncrease);  结果是 2 ，去掉了后面的小数 …   再试一下 parseFloat()
parseFloat(weightIncrease);     …  结果里面会保留小数…
下面我们再用转换之后的结果去加上 weight  … 
parseFloat(weightIncrease) + weight ; 
得到的结果就是用加法算出来的数字  …  162.5  …


01-03-文本字符串的处理

字符串类型的数值有一些很实用的方法，比如你可以把字符串里的字母全部转成大写的，或者全部转成小写的，你可以得到字符串里的某个字符在字符串里的位置，你也可以替换字符串里的字符，可以截取字符串里的字符。
详细的方法可以去查看 JavaScript 的参考手册 …   下面我们介绍几个常用的字符串的方法 … 
先定义一个字符串  …  var  words = "宁皓网是个网站";
字符串有个 length 属性 … 它可以返回字符串里的字符的数量 …   使用这个属性可以这样 …  前面是代表字符串的变量的名字 … 加上一个点 … 然后是属性的名称  …  length … 
words.length;
这里返回的结果是 7 ，表示 words 里的字符串一共有 7 个字符  … 
charAt
每个字符都会对应一个编号，或者叫 index ，索引号。这个编号是从 0 开始的，也就是 宁，这个字的编号是 0 ，皓，这个字的编号是 1  .. 
想获取到对应索引号的字符，可以使用 charAt() 方法 …   words.charAt(0);
在 charAt 后面的括号里，指定索引号 …   意思就是获取到 words 里面的第一个字符 … 
返回的结果是  宁 …   想得到字符串里最后一个字符，可以这样做 ..    
words.charAt(words.length - 1);
这里我们并没有直接指定索引号，都是通过一点运算得到这个索引号， words.length 会返回字符串里的字符的总数 …  这个总数减去 1 ，结果就是这个字符串里的最后一个字符的索引号 …  因为索引号是从 0 开始的 ..  
得到的结果就是最后一个字符，站，这个字儿。 
indexOf
我们也可以使用具体的字符，来得到这个字符在字符串里的编号 …  用的是 indexOf  …  words.indexOf(“网”) ..
返回的结果就是字符串里，第一个网字儿的索引号，结果是 2  … 
words 这串字符里面有两个 网 字 …  想要得到最后一个网字的索引号，可以使用 lastIndexOf()  … words.lastIndexOf("网");
最后一个网字的索引号是 5  … 
substring
substring() 这个方法可以去截取字符串里的字符  …   words.substring() …  括号里要指定两个参数 … 第一个参数是截取字符的开始的索引号 … 第二个参数是截取字符的结束的索引号 … 
比如我们想截取字符串里前三个字符  …  这里就是 0, 3  … 
words.substring(0, 3);
replace
替换字符串里的字符，可以使用 replace() 这个方法  …   如果想把 宁皓网 这三个字，替换成 hulu  .. 可以这样 …  words.replace(“宁皓网”, “hulu ”);
第一个参数是想替换的字符，第二个参数是替换成的那个字符 …  返回的字符串会是 hulu 是个网站 … 
这个方法通常会配合区配模式使用，也就是正则表达式 … 在后面的视频里我们会介绍到使用 正则表达式 … 
（command + K）
split
split() 这个方法可以把字符串按照指定的分隔符分割成多个片断 …  我们先重新定义一个 words 的值  …   words = "宁皓网，是个网站"; 
我们可以用 逗号 作为分隔符，把这串字符分成两个部分…  
words.split("，") 
第一个参数就是分隔用的那个符号 …  ，另外你还可以指定第二个参数，是分隔以后的份数的限制 …  
可以再把这个分隔以后的结果起个名字 ..    var newWords = words.split("，");
newWords
得到的结果是一个数组 …   在后面的视频里我们会讲到数组  …  第一块内容是逗号前的字符，第二块内容是逗号后面的字符  …  访问数组里的值，可以使用值的索引号，这个索引号也是从零开始的 …  
newWords[0] 
这里我们用了一个方括号…  里面是索引号 …   返回的结果就是第一块内容 …    
newWords[1] 
得到的是第二块儿内容  ...


01-04-Array 数组 - 把数据有序地放在大盒子里装着

array ，就是数组，可以用来表示一系列的有顺序的数据。定义一个数组可以这样 …  var trackCD1 = [];
这样我们就定义了一个空白的数组，叫做 trackCD1 …   我们可以查看一个它的类型 …   typeof(trackCD1) ;   返回的结果是 object … 对象  … 其实 array 数组，是一种特殊类型的 object  …  在后面我们再去介绍什么是对象 … 
数组里面的数据是有顺序的，这个序号就是 index，索引号，排在第一位的数据的索引号是 0，然后依次往下排 … 
往数组里添加数据，可以在定义数组的时候就插入这些数据  …  像这样 .. 
var trackCD1 = ["长城", "农民", "不可一世"]; 
数组里面的数据之间使用一个逗号分隔一下 …  每个数据就相当于是数组的一个 element ，元素 …   这个数组里面的内容就是 Beyond 乐队的一张专辑里面的几首音乐  … 
数组也有个 length 属性，这个属性的值就是数组里面的元素的数量 …  
trackCD1.length;
使用数组的名称再加上索引号，可以访问对应编号的数据 …  比如想要访问 trackCD1 这个数组里的第一个元素的值 … 可以这样
trackCD1[0]
在方括号里加上索引号  …   得到第二个数据，可以把这个索引号换成 1  …  trackCD1[1];
定义好了数组以后，想添加新的元素到数据里，可以这样做 …   trackCD1[3] = "Bye-Bye";
数组名，加上要设置的数据的索引号，等号后面是具体的值   …    再查看一个 trackCD1 这个数组里的内容 … trackCD1
现在数组里面一共有四个元素，索引号是 3 的这个元素的值，就是刚才我们设置的 … 
push
使用 push() 的方法往数组里添加新数据的时候，我们不需要去担心索引号了 ..  新添加的数据会作为数组里的最后一个项目 … 
trackCD1.push("遥望", "温暖的家乡"); 
这样会把 遥望 和 温暖的家乡，推送到 trackCD1 这个数组里 …    再查看一下这个数组  … trackCD1;
push() 的数组元素会排在数组的最后 ….   在数组的最前面去添加数组元素，用的是 unshift();
删除
想去删除掉数组里面的最后一个元素，可以使用 pop() 方法 …   trackCD1.pop();
这个方法会返回删除掉的那个数组元素的值  …    trackCD1 …  之前排在最后的那个数组元素就被删除掉了 … 
使用 shift() 可以删除数组里第一个元素 … 使用这个方法会返回被删除的元素的值  … 
trackCD1.shift();
删除数组里的具体某个元素的值，可以使用 delete …   delete trackCD1[3];  
这行代码会删除 trackCD1 里面索引号是 3 的数据  …  不过 delete 不会删除元素，只是删除了元素的值  ..  
trackCD1 
索引号是 3 的地方，现在它的值会是  undefined ….  这也就是 delete 不会影响到数组里的元素的数量 … 
想彻底删除数组里的元素，可以用 splice() …  
trackCD1.splice(3); 
这行代码会删除掉数组里面索引号是 3 的元素 …. 另外，你可以为这个 splice 方法指定其它的参数，它的第二个参数是删除的元素的数量 … 你还可以指定新添加的数组元素 …. 
合并
合并两个数组，用的是 concat() 这个方法 …  我们先再定义一个数组 … 
var trackCD2 = ["可否冲破", "快乐王国"];
var tracks = trackCD1.concat(trackCD2);  
这样会把 trackCD1 和 trackCD2 这两个数组合并在一起，然后把合并以后的结果交给了 tracks  …. 
输入 tracks  … 会返回合并以后的结果 …


01-05-if - 先判断条件的对与错然后再决定要做的事

使用 if 语句可以先去判断指定的条件是真的 ，还是假的，然后再去执行指定的代码块。或者叫 声明块。具体的格式是这样的 … 
if 后面加上一个空格，然后是一个括号... 再加上一个空格 … 然后是一组大括号 … 
在括号里，我们可以指定要判断的条件 …  在大括号里的东西就是一个代码块  ….   比如我们判断一下天气，然后决定心情 …
weather === "晴天"  …   三个等号可以用来判断两边的值是否相等 … 
如果 weather 等于 晴天  … 要做的事情，可以放在后面这个大括号里 …   这里用一个 alert() …   在提示窗口里显示一点文字 …
alert("心情不错"); 
在这个声明块的外面，加上一个 else  … 紧接着可以再去添加一个声明块 ….  这个声明块里的代码会在 if 里的条件为假的时候去执行 … 
else {
     alert("心情糟糕");
} 
在上面，我们再去定义 weather 的值  …   var weather = "晴天"  …  
这样，如果 weather 是晴天  …  就会弹出一个 心情不错 的提示窗口 …   如果 weather 不是晴天 … 会 执行 else 后面的声明块里的代码  … 也就是会弹出一个 心情糟糕 的提示窗口 … 
保存这个脚本文件 ..   在浏览器上，会显示 心情不错 … 说明判断的条件计算出来的值是 ture … 也就是条件是真的  … 
下面我们再改一下 weather 的值  ..  改成 阴天 …   保存 …   条件计算出来的值是 false  …  因为 weather 的值已经不是 晴天了 .. 所以，会去执行 else 后面的声明块里的代码 …  显示一个 心情糟糕 的提示窗口 … 
逻辑操作符
要判断的条件可以使用逻辑操作符进一步去设置 …   比如想要弹出 心情不错 这个提示窗口，还需要再去判断一下天气的温度 … 先用一个括号把这个条件括起来 ..  
再输入一组括号，在这个括号里，可以设置其它的要判断的条件 …  temperature <= 26 … 
这两个条件之间，可以选择一个逻辑操作符 …  这里我们用两个 && 符号，表示  与 …  也就是，只有 weather 是晴天，温度小于或者等于 26 度的时候，才会弹出 心情不错 这个提示窗口 … 
不然，只要有一个条件算出来的结果是 假的 …  整个用 && 符号连接的表达式也会返回一个 false ， 假的值  …   这样就会去执行 else 后面的声明块里面的代码  … 
如果把这两个 & 符号，换成两个 | 线符号 …    它表示 或 …   也就是用它连接的两个条件，只要其中有一个是真的，整个表达式算出来的结果就是 真 的值  … 
在上面，再定义一下这个 temperature  …   temperature = 26 ;     保存  … 
else if
在 if 语句里面，我们可以使用 else if 继续去设置要判断的条件，还有对应的要执行的代码块 …    
else if (weather === "下雨") {
     alert("忧郁");
} 
这样，如果 weather 是晴天的话，会弹出 心情不错 .. 如果是 下雨  … 会弹出 忧郁 …   如果是其它的天气，就会弹出 心情糟糕 … 
如果还有其它的要判断的条件，可以继续去使用 else if 来设置  .. 
这里我们把 weather  的值改成 下雨 … 
保存 …   
弹出的提示窗口会是  忧郁  …


01-06-switch - 先判断条件的对与错然后再决定要做的事

上一个视频我们使用 if 配合 else if 可以去判断多个条件，然后根据得到的结果去做指定的事情。使用 switch 我们同样可以去判断多种不同的情况，然后再执行对应的代码。
开始用一个 switch ，空格，然后是一个圆括号 …   在这个括号里的东西就是是用来计算结果的表达式，在后面的大括号里，可以使用 case 来设置不同的结果要做的事 ...
case 后面是一个冒号 ….  另起一行，再去指定要做的事情，也就是要执行的代码 … 
它的意思就是，去看一下 switch 后面括号里的表达式的值，如果这个表达式算出来的值跟这个 case 后面的结果一致 … 就会去执行这个 case ，也就是这种情况下要做的事 … 
我们可以使用多个 case 去设置不同的情况  … 
每种情况要做的事情的最后，可以使用一个 break ， 它的意思就是，跳出执行当前这个代码块，也就是 switch 的大括号里面的这个代码块 … 
使用 break ，一但匹配了 case 后面的结果，做完了要做的事以后，就会 break 出来，不会再继续去判断是不是符合其它的 case 了。
最后，我们可以用一个 default ，来指定一个默认的行为。如果算出来的表达式的结果不符合所有的 case 指定的结果，就会去执行 default 下面指定的代码。
例子
下面我们可以使用 switch 的方法，重新去写一下根据天气弹出对应的心情窗口的代码 … 
switch (weather) {
     case "下雨":
     alert("忧郁");
     break;
     case "晴天":
     alert("心情不错");
     break;
     default:
     alert("心情糟糕");
     break;
} 
这段代码的意思就是，看一下 weather 的值，然后用 case 设置了几种不同的情况，如果 weather ，天气是天雨，就会弹出一个 忧郁 …   如果天气是 晴天，就会弹出 心情不错 … 如果是其它的天气，会弹出一个 心情糟糕  … 
在上面我们可以指定一下 weather 的值  …
var weather = "下雨”;
保存一下这个脚本文件  .. 
在浏览器上，会弹出一个 忧郁 的提示窗口 …   因为 weather 的值匹配  case 下雨 这种情况 ..   所以，会弹出 忧郁 这个提示窗口。


01-07-while 循环 - 重复地去做要做的事

在应用里面，我们经常需要重复的去做一些事件，这就是 Loop ，循环。比如用循环去处理一系列的数据，把一系列的数据使用循环的方式存储到数据库里等等。
while 和 for 就是常用的循环方法。我们先看一下 while 循环的使用方法 … 
先使用一个 while ，然后在它后面的括号里设置一下判断的条件，如果这个条件一真是真的，就会去循环地执行在后面大括号里设置的代码。
例子
下面去写几行代码来试一下 while 循环。 比如我们想在控制台上输出1 - 10 这几个数字 … 
先定义一个变量  … 再给它一个值  …   var i = 0 ;
另起一行 … 输入  while… 
var i = 0;
while ( i < 10) {
     console.log(i);
       i++;
} 
在括号里设置一个循环的时候要判断的条件，这个条件就是  i 是不是小于 10 ，如果小于的话，就会执行大括号里的东西。在每次循环要做的事情里面，首先，我们让 i 去加上 1  … 然后在控制台上输出本次循环的时候，小 i 的值  … 
浏览器在解释这段代码的时候，首先看到小 i 的值是 0 ，然后去判断在 while 后面的括号里设置的这个条件 … 小 i 是不是小于数字 10 。 0 小于10，所以，会去执行后面的代码块 … 
第一件事就是让小 i 加上数字 1 ，这个 ++ 就相当于是  i = i + 1 …   0 加上 1是1， 在控制台上输出数字 1 … 这样这次循环就结束了 … 
然后会再去判断一下 while 后面的条件 … 第二次循环的时候，小 i 的值就会变成 1 了 …  因为在上一次循环里面，我们让小 i 的值加上了数字 1  …  1 还是小于数字 10  …  所以要继续去执行代码块里的东西 …
让小 i 再去加上 1  …  这样这次循环里面，小 i 的值就会是 2   …  然后在控制台上输出它的值  … 
就这样浏览器会重复执行这个循环 … 一直到小 i 的值大于或者等于 10 为止 …  因为这样 while 判断的条件就会返回假值  …  所以循环也就会结束  … 
要注意的是 …  在循环里一定得设置一个统计或者计数的东西，就像我们这个循环里，每次都让小 i 加上 1，并且再把这个值交给小 i  …  然后在循环要判断的条件里面用到这个小 i 的值 … 
在一定的情况下，会让这个判断的条件返回假值  …  这样才能结束这个循环 …  
不然的话你设置的条件会一直是真的，就会造成循环无限次的去执行 … 
例子
下面我们可以配合之前介绍的 if 语句，在循环的时候再去做一些判断  … 比如我们想要输出 1 到 10之间的奇数 ..  也就是1，3，5，7，9 这样的数字  … 
要判断的条件可以是检查一下数字除以 2 的余数 …  一个偶数除以 2 的余数应该是 0   …   求一个数字的余数可以使用 % 这个操作符 …  
var i = 0;
while (i < 10) {
     i++;
     if (i % 2 === 0) {
          continue;
     }
     console.log(i);
} 
这个 if 语句的意思就是，看看小 i 除以 2 的余数是不是等于 0，如果等于0，说明这个数字是一个偶数  … 这样就会 continue … 继续下一次循环 ..
如果不是偶数的话，会在控制台上输出这个数字 … 
continue 在这里的的意思就是，跳过当前这次循环，进行下一次循环 … 
保存 … 到浏览器上试一下 … 
在控制台上，你会看到输出了从1到10之间的所有的奇数  …   在下一个视频里，我们再去看一下 JavaScript 里的另一种循环的方法 …  for 循环 …


01-08-for 循环 - 重复地去做要做的事

除了 while 循环，for 循环也是在 JavaScript 里面常用的循环的方法。首先使用一个 for  … 在后面的圆括号里，需要指定三样东西要，第一个是循环的初始化器，在这里我们可以设置一个用来给循环计数的变量，这个初始化器在循环中只会被执行一次 ….  
第二个东西是循环的时候要判断的条件 … 只有在这个条件是真的时候，才会去执行后面的代码  … 
第三个东西是循环结束的时候要做的事 …  通常我们可以去更新一下循环用的计数器 …    注意括号里的每样东西之间，使用分号去分隔一下 …. 
然后在大括号里，可以去添加一些每次循环的时候要做的事情 … 
测试
下面我们可以使用 for 语句，实现前面视频使用 while 循环做的事，也就是在控制台上输出 0 - 9 这几个数字 .. 
for (var i = 0; i < 10; i++) {
     console.log(i);
} 
先定义了一个小 i 变量 … 可以用它做为循环的计数器的变量 .. 给它一个初始的值是 0 ， 循环的时候要判断的条件是 ，看一下小 i 是不是小于 10 … 如果小于10，才会执行大括号里的代码 …   在控制台上输出这个小 i 的值  .. 
完成以后，会去更新一下计数器 …   让小 i 加上 1  …  这样第二次循环的时候，小 i 的值就会变成 1 了 … 1 同样小于 10 … 所以还会去执行大括号里的代码  … 在控制台上输出小 i 
直到小 i 的值大于或者等于 10  的时候 …   这个循环才会结束  … 
保存 ..   在浏览器上看一下 … 
你会发现，在控制台上，会输出从 0 到 9 这些数字 … 
测试
我们经常会用 for 循环，去处理数组...  比如输出数组里的所有的项目 …  下面我们去试一下 … 
先去定义一个数组 ….
var week = ["星期一", "星期二", "星期三", "星期四", "星期五", "星期六", "星期天" ];
week 这个数组里面，包含了一些项目，从星期一，到星期天 … 
下面再去写一个 for 循环，在控制台上输出这个数组里的所有项目..   
for (var i = 0; i < week.length; i++) {
     console.log(week[i]);
} 
循环的时候，我们判断的条件是，看一下这个小 i 的值，是否小于数组的长度 …   这个数组的长度应该是 7 。因为它里面包含了 7 个项目 … 
循环要做的事就是输出数组里的项目的值  …  使用数组的名称，加上一个方括号配合数组项目的序号可以输出对应的项目的值  … 
保存 …  
回到浏览器 …  刷新一下 …
在控制台上，会显示 week 这个数组里面的所有的项目的值  ….


01-09-function 函数 -  一块可以执行的代码

一个函数就是一块带名字的代码。你可以在应用里面重复的调用或者执行事先定义好的函数去做一些事情。
定义一个函数可以使用函数声明的方式，也可以使用函数表达的方式。先来看一下用函数声明的方式去定义一个函数。
一个函数分成四个部分 … 首先是 function 这个关键词 …  表示我们要定义一个函数 ….  后面加上一个空格，接着是这个函数的名称 …  使用这个名称我们可以在应用里去调用这个函数 … 
然后在圆括号里可以指定这个函数接受的参数 …  这些参数可以作为函数内部的变量 … 在调用函数的时候，我们可以指定这些参数的具体的值  … 定义函数的时候，这个参数叫 形式参数 …  parameter  … 调用函数的时候指定的那个参数的值，是实际参数，英文是 argument .. 
在后面的大括号里，是这个函数要做的事情，也就是一些 JavaScript 的语句 …


01-10-定义一个函数

下面我们可以去定义一个函数  …     这个函数的我们叫它 alertMessage() …   这个函数没有指定参数 …   在函数的主体部分，使用了一个 JavaScript 内置的 alert() 函数。去弹出一个显示 hello 的提示窗口 … 
function alertMessage () {
     alert(‘hello!');
}
在这里我们只是定义了一个函数，想要使用这个函数，我们得去执行它 …   执行函数很简单，直接使用这个函数的名称 … 后面再加上一个圆括号就行了 ..  
alertMessage();
保存 …  到浏览器上去看一下 …  你会看到，在浏览器上弹出了一个 hello 的提示窗口  … 
参数
下面我们再去改造一下这个函数 … 给它加上一个参数  … 然后在函数的内部去使用个参数 …   
在这个函数的括号里，我们可以定义函数的参数  ….  给它一个叫 message 的参数 …. 参数的名称，我们可以随便怎么去定义 … 
然后在函数的内部 …  去掉 alert() 里面的这个具体的字符串的值  …  然后用函数的参数代替它 … 
function alertMessage (message) {
     alert(message);
}
这样我们在调用 alertMessage() 这个函数的时候，为函数指定 message 这个参数的具体的值 … 这个参数的值也会用在函数的主体里面 … 
alertMessage("您好"); 
这里的 您好，就是我们为 message 这个参数指定的值 …  message 是 parameter ，形式参数， 您好就是 argument ，实际参数。
在函数里，我们用了 alert() 去显示 message  参数的值  .. 所以，它应该会弹出一个 您好，的提示窗口... 
保存 …   回到浏览器  …    会弹出一个 您好 …   
再去修改一下调用函数的时候指定的参数的值  ….   改成 hola …   保存 …
这次浏览器会弹出一个 hola 的提示窗口 …


01-11-函数表达式

下面我们再去看一下定义函数的另一种方式，使用函数的表达式 …  
我们可以使用函数表达式去改造一下上一个视频里，使用函数声明的方式定义的这个函数 …    
var alertMessage = function (message) {
     alert(message);
}
alertMessage(“hola"); 
其实这里我们使用了一个匿名的函数，anonymous function ...   就是一个没有名字的函数 … 然后把它交给了 alertMessage  …   在调用这个函数的时候，可以使用表示这个函数的 alertMessage  .... 后面加上一个圆括号 ...   alertMessage()  … 
匿名函数有时候用起来会非常方便 …   这里你也可以为函数去添加一个名字 …  这样在函数的内部，你可以调用它本身 … 
保存  …. 
回到浏览器 …  同样会显示一个 hola 的提示窗口 …


01-12-变量的范围

这个视频我们再去理解一下变量的应用的范围。在函数以外声明的变量叫做全局变量 … global variable  在函数内部声明的变量叫内部变量 …  local variable。
在函数的内部可以去使用全局变量 … 不过在函数以外，就不能访问到在函数内部去定义的变量了 … 
下面我们可以去做一个小实验 … 
先去掉 message 这个参数 …  然后在函数的外边儿去定义一个叫 message 的变量 … 再给它一个值  … 
再去掉调用函数的时候，指定的参数  …  
var message = "Hello";
var alertMessage = function () {
     alert(message);
}
alertMessage(); 
保存 …   
会弹出 Hello 这个提示窗口  …  这个 Hello 是来自函数以外的一个变量的值  … 说明在函数的内部，可以访问函数外边儿的变量 …. 
下面我们在试一下在函数的内部定义一个变量  … 
var message_1 = "您好";
然后在函数的外部，用一个 alert(message_1)   …  试着弹出在函数内部定义的 message_1 这个变量的值 …  注释掉，调用 alertMessage 这个函数的代码 ... 
然后保存 … 
回到浏览器 ... 在这里并没有弹出提示窗口 …  在控制台 …   你会看到一个错误 … 提示 message_1 还没有定义 … 
这是因为，在函数的外部，不能访问到在函数内部定义的变量   ….  


01-13-Object 对象 - 能存数据 能做事

Object，翻译过来就是 对象 ，一个对象其实就是一样东西。如果用现实生活来比喻对象的话，一个苹果是个对象，一辆汽车也是个对象。每种对象都有各自的一些特性，比如苹果的颜色，味道，大小 …  颜色是红的还是绿的，味道是甜的还是酸的 … 这些特性在 JavaScript 的对象里，叫做对象的属性，英文是 property … 
对象里的属性相当于是对象里面的变量。
另外对象还有一些行为或者功能，比如汽车可以前进和后退， 相机能拍照，手机能打电话 …  这些行为在 JavaScript 的对象里叫做方法，英文是 method … 
有时候这个方法也会称为是对象里的属性。
在 JavaScript 里面，除了数字，字符串，布尔值，null，还有 undefined 这些值以外，其它的值都是 对象  …  不过数字还有字符串，他们看起来也像是对象 … 因为它们也有属性，还有方法 …


01-14-创建一个对象

下面我们可以去创建一个对象  …  使用字面形式去创建对象非常简单 …  输入一个 var  … 后面是想要创建的对象的名称  …  然后是一个等号 … 等号的右边是一组花括号 …
var beyond = {};
这样我们就创建了一个空白的对象，叫做 beyond  …    beyond 是我最喜欢的一支摇滚乐队的名字 .. 
设置对象的属性可以使用对象名，加上点的形式 ... 点的右边是属性的名字   …. 
beyond.formedIn = '1983';
这里的 formedIn 组队的时间， 就是为 beyond 这个对象添加的一个属性 …   它的值我们设置成了 1983 ..    
除了这种用 . 的形式设置属性以外，我们还可以使用方括号的形式 …  像这样 … 
beyond['foundedIn'] = "香港"; 
方括号里面的东西就是对象的属性 … 注意它的周围要用一组引号，单引号或者双引号都可以 ..   在等号的右边是为这个属性设置的值  …  
现在 beyond 这个对象里面就已经包含了两个属性 …  我们把它输出到控制台上看一下 …
console.log(beyond);
保存 … 打开控制台 … 
你会看到，输出了这个对象  … 它的里面有两个属性 …  formedIn … 组队的时间是 1983 年，还有 foundedIn … 成立于 香港   … 
使用在控制台上显示的这种形式，我们同样可以去设置对象里的属性 ….  在这个大括号里，先是一个属性的名称  … 加上一个冒号 … 冒号的右边是对应的属性的值  ….  然后每一个属性之间，使用一个逗号分隔开 … 
（#js）
直接在创建对象的时候，就去设置它的属性  …   
var beyond = {formedIn: '1983', foundedIn: '香港'}; 
这样跟前面单独设置属性的方法效果是一样的 …  
访问属性的值
访问对象里的属性的值，跟单独设置属性的方法类似 … 可以用 . 的形式 … 或者 [] 的形式 … 
我们可以直接在控制台去试一下 … 
输入 beyond.formedIn 会返回这个属性对应的值  …  1983     …    再试一下用方括号的形式访问属性的值  ... beyond[“foundedIn”]  ….  同样会返回对应的属性的值  …  香港 …


01-15-对象里的数组

对象里的属性的值，可以是任何类型的数据  ...  字符串，数字，可以是数组，或者其它的对象 …  下面我们去给 beyond 对象添加一个 artist 属性 … 它的值会是一个数组 …  数组里的项目就是 beyond 乐队的成员的名字   .. 
var beyond = {
     artist: ['黄家驹', '黄家强', '黄贯中', '叶世荣'],
     formedIn: 1983,
     foundedIn: '香港'
}; 
在控制台 … 你会看到 artist 这个属性是一个 Array … 也就是 数组  … 数组里面有四个项目 …  （#打开数组）
想要访问对象里的数组属性 … 可以这样做 　…  对象的名称 … 加上一个点 … 然后是属性的名称  …  后面是一个方括号 … 在方括号里面，可以指定数组里的项目的索引号，也就是项目的编号 … 或者叫顺序号 ….
输入 0  … 回车 … 会返回 artist 这个属性里面的第一个项目 …    因为数组项目的索引号是从 0 开始的 …. 
再改一下这个索引号 … 改成 1   …   会返回 artist 属性的第二个项目 …


01-16-更新与删除对象里的属性

更新对象里的属性的方法跟单独设置对象的属性是一样的 …  比如我们想更新一下 foundedIn 这个属性的值 …
beyond.foundedIn = "中国香港"; 
再输入 beyond.foundedIn; 
会返回这个属性新设置的值  …  中国香港  … 
删除对象里的属性可以使用 delete … 
delete beyond.foundedIn;
会返回 true … 说明成功的删掉了 beyond 对象的 foundedIn 这个属性 …   再去访问一下这个属性 … 
beyond.foundedIn;
返回 undefined .. 未定义 ….    再输入 beyond … 
foundedIn  这个属性现在已经不在 beyond 这个对象里面了 …


01-17-为对象添加方法

在对象里面除了可以表示数据的属性，还有可以做事的属性，也就是函数类型的属性，这类的属性在对象里叫做方法，英文是 method  …
给对象添加方法跟使用函数表达式定义函数是差不多的，只不过我们需要指定对象 …   比如单独去给对象添加方法可以这样 …. 
先是对象的名称，加上一个点   …  然后是属性的名称 .. 因为这个属性是个方法，所以也可以说是方法的名称  …  等号右边可以使用一个匿名的函数 … 
这里我们为 beyond 这个对象添加一个叫 showArtist() 的方法 … 它的功能就是，可以在页面上输出乐队的所有的成员名字 … 
beyond.showArtist = function () {
     for (var i = 0; i < this.artist.length; i++) {
          document.writeln(this.artist[i]);
     }
} 
在这个函数里面，用到了 this 关键词 … 这个关键词在不同的情境下面代表的东西都不太一样 … 在这里，它代表的是对象本身 … 也就是 beyond 这个对象  …. 
我们用了一个 for 循环 … 在页面上输出 beyond 对象里的 artist 属性里的所有的项目 …   这里我们用的 writeln() 其实就是 document 这个对象的一个方法 … 
document 对象表示的就是网页 … 
调用对象的方法，可以使用对象的名称，加上 .   然后再加上对象的方法的名称  … 
beyond.showArtist(); 
保存 …     回到浏览器 … 
在页面上，会显示  beyond 这个对象的 artist 属性里面的所有的东西 ….


01-18-循环输出对象里的属性

如果你想循环的输出一个对象里面的所有的属性，我们可以使用 for … in 循环 … 下面我们可以去试一下 …
先定义一个变量  …    var property;
for (property in beyond) {
     console.log(beyond[property]);
} 
在括号里，用 property 作为对象的属性的名称  …. 然后是一个 in  … in 的后面是对象的名字 …    for in 循环可以枚举对象的所有的属性  … 
这里我们只是简单的把对象的属性的名称，还有对应的值都输出到了控制台上 …  如果你只想输出数据相关的属性，而不是对象的方法 …  可以用一个 if 语句，判断一下属性的类型是不是 function … 如果是 … 就说明这个属性是对象的方法 … 
判断值的类型，可以使用 typeof … 
if ( typeof beyond[property] !== 'function') {
          console.log(property + " = " +beyond[property]);
} 
这个 if 语句的意思就是，如果对象的属性的值不是 function …  这里的 ! 号表示否定的意思 … 
保存 … 
现在，控制台上就不会再显示对象的方法了 ….


02-01-DOM - 操纵文档的接口

使用 JavaScript 我们可以更改网页文档的结构，样式还有内容。不过我们并不能直接使用 JavaScript 来做这些事，而是通过一些接口，这些接口就是 DOM，DOM 的英文全称是 Document Object Model … 文档对象模型。
也就是我们通过这些接口来写 JavaScript 的代码，这些代码通过 DOM 这个东西去更改文档的结构，样式还有内容 …   注意 DOM 并不是程序的语言，而是几乎所有的浏览器都遵守的一套规范 … 
一个网页就是一个文档，这个文档可能是显示在浏览器的窗口里 … 或者也可能是文档的源代码  … 不管怎么样，它们都是同一个文档  … DOM 其实提供了另一种表示，存储，还有操纵这个文档的方法 …. 
也就是用对象来表示文档，DOM 定义的所有的用来操纵文档的属性，方法，还有事件都组织在了对象里面 ….  文档里面的所有的元素，<head>，<body> <ul> ，ul 里面的 <li> 等等，这东西都是这个文档对象里的一部分。


02-02-文档树

想要使用 DOM 和 JavaScript 来修改网页 .. 我们需要先理解一下 DOM 的树形结构 ….  这是一个很简单的网页 …   一组 <html> 标签 … 里面是 <head> 标签，还有 <body> 标签 …  这两个标签里还包含一点内容 … 
如果使用 DOM 的树型结构来表示一下这个简单的网页应该是这样的 …. 
文档的根源 … 也就是文档的 root ，是 document 这个对象 … 它表示文档本身 … 
然后是 <html> 标签  …  HTML 的标签在这里叫做元素，英文是 Element  ….  每个元素对于这个文档来说都是一个节点 ..  英文叫 node ，节点有很多类型，比如，HTML 标签是元素节点，标签里的属性是属性节点，标签里的文字是文本节点 … 
DOM 里面定义了 12 种类型的节点 ..  文档里的注释也算是一种节点 … 不过常用的就是元素，属性，还有文本类型的节点 … 
html 元素下面有两个子元素 head 元素，还有 body 元素 …  
对于 head 和 body 来说，html 元素是它们的父辈，也可以说是它们的父节点 parentNode  … 
head 元素里面有一个元素类型的子节点， 就是这个 title 元素，title 元素里面还包含一个文本节点 …  Coldplay 乐队 
同样， body 元素也包含一些元素类型的子节点，h1 元素，还有 p 元素 .. 
这个 h1 和 p 的关系是兄弟，因为它们有一个共同的老爸，就是 body 元素 … 
head 和 body 也是兄弟，它们的老爸是 html 这个元素 …  
结束
了解了这些以后， 我们就可以使用 DOM 提供的方法和属性来操纵文档了，在下面的视频里我们再去看一下  ….


02-03-获取文档中的元素 getELementById

想处理文档里面的元素，我们得先获取到它。DOM 提供了几种方法可以获取到文档中的元素，下面我们先看一下 getElementById …  
这个方法可以用元素上的 ID 来定位元素  …   在浏览器上打开网页以后 …. 再打开 Chrome 浏览器的开发者工具 …    右键点击页面 … 审查元素  … 
先打开 Elements 选项卡 ..  这里我们可以看到文档里的元素 …     
getELementById
在这个 h1 元素里面，我事先定义了一个 ID  … page-title …  想要获取到这个 ID 所在的元素，可以这样 …  先输入 document …  document 是代表这个文档的对象  …  然后是 getElementById ..  这里要注意这个方法的名称的大小写 …   
在括号里，输入一组引号 … 引号里面就是元素的 ID … 
document.getElementById('page-title'); 
回车 …   在控制台上，会直接返回获取到的结果  …   
getElementById 会返回一个对象 …  我们可以给这个对象起个名字 … 这样在后面，可以直接使用这个名字表示这个对象 …  
var pageTitle = document.getElementById('page-title'); 
再输入 pageTitle  ….  得到的是一样的结果  ..


02-04-getElementsByTagName

下面我们可以再试一下另一种获取元素的方法 … getElementsByTagName  … 它可以使用 html 标签的名称来获取到元素 … 
比如我们要找到网页上所有的 li 元素 … 
document.getElementsByTagName(‘li’);
注意这里是 get elements ，element 后面有个 s ，是复制的形式 …   不是 get element  … 
在括号里，用一组引号 …  引号里面是标签的名称  … 
你会看到，返回的结果就是文档里面的所有的 li 元素 ..   同样我们可以命名一下得到的这个对象  …  它其实是一个数组对象  … 
var list = document.getElementsByTagName('li');
这样，想要得到这个数组里的第一个项目 … 可以输入 list[0];
输出第二个项目，可以使用 list[1];


02-05-querySelector 与 querySelectorAll

获取到元素，除了前面介绍的 getElementById 还有 getElementsByTagName 以外 ...  还有两种比较灵活的选择元素的方法 …  querySelector 和 querySelectorAll  … 它们可以像使用 CSS　选择器那样来选择元素　… 
querySelector 会返回找到的第一个元素 …  querySelectorAll 会返回所有找到的元素 … 
在这个文档里面 ，ul 标签上定义了一个 .artist-list 类 … 我们可以使用这个类来选择一些元素 …. 
document.querySelectorAll(‘.artist-list li');
在括号里输入选择器 …  这里我们要选择的是 .artist-list 这个类下面的 li 元素 …   
回车 …   结果里面，会包含所有的 .artist-list 这个类下面的 li 元素 …  
我们可以再试一下 querySelector … 
document.querySelector(‘.artist-list li');
querySelector 只会返回找到的第一个结果  …


02-06-访问元素的属性

获取到文档里面的元素以后，我们就可以去做很多事情 … 比如输出或者设置元素里的内容，找到它的兄弟或者老爸等等 …  这个视频我们去试一下 … 
先选中这个文档里面的 h1 元素 … 
下面我们在 Properties 这个选项卡里，再去查看一下个 h1 元素的一些属性 …   这里也很多有用的属性  …  childNodes 里面是 h1 的所有的子节点 …  
innerHTML 里面是 h1 元素内部的 HTML 标签还有内容 …  innerText 是 h1 里面的文字  …  你可以对照这个列表，去找到自己想要的东西 …
下面我们去试几个 … 
先用上一个视频里介绍的方法，获取到这个 h1 元素 … 可以使用 getElementById …  再给获取到的结果起个名字 … 
var pageTitle = document.getElementById(‘page-title');
然后输入 pageTitle.nodeName …  得到的是这个元素的节点的名称  … 
想要输出它里面的文字，可以使用 pageTitle.innerText … 
我们还可以找到 h1 的父节点 …  pageTitle.parentNode
它的父节点是 body 元素 …   同样我们可以找出 pageTitle 的兄弟元素 …   比如我们要得到它的上一个兄弟  …
pageTitle.previousElementSibling 
返回的结果是 null ，因为它没有上一个兄弟元素 … 但是它有下一个兄弟  …  也就是这个 p 元素 …
pageTitle.nextElementSibling
得到的就是这个 p 元素…   想要输出这个兄弟元素里面的文字 … 可以这样 
pageTitle.nextElementSibling.innerText
输出的就是 h1 元素的下一下兄弟元素， p 元素里面的文字 … 
TEST2
下面我们再找到这个带有 .artist-list 类的 ul 元素 …   var artistList = document.querySelector(‘.artist-list');
这个元素节点里面有一些子节点 …   使用它的 childNodes 属性可以查看它的所有的子节点 … 
artistList.childNodes 
这些子节点包含了元素类型的节点，还有文本类型的节点  ….   想知道一共有多少个子元素类型的节点 … 
artistList.childElementCount 
返回的结果是 4，一共有四个 li 元素 …
想得到它的第一个元素类型的子节点，可以使用 firstElementChild 这个属性 …
artistList.firstElementChild 
后面再加上一个 innerText ，可以只输出这个子节点的文字内容 ..   
artistList.firstElementChild.innerText; 
想重新设置一下这个子元素里的文字，可以在后面加上一个等号 …   后面是新的内容 … 
artistList.firstElementChild.innerText = '克里斯·马丁'; 
除了 firstElementChild ，还有一个 lastElementChild 属性 ..
artistList.lastElementChild  
它会返回最后一个元素类型的子节点 ..


02-07-在文档中创建并插入新的节点

我们可以获取到文档里面的节点，修改节点的内容，我们还可以创建新的节点，然后把它插入到文档里面 …   创建新的节点，可以使用 createElement() 这个方法来创建元素类型的节点 …
createTextNode() 可以创建文本类型的节点 … 
然后用 appendChild() ，或者 insertBefore() 把节点插入到指定的地方 … 
测试 
下面我们可以去试一下 …  在这个列表里面添加一个新的列表元素 …  
先去创建一个元素类型的节点 …   给这个新创建的节点起个名字 …  
var newMember = document.createElement(‘li');
这样我们创建了一个 li 元素节点 ….  
下面我们给它里面添加点内容 … 可以直接设置它的 innerText 属性 … 或者，我们也可以创建一个文本节点 … 再把这个文本节点插入到新创建的 li 元素里面 …
var newMemberText = document.createTextNode('张三'); 
创建文本类型的节点，可以使用 createTextNode() …  节点的内容是 张三 … 
下面可以使用 appendChild() 把这个文本节点，添加到之前创建的那个 li 节点里面 … 
newMember.appendChild(newMemberText);
最后，我们需要把这个创建的 li 元素，再添加到文档里的某个地方  …  
先找到这个 .artist-list 类所在的元素 … 再去调用它的 appendChild() 方法 …  要添加的东西是 newMember … 
document.querySelector('.artist-list').appendChild(newMember); 
现在， 文档上会出现新列表里的内容 ….    
appendChild 只能把它作为最后一样东西插入到指定的节点里面。如果你想把它插入到别的地方 … 可以使用 insertBefore() …  
在下面的视频里我们再去看一下这个方法。


02-08-insertBefore - 在指定位置插入节点

我们先用一个 removeChild() … 删除掉刚才插入的东西 .. 
document.querySelector('.artist-list').removeChild(newMember); 
我们可以先把获取到的 .artist-list 这个类所在的元素起个名字 …   var artistList = document.querySelector('.artist-list');
然后调用 artistList 的 insertBefore() 这个方法 …
artistList.insertBefore(newMember, artistList.firstChild) 
这个方法有两个参数 …  第一个参数是要插入的内容 …   第二个参数是插入的位置  …   我们可以把新内容放在 artistList 的第一个子节点这里 … 
回车 …    现在， 新添加的列表项目，会在乐队成员列表的第一的位置上 … 
下面我们可以再试一下这个 insertBefore() 方法 …   在 ul 元素的上面添加一个标题元素 …   先去创建这个元素 … 
var bandMember = document.createElement('h3')
再设置一下它的内部的文字 …   bandMember.innerText = ’乐队成员：’;
再去把这个 bandMember 插入到 ul 元素的上面 ..  也就是新添加的这个 h3 元素，跟这个 ul 元素是兄弟  …  所以我们需要在这个 ul 元素的父节点去应用这个 insertBefore() 方法 …   
插入 bandMember 的时候，参考的那个元素，应该是 乐队成员列表 的上一个兄弟节点 …. 
artistList.parentNode.insertBefore(bandMember, artistList.previousSibling) 
这行代码的意思就是，在 乐队成员列表  的父节点上，把 bandMember ，也就是我们创建的这个 h3 元素，插入到 乐队成员列表 的上一个子节点这个位置上 … 
在文档上，你会看到，这个 h3 元素，会显示在列表元素的上面 ….


03-01-Event - 处理发生的事情

页面载入成功以后，用户用鼠标点击了网页上的某个元素，滚动鼠标，提交了表单，按下键盘上的按键，这些动作都会触发相应的事件 …  在发生这些事件的时候，你可以让应用去做执行一些动作 … 
可以使用的事件非常多，一般只要你能想到的事情，都会有一个对应事件 …    你可以自己决定要用哪些事件。比如你想在点击某个按钮的时候，弹出一个页面或者一小段提示的文字  …  
这样在应用里面，你就可以使用点击事件，然后去写一个事件的处理程序，也就是，在发生这个事件的时候，你想要做的事儿，在这里就是弹出页面或者出现提示文字  … 
在这个地址里面，你可以找到很多可以用在应用里面的事件 …


03-02-处理事件的方法

下面我们去看一下处理事件的几种方法，常用的有三种方法 …  可以直接在元素上使用事件的属性，还有可以使用元素的事件处理属性，还可以使用 addEventListener() 这个方法为元素绑定事件.... 
先来看一下这个网页，很简单，页面上只有一个用链接做的按钮 …    打开 Chrome 浏览器的开发者工具 …  然后选中这个链接按钮 .. 
在右边这个窗口里，打开 Properties 选项卡，查看一下这个元素的属性  … 
在它的属性列表里，你会发现一些以 on 这个单词开头的属性 … 这些就是事件的处理程序  …  on 的后面，一般就是事件的名称  … 比如这个 onclick 会在用户点击这个元素的时候去调用 …. 对应的事件的名字就是 click .... 点击事件。
下面还有 onmouseover … 把鼠标指针放在这个元素上面的时候会执行这个处理程序 …    还有 onmouseout … 鼠标指针离开这个元素的时候会去执行它 … 
这些处理程序都会在发生某个特定的事件的时候去执行 … 
直接的属性
我们先看一下直接在元素上使用这些事件属性的方法去处理发生的事件 ….  先用编辑器打开这个网页 …   找到这个链接按钮元素 …   比如我们想在点击了这个按钮的时候，去做点事  …  
可以使用 onclick 属性  …   这个属性的值就是当在这个按钮上发生了点击事件的时候，要做的事情 …  这里只是简单的在控制台上输出一点文字 …
onclick=“console.log(’被点了！')"
注意这里如果要用到引号的话，应该使用单引号 …  因为双引号里面可以包围单引号 … 
下面我们再添加一个事件属性 …  用一个 onmouseover …  它会在鼠标指针放在这个元素上面的时候去执行 … 
onmouseover=“console.log(’谁在上面？')" 
可以再去添加一个 onmouseout … 鼠标离开的时候会去执行它 … 
onmouseout=“console.log(’离开了')" 
这样，当我们把鼠标放在这个链接按钮上的时候，会在控制台上显示 谁在上面 …  点击的时候 … 会显示 被点了 … 离开的时候，会显示 离开了 …  
保存一下 …   回到浏览器 …   刷新一下 …  打开 控制台 …
鼠标放在这个按钮上 … 触发了 mouseover 事件 … 在控制台上会显示 谁在上面 …    点击鼠标  …  触发  click 事件 …  要做的事就是在控制台上显示  有人点我了 …   鼠标离开 … 触发 onmouseout 事件 …  在控制台上显示 离开了 … 
事件处理程序
（#返回index.html）
这种直接在元素上添加事件属性来处理事件的方法比较适合去执行简单的动作 …   这种方法也会让文档的代码变得混乱 …. 我们应该把程序的代码跟 HTML 的代码分离开 … 
在下面的视频里我们再看去看一下使用事件处理程序还有绑定事件的方法来处理事件 …


03-03-用对象的事件处理程序处理发生的事件

事件处理程序其实是元素对象的属性 …. 发生某些事件的时候，会去执行相应的处理程序 …. 上一个视频我们介绍了查看这些事件属性名称的方法 … 
先打开网页嵌入的脚本文件  ...  在这个文件里，首先我们可以去获取到想要添加事件处理程序的元素 …  
var btn = document.querySelector('.btn'); 
因为这个文档里面只有一个 .btn 类的元素，所以，找到的结果应该就是这个按钮 ..  然后给它起了个名字，叫做 btn …   下面我们再去设置一下这个对象的相应的事件处理属性 …  
先设置一下它的 onclick 这个属性 …  
btn.onclick = function () { console.log('被点击了！'); }; 
这个属性的值是一个函数 …我们用了一个匿名函数。这个函数要做的事，就是在控制台上输出 被点击了 这几个字儿 … 
用类似的方法， 我们再设置一下 onmouseover 还有 onmouseout 这两个属性 … 
btn.onmouseover = function () { console.log('谁在上面？'); };
btn.onmouseout = function () { console.log('离开了！'); }; 
保存一下  … 回到浏览器 …    把鼠标放在这个按钮上 …   在控制台上会显示  谁在上面 …  点击这个按钮 … 会显示 被点击了 …   鼠标离开的时候 …  会显示 离开了 …
你可以使用类似的方法，去设置这个元素对象的其它的事件处理器来处理其它的事件 …   
window onload
window 这个对象有个比较常用的 load 事件 …  文档里面的所有的资源都准备好以后会触发这个 load 事件  … 也就是 文档里的文字，图片已经都显示了，使用的样式表和脚本文件也已经下载好了 … 这个时候会触发 window 对象的 load 事件 … 
一般我们会让应用的代码在这个事件发生以后才去执行 … 这样能保证这些程序的代码可以正常的执行 …  
输入 window.onload ….  使用 window 对象的 onload 这个事件处理程序 … 它会在 window 对象发生 load 事件的时候去执行 … 
window.onload = function () {}
然后把刚才添加的那些程序代码放在这里面 …. 
这样，当文档准备好以后，触发了 window 对象的 load 事件的时候，才会去执行这些代码  … 
在下面的视频里，我们可以再去使用绑定事件的方法去处理一下这几个事件 …


03-04-addEventListener - 为对象绑定事件

给对象绑定一个事件，事件发生的时候去执行指定的函数，这就是 addEventListener()  这个方法的作用。  从这个方法从字面上就大概知道它是做什么的 …  add 是添加，event 是事件 … listener 是监听器 … 加到一起就是添加事件的监听器 …   也就是去为指定的目标添加一个可以监听指定事件的东西 … 
使用 addEventListener()  的方法就是，让想要绑定事件的对象调用 addEventListener()  这个方法 …  这个方法里面包含三个参数 … 
第一个参数是一个字符串，也就是事件的类型，也可以说是事件的名称 …   
第二个参数是，事件发生以后要调用的函数 …   在这个函数里，我们可以去定义事件发生以后要做的一些事儿 … 
第三个参数是事件的捕获，这是参数的类型是布尔值，默认是 false …  也就是不使用事件捕获，以后面的视频里我们再去介绍一下这个参数的意思 … 
测试
先注释掉前面添加的这些事件处理程序 .. 
 要添加的事件监听器的目标是 btn ..  后面加上一个点，再加上 addEventListener …   在它的第一个参数里，指定为 btn 绑定的事件 …  
先试一下点击事件 … 点击这个事件的名称是 click …  一般去掉事件处理程序前面的 on 就是这个事件的名称  … 
用逗号分隔一下 … 第二个参数是发生这个事件的时候，要调用的函数 …  输入 showMessage …  在后面我们可以定义这个函数要做的事儿 …   第三个参数我们设置为 false  … 
btn.addEventListener('click', showMessage, false); 
这样点击 btn ，也就是这个链接按钮的时候，会触发 click 事件 …  这样就会调用 showMessage 这个函数 …
下面我们再去定义 showMessage 这个函数 …  
function showMessage () {
     console.log('被点击了！');
 } 
这个函数要做的就是在控制台上输出 被点击了 这几个字儿 …   保存一下 … 回到浏览器 … 
点一下这个链接按钮 … 
浏览器会在这个按钮上触发 click 事件 …   因为我们绑定了这个事件在这个按钮上 …  所以会去执行指定的 showMessage 函数  … 在控制台上，显示  被点击了  …. 
事件对象
事件发生的时候，会返回一个事件对象，这个对象里面会包含一些很有用的信息  … 事件发生时间，目标 …  事件的类型等等 …  
把这个对象传递给处理事件的 函数  … 在这个函数里，我们就可以使用事件对象里的内容了 … 
（#js）
在这个 showMessage 函数里，设置一个参数  …  这里我们用 event 这个名字来代表事件对象  …  有时候，你也经常会看到用 evt ，或者一个字母  e 来表示这个对象  … 
再把这个对象的内容输出到控制台上看一下 …  
console.log(event);
保存  …  回到浏览器 … 点击 按钮 ….   在控制台会输出事件返回的这个对象  … 
打开这个对象  ….  这里面的这些属性在函数里都可以使用 ..     比如我们使用这个 type 属性  … 事件的类型 … 
我们可以给这个按钮绑定多个事件  …  事件发生的时候，去调用同一个函数 … 在这个函数里，可以用到这个事件对象的类型这个属性去判断一下 … 再去决定要做的具体的事 …


03-05-事件的传播

事件是可以传播的。比如这里有一个图像列表， 列表用的是 ul 无序列表，每个列表项目里面包含着 img 标签  …  如果说，你想在用户点击列表里面的图像，去做些指定的事件的话 … 我们并不需要去单独为每一张图片都去绑定一个点击事件 … 
我们可以在这个 ul 无序列表上去添加一个点击事件的监听器 .. 这样在点击列表里的项目的时候，比如点击这个图片 …  也会触发调用在事件监听器里指定的函数 …  下面我们去试一下 … 
测试
（#js）
先获取到这个 ul 无序列表  … 在这个列表上添加了一个 list-group 类 … 可以用这个类去获取到这个 ul 元素 …
var listGroup = document.querySelector('.list-group'); 
再给它一个名字 …  叫做 listGroup … 下面我们去为这个 listGroup 添加点击事件的监听器 …
listGroup.addEventListener('click', showMessage, false);
               function showMessage (event) {
                console.log(event.target.alt);
               } 
在事件发生以后调用的函数里面，我们用到了事件的对象的 target 属性里的 alt 属性 …  它会返回在图像标签上设置的 alt 属性里的内容 …
保存 …  回到浏览器 …    点击 图像 … 
在控制台上会输出图像标签里的 alt 属性里的内容 …
这里，我们并没有为每一张图像分别去添加一个事件监听器，而是在它们的共同的容器上，也就是 ul 这个元素上添加了一个点击事件的监听器 … 
因为事件是会传播的 … 
默认的事件传播的方式有点像是往上冒气泡，这种传播方式就是从下到上，或者说从里到外去传播 ….   比如这里，如果点击图像 … 事件会从 img 标签向上传播到 li 标签  …  再从 li 标签传递到 ul 标签  … 
如果在 ul 标签上注册了点击事件的监听器。就会去调用监听器里的指定的函数 …


03-06-更改事件传播方式

事件，还有一种传播方式，叫做事件的捕获方式 ….  这样，在点击图像的的时候，事件会从 ul 标签传递到 li 标签  … 再从 li 标签传递到 img 标签上 … 
使用 addEventListener() 添加事件监听器的时候，设置它的第三个参数，可以改变事件的传播方式 …  设置为 false ，事件是用冒泡的方式传播  …. 设置为 true … 事件会用捕获的方式传播 … 
下面，我们单独去给一张图像绑定一个点击事件，然后来看一下这两种事件传播方式的区别 …  （#index.html）
我们可以在这个 Lost 图像上，先添加一个 ID …   然后使用这个 ID 去获取到这个元素 … 再为这个元素绑定点击事件 … 
var lost = document.getElementById('lost');
 function showAnotherMessage (event) {
                console.log('点击了：' + event.target.alt);
  } 
再简单修改一下 …
               listGroup.addEventListener('click', showMessage, false);
               function showMessage (event) {
                console.log('点击了：UL ');
               } 
这样点击列表里面的任何的图像，都会在控制台上显示一个 点击了 UL …     然后在点击 lost 这张图像的时候，会在控制台上显示 点击了 Lost … 
现在，这两个事件监听器设置的事件传播的方式都是 冒泡 的方式 …   先保存一下 … 
回到浏览器 … 
随便点击一列表里的一张图像  …   在控制台上会显示，点击了 UL … 
再点击一下 LOST 这张图像 …     控制台上，首先会显示 点击了 Lost …   因为现在事件的传播方式是从下往上传播的 …  所以，点击了 Lost 这个图像，触发了 click 事件 … 事件会向上传播到 li 标签 …  再从 li 标签传播到 ul 标签  … 因为在 ul 标签上也设置了一个事件的监听器 … 它会在控制台上会显示 点击了 UL … 
（#index.html）
下面我们再去修改一下事件的传播方式  …  找到 addEventListener … 把它们的第三个参数设置为 true  …  
保存  .. 回到浏览器 … 刷新 ….
点击 Lost 这张图像 …  你会发现，这次会先显示 点击了 ul …. 然后是 点击了 lost …     因为现在事件的传播方式是捕获的方式 … 
事件会从外向内传播 …  点击图像的时候 …   会先触发在 ul 元素上添加的点击事件的监听器里指定的动作 …  然后这个事件再传播到 li 元素  … 再从 li 元素传播到  img 元素上 ..


03-07-停止传播事件

使用事件对象的 stopPropagation() 方法，可以停止事件的传播 ..  （#index.html）
在这个为 ul 元素添加的事件监听器调用的函数里面，添加一个  event.stopPropagation(); 
保存 …   回到浏览器 … 
点击 Lost 这个图像 …  你会发现，控制台上只会显示 点击了 UL ..   因为现在事件是从外向内传播的 …  我们在为 ul 元素上添加的事件监听器的函数里，使用了事件的 stopPropagation()  … 所以，事件在这里就会停止传播了 … 
这样也就不会再触发 img 元素的点击事件了 … 
防止默认
事件除了会传播，还有一些默认的行为，比如，点击一个链接的时候，浏览器会按照链接的地址，打开对应的页面 …  我们可以使用事件对象的 preventDefault() 方法，来去掉事件的这些默认的行为 …


