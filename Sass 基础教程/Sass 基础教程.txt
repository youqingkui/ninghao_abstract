00-00-课程介绍

Sass 可以让我们用一种更灵活，有效的方式去写 CSS 样式。比如使用变量来表示常用的值，在任何地方你都可以用变量来表示这个值。使用嵌套，可以让我们少写很多 CSS 的选择器 ...   我们可以把常用的样式，定义成 mixin ，你甚至可以让它支持参数，在调用 mixin 的时候，动态的指定参数的值，生成你想要的样式。
我们还可以使用函数去执行常用的计算，它会给我们返回计算之后的结果，比如你可以使用 Sass 自带的函数，让一种颜色，加深一点，或者让它浅一点 ...  你也可以自己去定义函数，完成你需要的任务 ... 
在 Sass 里，你还可以使用一些控制指令，比如去做条件的判断，去循环的执行一些操作。
我们可以使用命令行工具，或者图形工具，去把写好的 SASS 转换成浏览器能懂的普通的 CSS 代码 ...


01-01-Mac：安装 Sass

下面我们一起在 Mac 上面安装 Sass  ...  先去安装一下 Sass ... 点击 Install  ... 会打开 Sass 的安装说明 ...   我们可以使用 gem 去安装 ...  也就是通过 Ruby 的包管理工具 ...  用的是 gem install 这个命令  ... 
打开终端 ... 输入 gem install sass ...    回车，执行一下  ...   这里会提示我们，安装了一个 gem  ...  完成以后， 输入 sass -v  ... 这样会返回 Sass 的版本，说明在我的系统上已经可以使用 Sass 了  ...


01-02-Windows：安装 Sass

在 Windows 上安装 Sass ，可以通过命令提示符这个工具，首先要确定我们在系统里已经安装了 Ruby ，然后打开命令提示符工具 ... 使用 gem，这个 Ruby 的包管理工具去安装 Sass ...  因为 Sass 是用 Ruby 语言写的应用程序。
输入 gem install sass  ....   回车 ...   第一次使用 gem 的时候，系统可能会提示一个安全警报，点击 允许访问 ...    安装完成以后，我们就可以在命令行下面使用 sass 这个命令了 ...   输入 sass -v  ... 回车  ...  在命令提示符里面会给我们返回刚才安装的 sass 的版本 ..   说明现在我们已经可以使用 sass 了。
gem install sass


01-03-把 Sass 编译成 CSS

使用 Sass 的方法去创建样式，最终需要把 Sass 编译成普通的 CSS，这样才能在浏览器上去使用。编译 Sass 有很多的方法，有一些图形界面的工具，也可以通过命令行去编译 Sass，在以后跟前端开发工作流程相关的课程里，我们会再介绍一些其它的编译 Sass 的方法。
这个视频先看一下使用命令行工具去编译 Sass 。先打开命令行工具，Mac 用户可以使用终端工具，Windows 用户可以使用命令提示符。我这里用的是终端工具 ...  进入到想要保存项目的位置，cd desktop  ... 进入到桌面上  ...   然后去创建一个目录并且进入到这个目录里里面。
mkdir ninghao-sass && cd $_
我们可以再用编辑器，打开在桌面上创建的这个项目的目录 ...  我用的 atom 编辑器，可以直接输入 atom  ... 然后回车 ... 这样会用编辑器打开当前所在的目录。
atom
打开以后先在项目下面创建一个目录，可以去存储所有的 sass 文件 ...   这个目录可以叫做 sass  ...  在这个目录里再添加一个 sass 文件，命名成 style.scss  ...    
然后再创建一个叫 css 的目录 ... 在这个目录里面可以存储编译好的 css 文件。
在这个 style.scss 里面，先写点样式 ...   因为 scss 这种格式支持普通的 CSS 样式的写法，所以在这里我们可以像创建一般的 CSS 样式一样 ...   在后面的视频里我们再去介绍 Sass 的一些写法。
body { font-size: 15px; }
回到命令行工具 ...   使用 sass 这个命令，可以把 sass 文件编译成一般的 css 文件 ...  输入 sass  ... 后面加上要编译的 sass 文件 ...  这里就是 sass 目录下面的 style.scss  ...  然后输入一个冒号，冒号的右边就是要输出的 css 文件。把 style.scss 编译成的 css 文件，放到 css 这个目录的下面，编译以后，叫做 style.css  ... 
sass sass/style.scss:css/style.css
回到编辑器 ...  打开项目下面的 css 这个目录，在这里，你会看到一个编译好的 css 文件，就是这个 style.css 
打开这个文件，然后可以把它分离到编辑器的右边去显示  ..  右键点击这个标签，然后选择 Split Right ，或者也可以使用快捷键 command + K 然后再按下右边的箭头。
这个 style.css 里面的内容就是根据 style.scss 里面写的东西编译之后的结果。我们可以在这个 sass 文件里再添加点东西。添加一个 color 属性。
保存。再回到命令行工具 ... 重新执行一下前面的这条命令 ...   再回到编辑器， style.css 里的内容是重新编译之后的 style.scss 。


01-04-自动编译 Sass

当我们写了一些 Sass 以后，想看一下输出的 CSS 样式，并不需要每次都手工的执行命令去编译。在 sass 命令里面，使用一个 --watch 选项，可以让 sass 自动去监视指定的 sass 文件或者目录的变化，发生变化以后，sass 会自动给我们把 Sass 编译成 css 。
打开命令行的工具，然后进入项目所在的目录 ...   下面，我们用 sass 去监视项目里面的 sass 这个目录的变化，发生变化，就去把这个目录里的东西编译一下，放到 css 这个目录的下面。
输入 sass  ...  加上一个 --watch 选项 ... 然后是要监视的目录 ...  这里就是 sass 这个目录 ... 再输入一个冒号，指定一下编译以后的 css 文件所在的位置，把它们放到 css 这个目录的下面。
sass --watch sass:css
回车 ...    会提示 Sass is watching for changes. Press Ctrl-C to stop. ， Sass 正在监视变化。按一下 Ctrl + C 可以停止监视。
回到编辑器 .. 我们在 style.scss 这个文件里再输入点东西 ...    lh1.5 ...  然后保存 ...    这样 style.scss 就发生了变化，也就会去自动把这个 Sass 文件编译到，输出到 css 这个目录的下面。在编辑器的右边你会看到重新编译好的这个 style.css 文件。
在默认的情况下，编译以后生成的 CSS 文件的名称跟 Sass 文件的名字是一样的。


01-05-修改编译输出的 CSS 格式

Sass 编译输出的 CSS 有四种格式，nested，嵌套，compact，紧凑，expanded，扩展，compressed，压缩。这种样式会影响输出的 CSS 的格式。
默认 Sass 编译输出的 CSS 使用的是嵌套的格式，你会发现，这个 style.css 里面，这块样式的最后结尾的这个花括号没有在新的一行。为了更清楚什么是嵌套的格式，我们可以再试一下使用 Sass 的嵌套语法写的样式。先删除掉这个 style.scss 里面的东西。然后用一个 ul 标签作为样式的选择器。 给它添加一个字体的属性 ... 
然后直接在这个 ul 样式块里面，再添加一个 li 标签，作为新的样式的选择器。在它里面，再添加一条样式的属性。这种写法就是 Sass 的嵌套，我们会在后面的视频里详细的再介绍一下。先看一下这样写的 Sass 输出的 CSS 是什么样的。保存一下 ... 
这里 ul 这个选择器是一块样式，它下面还有一个 ul 空格 li ，这块样式会右向缩进一块，因为我们在写 Sass 的时候使用的是嵌套。所以输出的 CSS 的格式也会保存这个嵌套的格式。这就是默认 Sass 的输出的 CSS 的格式。
下面我们再去试一下其它的几种格式...   回到命令行工具 ...   先停止一下 Sass 的监视 ..  按一下 ctrl + C ...   然后再调出前面执行的这条 Sass 的命令， 在它的后面，我们可以加上一个 --style 选项 ...  再输入一个空格 ...  接着是编译输出的 CSS 格式 ..   我们先试一下 compact  ..
sass --watch sass:css --style compact
回车 ... 回到编辑器 ...  现在，这个输出的 CSS 的格式就是紧凑的，这种格式的 CSS，每块样式都会单独在同一行里面。 再去试一下其它的格式 ... 
ctrl + C  ...  再调出前面执行的命令  .... 这次我们把 compact 换成 compressed  ... 压缩的格式 ..   回车 ..  再回到编辑器 ..   这次你会发现，输出的 CSS 都会在同一行里面，这种格式的 CSS 体积更小一些 ... 
最后再去试一下 expanded  ... 回到命令行 ...   先停止一下 ...  ctrl + C  ...  然后把 compressed ，换成 expanded  ...   回车执行一下 ...
再回到编辑器 ..  现在你看到的就是扩展格式的 CSS，这样格式的 CSS 更容易阅读一些，也是我们平时手工撰写 CSS 的时候最常用到的格式  ...


01-06-.sass 与 .scss 的区别

Sass 有两种语法，一种是 Sass 最开始用的，叫做缩进式的语法，使用这种语法的 Sass 文件的扩展名是 .sass  ...  在 Sass 3.0 以后的版本里，介绍了一种新的语法，叫做 Sassy CSS  ...  是现在比较常用的 Sass 语法。它更接近我们平时写的 CSS ，也更灵活一些，因为任何标准的 CSS  文件，把文件的扩展名换成 .scss ，然后在这个文件里，就可以直接使用 Sassy CSS 这种语法了。
这个视频我们来了解一下这两种语法的主要的区别 ... 首先就是文件的扩展名是不一样的 ...  缩进式的 SASS 的文件扩展名是 .sass  ...  Sassy CSS 的文件扩展名是 .scss  ..
现在你看到的就是用这两种语法写的两个 Sass 文件  ... 左边这个是用 Sassy CSS 写的，右边这个是原始的缩进式的 Sass  ... 
首先这两种语法里面写注释的方法是不一样的 ...   比如这个多行注释  ... 在 Sassy CSS 里面，开始需要用一个 /* ，结束的地方要再用一个 */ ，而在缩进式的 Sass 里面，是不需要结束的 */ 的  ... 
另外单行注释内容，Sassy CSS 需要每个单行注释内容的最开始都要使用 // ，在缩进式的 Sass 里，第一行的注释内容前面用 // ，其它的注释内容只要缩进一下就可以了。不需要每行的前面都加上 // 。
使用 @import 这个指令也有点区别，一个需要在要导入的东西的周围加上一组引号，在缩进式的 Sass 里是不需要的 ... 
定义 mixin ，Sassy CSS 里面需要使用 @mixin 这个指令 ...  并且 mixin 的主体要放到一组花括号里面，每行代码的结尾的地方都要使用一个分号 ...     在缩进式的 Sass 里，定义 mixin ，可以使用这个 = 号 ...  不需要花括号，也不需要使用分号 .. 只要缩进就可以了。
引入 mixin ，Sassy CSS 需要使用 @include 指令  ...  缩进式的 SASS 用的是一个 + 号。 Sassy CSS 在写嵌套还有一般样式的时候，都要用到花括号还有分号  ..    缩进式的 Sass 也只需要使用缩进就行了 ... 
在这个课程里我们会介绍使用 Sassy CSS 的语法去创建 Sass  ...


02-01-变量 - Variables

这个视频我们一起来看一下 Sass 为 CSS 提供的一个重要的功能，变量。我们可以去定义一些变量，然后给它们一些特定的值。在创建样式的时候，可以把变量作为样式的属性的值 ... 
这样如果你想更改这些样式的属性值的时候，只需要去修改这个变量的值就行了。不需要再使用编辑器的查找并且替换功能了。 在 Sass 里面，声明一下变量，或者叫定义一个变量，变量的名称需要使用 $ 符号开始 ...   比如我们定义一下叫 primary-color 的变量，先输入一个 $ 符号 ...  然后是 primary-color  ...  
后面加上一个冒号 ... 然后是给这个变量的值  ...   这里我们把一个颜色作为它的值  ...  
$primary-color: #1269b5;
现在我们就定义好了一个变量，就是这个 $primary-color  ... 它的值是一个颜色 ...  这样我们就可以在这个 Sass 文件里的任何地方，去使用这个变量，来引用这个变量里面的值了 ... 
在下面，先添加一块样式 ...    里面用一个 backgroud-color 这个属性 ... 它的值，我们可以去引用在上面定义的这个变量  ..  $primary-color ... 
div.box {
  background-color: $primary-color;
}
保存 ..  在右边，你会看到编译好的 CSS ...  这个样式里面，使用了变量的地方，会被替换成这个变量里的值  ..    
我们可以再去定义一块样式 ..   用一个 border 属性（bd+）...  在这块样式里面，边框的颜色这里，我们可以使用在上面定义的这个变量 ...  
h1.page-header {
  border: 1px solid $primary-color
}
保存 ...   同样，使用变量的地方，编译之后会替换成交给变量的值  ... 
变量的值可以是数字，颜色，可以是字符串，如果是字符串的值，需要在变量的值的周围加上一组引号 ... 另外变量的值也可以是多个值 ...  
在上面，我们再去定义一个变量  ... 叫做 $primary-border...    它的值是多个值  ...  1px 空格 solid 空格  ... 在变量的值里面，我们也可以去引用其它的变量 ... 比如在上面定义的这个 $primary-color  ... 
在这个 h1.page-header 里面，我们再去使用这个新定义的变量 .. 去掉 border 属性后面的值 ...  在这里直接去引用 $primary-border 这个变量 ... 
保存 ....  你会看到，输出的 CSS ，使用 $primary-border 这个变量的地方，会替换成在这个变量里定义的值 ...  1px solid  ... 在这个变量里，我们也用到了其它的变量 ...  这个变量也会被替换成它的值  ... 
另外还有一件事，就是在定义变量的时候，这个变量的名字里面，可以使用减号，也就是连接符号，也可以使用下划线，它们之间是可以交替使用的，比如你在定义变量的时候使用的是连接符号，在引用它的时候，可以使用连接符号，也可以使用下划线 ..   不过为了更清楚一些，你需要统一一下。


02-02-嵌套 - Nesting

在创建样式的时候，有些样式的选择器很可能会有一部分是重复出现的，比如这个针对导航栏设计的样式里面，会重复的出现  .nav  ...   下面的 .nav 空格 ul ，表示的就是我们想针对 .nav 这个类下面的 ul 标签去添加样式 ...   这个 .nav 空格 ul 空格 li ，表示的就是，针对在 .nav 这个类所在的标签下面的 ul 标签里面的 li 标签去添加样式 ... 
这种样式选择器的写法，不会影响到其它地方的 ul 标签还有 li 标签的样式。关于 CSS 的选择器的写法，你可以参考宁皓网的 《 CSS3 选择器 》这个课程。
Sass 提示了一种更简洁的方法来写这样的选择器。就是使用嵌套的方式 ...   下面我们使用 Sass 的方法去改造一下 ...   在这个 .nav 里面去嵌套需要的样式 ...  另起一行 ...    把下面的 .nav ul 复制到这里 ...  可以去掉前面的 nav  ...   
再去把 .nav ul li 放到这里 ..   去掉前面的 .nav 空格 ul  ...  把这块样式，嵌入到这个 ul 的样式里面 ...  这样我们就可以删除掉下面这两块样式了 ... 
保存 ...    你会看到编译以后，输出的 CSS 跟之前是一样的 ... 
因为这个 ul 样式，嵌入到了 .nav 这块样式里面，编译的时候，Sass 会先把被嵌套的样式的父选择器拿出来，再加上这个嵌套的样式的选择器。也就是你在右边看到的， 被嵌套的 ul 的样式的选择器是它的父选择器 .nav ，然后空格，再加上它本身 ...  也就是 ul  ..
这个 ul 样式里面又嵌套了一个 li 这块样式 ... 编译好以后，这块样式就会是这块样式的所有的父选择器，也就是 .nav 空格 ul ... 再加上 li 本身 ...


02-03-嵌套时调用父选择器

使用嵌套的写法，被嵌套的样式在输出的时候，Sass 会把它的父选择器拿起来中间加上一个空格，再加上这个被嵌套的选择器。表示被嵌套的选择器是嵌套它的选择器的后代。不过有些时候，我们不想使用这种关系 .. 而是直接要使用父选择器加上被嵌套的选择器，中间不用空格 ... 
常用的情况就是在应用一些伪类的时候 ...   比如 :hover ...   像这里 ...   :hover 是在 a 这个样式里面，输出的时候，选择器是 .nav 空格 a 空格 :hover ...  这样是不对的。
我们需要直接使用父选择器加上这个伪类选择器 :hover  ...   这种情况，可以使用一个 & 符号 ...   在这个 :hover 的前面，加上一个 &  ... 表示这里是要直接去调用它的父选择器。
保存 ...    在输出的结果这里，你会看到，a 还有 :hover 之间的空格就被去掉了。 下面再看一下使用 & 符号的例子 ..    用一个 & 符号，去引用父选择器，这里应该就是 .nav  ...  加上一个空格  ...   然后再用一个 & 去引用父选择器 ... 加上一个连接符号 ... text  ...   在这个样式里，再添加点东西 .. 比如一个字号的样式...
保存 ... 在输出的结果这里，你会看到，使用了 & 符号的地方，会去引用父选择器 ...


02-04-嵌套属性

我们把嵌套用在样式的规则上面，这样可以减少撰写选择器里面的重复的部分 ...  另外，嵌套也可以用在样式的属性里面。比如这里你看到的样式。用到了 font-family ，font-size，font-weight  ... 这些属性里面，font 是重复的部分 ...  在下面的样式里，border 是重复出现的东西 .. 
使用属性嵌套，可以让它们更简洁一些 ...   先改造一下这个 body 里面的样式 ...  用一个属性的根 ...  这里就是 font  ...   在它后面，要加上一个冒号 ...  表示这是属性的嵌套  ...  然后用一组花括号 ..   里面，可以直接使用属性的后半部分 ...   family ，size ... 还有 weight  ... 
保存 ...  你会发现输出的结果是一样的 ... 
再去改造一下 .nav 里面的样式 ... 在这里，  我们可以保留这里的第一条样式 ...  然后在它后面加上一组花括号 ...   里面，可以直接使用 left ，还有 right  ...  
保存 ... 编译好以后，会得到同样的结果 ...   Sass 会把 border 拿出来，中间加上一个冒号，接着是被嵌套的属性，left ，还有 right  ...


02-05-混合 - Mixins

Mixin，你可以把它想成是一块有名字的定义好的样式，可以在任何地方重复去使用它。mixin 中文一般会翻译成混合，如果你了解 JavaScript ，Mixin 有点像是 JavaScript 里面的函数，每个 Mixin 都有自己的名字，使用这个名字你可以去调用它，定义 mixin 的时候，你还可以给它添加参数，让这个 mixin 更灵活一些。
在 Sass 里面定义 Mixin ，用的是 @mixin ... 后面加上要定义的mixin 的名字，如果定义的这个 mixin 支持使用参数的话，可以把需要的参数放在 mixin 名字的后面的括号里 ...   然后是一组花括号，在花括号里面可以去添加一些东西，在这里你可以添加普通的 CSS 规则，或者使用 Sass 的其它的特性，比如变量，嵌套，函数等等。
下面，我们去定义一下 mixin  ...   先输入一个 @mixin .. 一个空格 ... 然后是这个 mixin 的名字，我们叫它 alert ...   这个 mixin 暂时不支持使用参数 ... 后面 直接添加一组花括号 ... 
然后在这里面，去添加点 CSS 的样式 ... 一个 color 属性 ...   再加上一个 background-color  ...  设置一种颜色 ... 
@mixin alert {
  color: #8a6d3b;
  background: #fcf8e3;
}
这样我们就定义好了一个 mixin ，叫 alert ... 现在我们可以在任何地方去使用这个 mixin  ...  常用的地方就是在其它的样式规则里面 ...  在下面，我们再定义一个样式 ...   .alert-warning {} ....   在它里面，可以去调用上面定义的 mixin ...  调用 mixin 需要使用 @include 这个指令 ...  输入 @include  ..  后面加上 mixin 的名字 ...  alert ...  保存 ... 
在右边，你会看到输出的结果 ...  你会发现，在 alert 这个 mixin 里面定义的样式，包含在了使用它的 .alert-warning 这个类的样式里面了 ... 
在定义 mixin 的时候，可以使用 Sass 的其它特性，比如包含其它的 mixin ，或者使用嵌套等等 ...   我们可以再试一下 ... 在 alert 里面去使用一个嵌套 ...   用一个 a 标签作为样式的选择器 ..   在这块样式里，添加一个 color 属性 ...  设置一种颜色  ...  这个颜色可以比上面的 color 深一些 ...  (command + shift + C)
保存 ...   在右边，你会看到输出的结果 ...   Sass ，会把 mixin 里面使用的嵌套解包出来 ...   因为我们是在 .alert-warning 里面使用的这个 mixin ，所以，在解包的时候，会使用这个选择器作为 mixin 里面的 a 这个样式的父选择器 .. 
http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins


02-06- Mixin 里的参数

在 Mixin 里面使用参数，可以让 Mixin 更灵活一些 ...   比如前面我们定义这个 alert mixin ，现在它里面的样式的属性的值是固定的，我们可以把这些属性定义成参数，然后在调用 mixin 的时候，你可以重新去指定这些属性的值。
在 Mixin 里面添加参数可以这样，在 Mixin 名字的后面，加上一组括号...   然后在括号里去添加要在 mixin 里面用到的参数  ...   这里我们先添加一个叫 text-color 的参数 ... 注意参数的前面要用 $ 符号开始，跟变量的命名方式是一样的 ..   不同的参数之间用一个逗号分隔开 ...   再添加一个 $backgroud  ... 
现在，在这个 mixin 里面，我们就可以使用这两个参数了 ...    color 这个属性对应的值，我们用 $text-color 这个参数来表示 ...   background 这个属性的值，用 $background 这个参数表示  ...  
在这个 mixin 里面还用到了一个嵌套 ...   一个 a 标签选择器定义的样式。这个样式定义了使用这个 mixin 的元素里面的链接的颜色  ...   这个链接的颜色，我们可以根据 $text-color 这个参数的值自动去生成 ...  这里我们可以使用一个颜色函数 ...   darken($text-color, 10%);    这里我用的是 darken 这个函数，它的功能就是，可以加深一种指定的颜色 ...  这里我们根据 $text-color 的值，让这个颜色加深 10% ..   再交给这个 color 属性 ... 
在调用这个带参数的 mixin 的时候，我们需要去指定这个 mixin 里面的参数的值 ...    这里需要在 alert 的后面添加一组括号 ...  然后分别去指定参数的值，注意这个参数的值的顺序要跟定义这个 mixin 的时候使用的参数的顺序是一样的 ... 也就是，第一个值就是 $text-color 的值，第二个值是 $background  ... 
保存 ...   在右边这里，你会看到输出的结果  ...   在 .alert-warning 这里，color 属性的值就是我们在调用 alert 这个 mixin 的时候为 $text-color 这个参数指定的值  ..  background 这个属性的值，就是调用 alert 的时候，为 $background 这个参数指定的值  ... 
在下面，还有一个 .alert-warning a  ...  在这里，这个 color 属性的值，是用一个 darken 函数，根据我们为 $text-color 这个参数的值自动生成的 .. 这个颜色，会比 $text-color 深 10% .. 
我们可以再去添加一段样式，去调用这个 alert mixin  ...    添加一个 .alert-info  ...   在它里面，去调用 alert 这个 mixin，用一个 @include  ...  同样，需要为这个 mixin 里面的定义的参数去指定对应的值  .. 
这里我们也可以使用命名的方式去给参数设置值，这样这个参数的顺序就不重要了 ...  比如我们可以先为 $background 这个参数去设置一个值 ... 先用一个 $background  ... 后面加上一个冒号 ...  然后是这个参数的值  ... #d9edf7  ..   用一个逗号分隔一下...   再设置一下 $text-color 这个参数的值  ...   #31708f ...
保存  ...   在编译输出的结果里面，你会看到 .alert-info 这个样式 ...  它里面的 color 还有 background 属性的值 ，会根据我们在调用 alert 这个 mixin 的时候，为参数指定的值来生成。


02-07-继承/扩展 - inheritance

在 Sass 里面，我们可以使用继承或者叫扩展来减少重复的工作，用的是 @extend 这个指令，它的功能就是，可以让一个选择器去继承另一个选择器里面定义的所有的样式。下面，我们去试一下这个 @extend  ... 
比如这里我们有一个类叫 .alert，在这里定义了一些样式 ...   这个 .alert 的作用就是让元素变成一个警告提醒的区块 ...  另外我们可能还想再设计一些其它样式的警告提醒 ...  它们都有不同的背景，文字，边框的颜色 ... 
在下面，我们再添加一个叫 .alert-info 的类选择器 ..  在这个选择器里，需要用到在 .alert 里面定义的所有的样式 ...   另外它还需要一些自己的更具体的样式。
这里先用一个 @extend ... 去继承一下 .alert 这个选择器 ...   然后再添加一个自己的样式 ...   比如一个浅蓝色的背景 ...   background-color  ...  #d9edf7 ... 
.alert-info {
  @extend .alert;
  background-color: #d9edf7;
}
保存 ...   你会看到编译之后的结果 ...  因为 .alert-info 里面用了一个继承，去继承了 .alert 这个选择器里的样式 ... 所以输出的时候，会用一个群组选择器 ...  这里就是 .alert ... .alert-info  ...  这两个选择器，会同时拥有在这个群组选择器里定义的样式 .. 也就是这个 15px 的内边距 ... 
另外，Sass 还给我们把 .alert-info 独有的样式单独拿出来 .. 就是这个浅蓝色的背景 ...     这个继承不仅仅是去继承 .alert 这个选择器里的样式 ..  另外一些跟 .alert 相关的选择器里的样式，都会被 .alert-info 继承过来 ...
在这里，我们再去添加一个跟 .alert 相关的样式 ...  .alert a  ....   去设计一下在 .alert 下面的链接的样式 ..   用一个 font-weight 属性 ... 设置成加粗的样式 ... 
.alert a {
  font-weight: bold;
}
保存 ...  你会看到，编译以后，这个为 .alert 下面的 a 标签添加的样式，也会用在 .alert-info 这个类下面的  a 标签上 ...     Sass 的 @extend 输出的结果，就是使用这样的群组选择器，来保证让使用继承的选择器，拥有它继承的选择器还有相关的选择器里面定义的样式。


02-08-Partials 与 @import

CSS  本身带了一个导入的功能，就是用 @import ，在一个 CSS 文件里面，去把其它的 CSS 文件包含进来，不过每次使用 @import 浏览器都会发出一次新的 http 请求，去下载被导入的 CSS 文件，因为每次 http 请求都会消耗服务器的一点资源，所以这样会让你的页面变慢。SASS 扩展了这个 @import 的功能，它可以让我们在一个 SASS 文件里面，去把其它的 SASS 文件包含进来，SASS 会把它们编译生成一个 CSS 文件。
这样，我们就可以去把一个项目需要的样式，分割成不同的小部分。然后再用这种导入的方法，把这些小部分，包含到一个 SASS 文件里面。这些小的部分，在 SASS 里面，叫做 partials ...  每个 partial 就是一个 SASS 文件，文件的名字的前面要用一个下划线开头，这样 SASS 就知道这样的文件是一个 partial ，也就是项目的一部分，不会单独去把这样的 SASS 文件编译成 CSS 文件。
Partial 可以让我们的 CSS 项目模块化并且更有条理一些。
下面，我们去试一下。这里我们再去新建一个 SASS 文件 ...  命名成 _base.scss  ... 注意 partial 文件要用下划线开头 ..   然后在这个 SASS 文件里面，可以包含一些基本的样式 ...  比如重置浏览器样式的 CSS 样式。 先随便添加点 CSS  ...
body {
  margin: 0;
  padding: 0;
}
保存 ..   你会发现，在 css 这个目录里面，没有编译后的 _base.scss  ... 因为这个 SCSS 文件是用下划线开头的 .. 是一个 partial  ...   回到这个 style.scss  ...
在这个 SASS 文件里面，我们使用 @import ，去把 _base.scss 这个文件包含进来 ...   先输入 @import  ... 后面用一组引号 ... 引号里面，是要包含进来的 SASS 文件 ...   这里就是 base.scss  ...  这里不需要输入文件名最开始的这个下划线 ...   另外也不需要输入文件的扩展名 ...  
@import "base";
因为这里要包含的 SASS 文件跟这个 SASS 文件在同一个目录的下面，所以，也不需要去指定目录的路径  ...  注意最后要加上一个分号 ... 
保存 ....   在输出的结果里，你会看到在 style.scss 里面定义的样式，另外还有被它包含的 _base.scss 这个文件里面的样式 ...


02-09-注释

SASS 里面有三种注释，多行注释，单行注释，还有强制的注释，多行注释在会在编译输出的 CSS 文件里面保留，不过在压缩输出的 CSS 里面会被去掉。SASS 里面的单行注释不会出现在 CSS 里面。强制的注释，就是注释内容的第一个字符使用 ! 号的多行注释 ... 这样的注释内容会一直出现在 CSS 文件里。下面，我们去试一下。
先添加一个多行注释，多行注释就是使用一个 /* 开始 ...  注释结束的地方用 */  ...   在 Atom 编辑器里，可以使用快捷键 command + / ，Windows 上应该是 ctrl +  /  来添加这样的注释 ... 
/* 多行注释
 * 会包含在没有压缩之后的CSS里面
 */
保存 ...   在输出的 CSS 文件里面，你会看到多行注释的内容 ... 因为我们现在用的是 expanded 这种方式输出的 CSS ...  所以多行注释的内容也会被包含在 CSS 文件里面。
下面，再去试一下单行注释 ...  在 SASS 里面，单行注释的内容可以使用 // 开头 ... 
 // 单行注释不会出现在 CSS 里面
保存 ...  在输出的 CSS 里面，不会包含这样的单行注释的内容 ...  下面，我们再去修改一下 CSS 的输出的方式 ..  回到命令行 ..  ctrl + C  ..  停止一下 ...   然后再去执行这行命令 ..  修改一下输出的 CSS 的样式 ... 这里我们用 compressed  ...   回车 ...  
回到编辑器 ...  保存 ...  现在用的是压缩的方式输出的 CSS ...  这样就会去掉所有的注释内容 ...  不过，如果你仍然想在这种形式的 CSS 里面添加点注释内容 ...  你可以使用带叹号的多行注释 ...   这个注释的内容的第一个字符要用 ! 号开头 ... 
/*!强制输出的注释内容*/
再保存一下 ...   在输出的 CSS 里面，会包含这样的注释内容。


03-01-数据类型 - data type

CSS 属性的值，还有 Sass 变量的值，可以分成几个不同的类型，比如数字，字符串，颜色，列表等等，Sass 对这些不同类型的数据有不同的对待 ..   比如我们可以使用 + 号去连接两个字符串类型的数据，可以对数字类型的数据去做一些数字运算。Sass 里面自带了一些函数，可以去处理这些不同的类型的数据。 在这一章里，我们来了解一下数据的类型，还有 Sass 自带的一些函数。
下面， 我们先简单的了解一下 ...   打开命令行工具，然后使用 Sass 提供的交互功能，输入 sass -i  ... 这样你输入代码，回车以后会立即看到 Sass 运算之后的结果 .. 
判断数据的类型，可以使用 type-of() 这个函数 ..   输入 type-of(5) ...  看一下 5 是什么类型的数据，回车 .. 返回的结果是 number ，表示 5 是一个数字 ..   数字类型的数据还可以包含单位 ...    type-of(5px) ..  回车 .. 同样返回的是 number  ... 
type-of(hello)  ...  结果是 string ，表示这是一个字符串类型的数据  ..   字符串类型的数据的周围可以包含引号 ...  type-of("hello")  ...  结果仍然是 string  ... 
再试一下 type-of(1px solid #000)  ...  这次返回的结果是 list ，列表类型的数据 ...  列表数据就是一组数据，中间用空格或者逗号分隔开 ...    type-of(5px 10px)  ...   同样是一个 list 类型的数据 ... 
在 Sass 里面，支持很多种表示颜色的方法 ..  比如最常的用十六进制表示的颜色  ...  type-of(#ff0000)  ...  结果是 color  ...   常用的颜色也可以使用关键词的形式来表示  ...  type-of(red) ...   也可以用 rgb 的方法来表示 rgb(255, 0, 0)  ...  ... 或者 hsl 的方法，hsl(0, 100%, 50%) ..   这些都会被认为是 color ，颜色类型的数据。


03-02-数字

在 Sass 里面，高度的值，宽度的值，边框的宽度，这些东西都属于数字类型的值，这些的值里面还可能会包含单位，比如 px ，em ，或者  % ...   在 Sass 里面，我们可以使用加，减，乘，除，或者求余数这些算术运算，去处理数字类型的值。得到的结果里面，会包含数字值的单位。
下面，我们在 Sass 的交互 shell 里面，去试一下数字的运算。
2 + 8  ....  结果是 10 ，注意这个结果的周围没有引号，表示这是一个数字类型的值  .. 
2 * 8  ...   等于 16  . ..   再试一下除法运算  ...   8 / 2  ...  得到的结果是 8/2  .. 这是因为在 CSS 里面，有些属性的值会用到这种 / 的方式 ... 比如 font 这个属性  ...    （font: 16px/1.8 Georgia;） ..  在这条样式里，/ 前面的 16px 表示字号，/ 后面的 1.8 表示行间距 ..  
所以 Sass 会保留这样的写法 ...  如果你想去使用除法运算的法，我们可以把这个表达式放到一个括号里 ...   像这样  ...  (8 / 2)  ... 这次得到的就是 8 除以 2 的结果 ..  也就是 4  ...
在运算的时候，数字类型的值也可以包含单位 ...   5px + 5px  ...  结果会是 10 px  ...   5px - 2  ...   结果等于 3px  ... 
5px * 2  ...   结果是 10px  ...   再试一下 5px * 2px  ...    你会发现，结果是 10px*px  ...    px*px 在 CSS 里面并不是可用的单位，所以，你需要注意一下 ... 
(10px / 2px)   ...    等于 5  ...  在除的时候，两个单位会被去掉 ..   如果是 (10px / 2 )  ...    这样结果里面会保留 10px 里面的单位 ... 结果就是 5px .. 
再来个加减乘除，混合运算 ...  3 + 2 * 5px ...     结果是 13px  ...  因为这里要先算乘除，再算加减，这些都是我们在小学里学的数字...  2 * 5px 是 10px  ...  3 + 10px ，结果就是 13px  ..
想要改变运算顺序的话，可以使用括号 ...   (3 + 2) * 5px  ...   这样会先去算出 3 + 2 的结果 ..  是 5 ，再用 5 去乘以 5px ，结果就是 25px  ...


03-03-数字函数

http://sass-lang.com/documentation/Sass/Script/Functions.html
Sass 提供了一些函数，可以更方便的去处理一些事情，函数一般都会给我们返回一个值。下面，我们去看几个处理数字的函数。abs() 这个函数可以给我们返回指定的数字的绝对值 ... 
使用函数的方法就是，先用函数的名字，然后在括号里把要处理的东西交给函数。abs(10)  ... 数字 10 的绝对值就是 10  ...  abs(10px) ..  结果是 10px  ..  abs(-10px)  ...   -10px 的绝对值是  10px  ... 
再看几个跟四舍五入相关的函数 ...  在 Sass 里面的除法运算，会保留结果里的小数 ...  如果你想对带小数的数字四舍五入的话，可以使用这些函数 ...   round(3.5)  ...   结果是 4  ...  因为小数位的数字大于等于5 ，所以结果会进一位 ... 也就是 4  ...  round(3.2) ..  结果是 3 。因为小数位小于 5  ... 
如果想一直进位的话，可以使用 ceil  ...  ceil(3.2) ... 结果是 4  ...   ceil(3.1)  ... 结果仍然是 4  ...  ceil 这个函数不管数字里面的小数是否大于 5 ，都会进一位 ...
想要退位的话 ... 用的是在 floor 这个函数 ...  floor(3.6) ...  结果是 3 ，虽然 3.6 这个数字的小数大于 5   ...  因为用的是 floor 函数，它会去掉小数位，只保留整数部分 ... 
我们可以使用 percentage 这个函数，把一个数字转换成百分数的形式 ...  像这样 ...  percentage(650px / 1000px)    ...  结果是 65%  ...
想得到一组数字里面最小，或者最大的数字，可以使用 min 还有 max  ...   min(1, 2, 3) ...  返回的结果是 1 ，因为在 1,2,3 这几个数字里面，最小的数字是 1  .. 
再试一下取最大数的 max 函数 ...  max(1,2,3)  ...  结果是 3  ... 
http://sass-lang.com/documentation/Sass/Script/Functions.html#number_fun...


03-04-字符串

字符串，就是一串字符，比如在 CSS 里面的一些关键词，像 bold，normal，center，right  等等，这些都属于字符串类型的数据。另外还有一些用引号包围的东西也属于字符串类型的数据。比如像 "Helvetica Neue"  ... 
带引号还有不带引号的字符串的区别就是，带引号的字符串里面，可以包含空格，还有一些特殊的符号，不带引号的字符串不能有这些东西 ... 
常见的用在字符串类型的数据的操作符就是 + ，它可以把两个字符串连接到一块儿。我们可以在命令行工具下面去试一下 ...  打开 Sass 的交互功能 ...  输入 sass -i   ...   输入点东西，回车以后，会立即看到 Sass 输出的结果 ..
比如我们用带引号的 "ning"  加上不带引号的 hao  ...   回车 ...   结果就是它们连接到了一块儿 ...  注意这个返回的结果会用一组引号 ... 表示这是一个字符串类型的数据 ... 
再试一下用不带引号的 ning 加上带引号的 "hao"  ...   回车 ... 会得到一样的结果 ...  同样是一个字符串类型的数据 ... 不过这两个表达式在真正输出的 CSS 里面还是有点区别的，用一个带引号的字符串，去连接不带引号的字符串，得到的结果里面，也会包含这个引号 ...  
如果你用一个不带引号的字符串去连接带引号或者不带引号的字符串，输出的结果会是一个不带引号的字符串。
再试一下用一个字符串加上一个数字类型的数据 ... 
"ninghao" + 8080
得到的仍然会是一个字符串类型的数据 ...  结果就是把它们都连接到了一块儿 ...    我们再试一下用减号连接两个字符串 ... 
ning - hao  
回车 .. 这个结果就是 ning  .. 然后一个连接符号 .. 再加上 hao  ...    再试一下 /  ...   这是一个除号 ...  不过把它用在两个字符串上 .. 得到的结果会保留这个 / 符号 ..  因为在 CSS 里面，有些属性的值可以用这样的方式去写 ..  
ning / hao
最后再试一下 * 这个操作符 ...   ning * hao ...    这里会出现一个错误的提示 ...  因为把两个字符串类型的数据相乘是没有意义的 ...


03-05-字符串函数

http://sass-lang.com/documentation/Sass/Script/Functions.html#string_fun...
在 Sass 里面有些函数可以去处理字符串类型的数据。下面，我们一起来试一下。打开命令行，输入 sass -i ，打开 Sass 的交互 shell  ...   这里我们可以先定义一个变量 ...  叫做 $greeting  ...  它的值设置成 Hello ninghao
$greeting: "Hello ninghao"
输入 $greeting  ...  会返回这个变量的值 ...  Hello ninghao  ...   我们可以把这个变量作为函数的一个参数 ...  先试一下 to-upper-case ... 这个函数 ...    
to-upper-case($greeting)
这个函数可以把字符串里面的字符全部变成大写的 ...     对应的还有一个 to-lower-case  ...  它可以把字符串全部变成小写的形式 ..
to-lower-case($greeting)
想得到字符串的长度，可以使用 str-length  ...   str 表示的就是 string  ...    这个函数返回的值是 13  ... 表示， Hello ninghao 这个字符串里面，一共有 13 个字符 ..
如果你想确定一下 Hello 在这个字符串里面的开始的位置 ...  可以用 str-index 这个函数，得到这个值 ...   str-index() ... 这个函数有两个参数 ... 第一个参数是要检查的字符串 ... 这里用 $greeting 来表示 ...   第二个参数就是要判断位置的那个字符串 ...   输入 Hello  ...
返回的结果是 1 ，也就是 Hello 这个词在 Hello ninghao 这个字符串里面的开始的位置是第 1 个字符 ...   注意这里的索引值是从 1 开始的 ...  
再试一下 ninghao 的位置  ...   str-index($greeting, "ninghao") ...   结果是 7  ...    
我们可以使用 str-insert 这个函数，在一个字符串的指定的位置插入新的字符 ...    输入 str-insert  ...   这个函数有三个参数，第一个参数是要插入字符串的字符串 ...  这里用 $greeting 来表示，也就是我们要往这个变量表示的字符串里面去插入新的字符串 ... 
第二个参数是要插入的字符串 ...   ".net"  ...   要把 .net 插入到 Hello ninghao 这个字符串里面 ...  最后还要指定一下插入的位置 ...  Hello ninghao 这个字符串一共有13 个字符，如果我们想把.net 这个字符串插入到这个字符串的最后的位置上 ...  这个位置可以设置成 14  ...  
str-insert($greeting, ".net", 14)
你会看到，得到的结果就是 "Hello ninghao.net"


03-06-颜色

CSS 表示颜色的值有很多种方式，最常见的比如用十六进制的数字表示的颜色  ...  还有 RGB，HLS  ... 表示的颜色 ... 也有一些常用的颜色，可以使用字符来表示  ...  比如 red  ... green  ... blue 等等 .. 
RGB 就是 red green blue，红，绿，蓝  ...  用这种方式表示的颜色，其实就是一种颜色里面 red 占了多少，green 占了多少，还有 blue 占了多少 ... 
这里我用的是 Photoshop  ..  打开它的拾色器 ...   鼠标在这里移动，可以选择颜色 ...  这里我们选择最右上角的这个红色 ... 
在这个拾色器上，会显示出用不同的方式表示的这种颜色 ...  比如 RGB  ...  现在  R 这里是 255  ...   255 是一种颜色里最多能包含的颜色的值  ... 这里就是我们选择的这种颜色，红色占满了 ..    绿，还有蓝的值分别都是 0  ...   也就是我们选择的是纯红色 ... 
在这个拾色器的下面，还有使用十六进制表示的颜色  ...   
下面我们再到浏览器上去看一下 ...   现在这张网页里面有两段文字 ... 我在样式表里，把文字的颜色设置成了 red  ...   也就是红色 ...   
打开浏览器的开发者工具 ...  选中一个段落文字  ...  在右边的 Styles 这个面板里，会显示出这个元素的样式 ... 你会看到，现在 color 这个属性的值是 red  ... 
下面我们再打开 Computed  ... 这个面板 ...   在这里再找到 color 这个属性 ...  现在它的值是 red  ...   用鼠标点一下这个颜色 ...  会出现不同的方式表示的这个颜色 ...
现在是十六进制的方式 ...  这是一种简写的方式 ..  再点一下是完整的十六进制的颜色  ...    再点一下是用 rgb 的方式表示的这个红色 ...  你会看到这种颜色，红的值是 255  ...  绿还有蓝的值都是 0 ...   表示这是一种很红的颜色  ... 
再点一下，会显示出用 hsl 表示的颜色 ...  H 是 Hue  ，也就是色相 ..  S 是 saturation ，表示饱和度 ...  L 是 lightness  ... 表示 明度 ... 
用 hsl 表示这个红色，它的值是 h 是 0 ，饱和度是 100%，明度是 50%  ... 
Sass 支持所有这些表示颜色的方法 ...   你可以使用运算的操作符去处理颜色的值 ...  另外 Sass 还提供了一些非常有用的处理颜色的函数，在下面的视频里我们再去看一下...


03-07-颜色函数- rgb 与 rgba

Sass 关于颜色的函数有很多，我们先看一下rgb 这个函数 ... 它可以根据一个颜色里面红，绿，蓝的数量来生成一种颜色 ...  这里红，绿，蓝的数量是从 0 到 255  ...  或者也可以使用百分比来表示 ... 
我们在这个 style.scss 文件里面，去试一下 ... 然后看看生成的结果 ...    用一个 body 标签选择器 ... 里面用一个背景颜色 ...  它的值，可以使用 rgb 函数来生成 ...   这里我先把 r 也就是红色的数量设置成 255 ，也就是这个颜色拥有最多的红色 ...  其它两个颜色，绿还有蓝的数量设置成 0  ... 
body {
  background-color: rgb(255, 0, 0);
}
保存 .. 因为这种颜色是纯红色 ... 所以，在输出的 CSS 里面，用的是 red 这个词来表示这种颜色 ...   这里我们也可以使用百分比的形式 ...   把 255 换成 100%...  同样得到的结果是纯红色 ...
在这个颜色里，再加些绿色 ..   100  ...    保存 ...   得到的结果是一种橙色 ...   atom 编辑器里打开拾色器，可以使用快捷键 shift + command + c  ... Windows 上是 shift + ctrl + c  ..
这里，再把这个颜色里的绿色设置成 255  ...   蓝色的值仍然 0  ...   保存 ...   你会看到结果就是 yellow  ...  也就是黄色 ... 
想在颜色里面加上 alpha 通道，也就是，你想让一个颜色有透明的效果 ..   可以使用 rgba 这个函数 ...   这里的 a 就是 alpha  ...  先把 rgb 换成 rgba  ...   这个函数里面的前三个值，仍然是红，绿，蓝的用量 ... 
第四个值就是这个表示透明度的值 ... 这个值是从 0 到 1 这间的数字 ...  0 表示完全透明，1表示完全不透明  ...    这里我们用一个 0.8  ... 意思就是，让这个颜色的不透明度变成 80%  ... 
保存 ...  在输出的结果里面，也用到了这个 rgba 函数 ...   这是标准的 CSS 函数 ... 比较现代的浏览器都支持这样的写法 ...   我们在浏览器打开使用了这个样式表的页面 ... 
打开，开发者工具 ...   找到这个 body 标签的样式 ..    然后我们再修改一下这个 rgba 里面的 a 的值  ...  改成 0.5  ...  你会发现，黄色的背景又变得浅了一点 ...  其实背影颜色仍然是黄色 ... 只不过我们让它变透明了 ..   再把 0.5 换成 0.1 试一下 ...  这回因为接近完全透明了，所以，看起来会是更浅的黄色  ...   
http://sass-lang.com/documentation/Sass/Script/Functions.html#rgb_functions


03-08-颜色函数-hsl 与 hsla

我们也可以使用 hsl 的方式来表示一种颜色，hsl 表示三种东西，色相，饱和度，还有明度 ...  色相的值是从 0 到 360 度，饱和度是从 0 到 100% ，明度也是从 0 到 100%  ... 
hsl 这个函数可以根据这三个东西的值来创建颜色  ...  比如我们想要纯红色 ...   先用一个 hsl 函数  ...   色相的值设置成 0 度 ...  饱和度是 100% ...   明度是 50% ... 
body {
  background-color: hsl(0, 100%, 50%);
}
你会看到，得到的结果是用字符表示的颜色，red 就是红色 ...     这里我们再把色相的值设置成 60 ...   饱和度与明度不变 ...   保存 ...  结果会是 yellow  ... 黄色 ...    
想要颜色里面加上 alpha 通道，也就是设置颜色的不透明度 ...  可以使用 hsla 这个函数 ...  前三个值仍然是色相，饱和度还有明度 ... 最后一个值用来表示颜色的不透明度 ...  是从 0 到 1 之间的数字，0 表示完全透明，1 表示完全不透明  ...   这里我们设置成 0.5 ...   
background-color: hsla(0, 100%, 50%, 0.5);
保存 ...  你会发现，输出的 CSS 里面，会用 rgba 这个函数来表示 ... 也就是 Sass 会把用 hsla 表示的颜色，转换成用 rgba 表示的颜色  ...  
在浏览器打开使用这个样式表的页面 ...   这里你会看到，页面的背景是半透明的黄色 ... 
http://sass-lang.com/documentation/Sass/Script/Functions.html#hsl_functions


03-09-颜色函数-adjust-hue

adjust-hue 这个函数可以调整颜色的 hue，也就是色相的值 ...  这里定义了两个变量 ...  $base-color，还有 $base-color-hsl  ...  它们的值其实是一种颜色，只不过用了不同的方式表示出来，一个是用十六进制的形式，另一个用的是 hsl 的形式 ...   点击颜色的值，在 atom 编辑器里，按下快捷键 shfit + command + c  .. . Windows 上应该是 shift + ctrl + c ，可以打开颜色选择工具 ..
同样，也可以查看用 hsl 表示的颜色 ...   下面，我们用 adjust-hue 这个函数调整一下这个颜色  ...   在这个 body 选择器里面，背景颜色的值，可以设置成这个调整之后的值 ...  输入 adjust-hue  ... adjust 就是调整的意思 ..
这个函数有两个参数 ... 第一个参数是要调整的颜色 ... 第二个参数是要调整的度数 ...     要调整的颜色，我们先用 $base-color-hsl 这个变量来表示  ...   用一个逗号 ... 再设置一下要调整的度数 ...  输入 137deg ，注意这里需要加上这个 deg 作为单位，也可以不加。deg 表示的就是 degree ，角度的意思 ..  加上这个单位会更清楚一些 ..
保存 ...   这右边你会看到输出的结果 .. Sass 会把调整之后的颜色换算成十六进制的颜色值  ...    shift + command + C ...  调整之后，是一种绿色 ... 
这个 adjust-hue 函数里面要调整的颜色，也可以使用十六进制的颜色值  ...  我们把这个 $base-color-hsl ，换成 $base-color ...   保存 ...   会得到同样的结果 ... 
鼠标放到这个颜色上面（hsl）... shift + command + C  ..    当前这个颜色的 hue 滑块的位置是 0  ...  向下移动这个 hue 滑块  ...  到 137 这里，就是我们使用 adjust-hue 这个函数调整之后的颜色 ...   也就是让 0 度加上 137 度  ..    这个调整的角度也可以是一个负数角度  ...


03-10-颜色函数-lighten 与 darken

lighten 还有 darken 这两个函数，可以改变颜色的明度 ...  lighten 让颜色更亮，darken 会让颜色更暗 ...   这里我先定义了一个叫 $base-color 的变量，它的值是一种蓝色  ... 下面，我们再用 lighten 还有 darken 这两个函数去处理这个颜色  ..  然后再分别交给一个变量 ... 
先定义一个变量  ... 叫做 $light-color  ...  它是更亮的 $base-color  ...  它的值是用 lighten 函数处理之后的 $base-color  ...  输入 lighten  ... 这个函数有两个参数 ... 第一个参数是要处理的颜色，这里用 $base-color 这个变量来表示，逗号分隔一下，再定义第二个参数 ...  这个参数的值就是要给颜色增加的明度 ..   输入 30%  ... 
$base-color 现在这个颜色里面的 L ，也就是明度的值是 50% ，增加了 30% 以后，$light-color 这个颜色的明度的值应该就是 80% 了 ... 
在它下面再去定义一个变量  ... 叫做 $dark-color ，它的值可以使用一个 darken 函数去处理一下 $base-color 这个颜色  ...   这个函数可以减小颜色的明度 ... 这里用一个 20%  ...  也就是 $dark-color 这个颜色相比 $base-color 这个颜色，它的明度的值会减小 20% ，也就是它的明度的值会是 30%  ..
我们再去定义一块样式 ...  用一个类选择器 ...   .alert  ...  加上一个 border 属性 ...  这个边框的颜色可以使用 $base-color  ...   再用一个背景颜色的属性  ...  background-color  ... 它的值使用 $light-color 这个颜色 ...   最后再添加一个 color 属性 ...  我们把 $dark-color 这个颜色交给这个属性 ...
保存 ...   右输出的结果里面，Sass 会把颜色换算成十六进制的形式 ...  border 里的颜色是 $base-color  ... background-color 里面是 $light-color  ...   shift + command + C  ...  这个颜色会比 $base-color 要亮一些 ...  最后这个 color 属性的值，就是加深之后的 $base-color 代表的颜色  ... 
我们再打开编辑器的拾色器来理解一下 ...   点击 $base-color 的值 ..   打开拾色器 ...   在这个视频里我们使用 lighten 这个函数，加亮了这个颜色 30%  ...   也就是这个加亮以后的颜色它的明度就变成了 80%  ... 按住这个小圆圈 ... 向左移动 ...   得到的颜色，大概是这个样子 ...
$dark-color 这个颜色是用 darken 加深了 20% 之后的颜色，也就是当前的颜色减去 20% 的明亮 ...   向下移动这个小圆圈  ...  得到的颜色大概是这个样子的 ...


03-11-颜色函数 - saturate 与 desaturate

saturate 可以增加颜色的纯度，也就是饱和度，跟它相反的是 desaturate 这个函数，它可以减少颜色的纯度。下面我们去试一下这两个函数。这里我事先定义了一个变量。它的值是一个用 hsl 表示的颜色 ..   你也可以使用十六进制的颜色交给这两个函数去处理。
在这个变量的下面，再去定义两个变量  ...  这个可以叫做 $saturate-color  ... 它的值是基于 $base-color 这个颜色提高纯度的颜色 ...  可以使用 saturate 这个函数 ...   它有两个参数 ... 第一个参数是要处理的颜色值 ...  这里用 $base-color 来表示  ...   逗号分隔一下，再去指定它的第二个参数 ...   就是要增加的饱和度 ...    这里设置成 50%  ...  这样，这个颜色的饱和度就会变成 100% ... 因为原来的颜色的饱和度是 50%  ... 再加上一个 50% 就是 100%  ..
另起一行，再去定义一个变量 ...  命名为 $desaturate-color  ...  它的值可以使用 desaturate 这个函数 ...  这个函数也有两个参数 ... 首先是要处理的颜色 ...  这里就是 $base-color  ...  再输入一个逗号 ...  然后是要减少的饱和度 ...  设置成 30%  ... 这样这个颜色的值，它的饱和度就会是 50% - 30% ，也就是 20%  ... 
在下面，再去定义两块样式 ...   .alert ... 用一个 background-color  ... 它的值设置成 $saturate-color  ...   再添加一个 .alert-info  ... 同样添加一个 background-color 属性，它的值设置成 $desaturate-color  ..
保存 ...   在右边你会看到输出的结果 ...   这个 .alert 里面的背景颜色的值，就是用 saturate 函数处理的 $base-color ，也就是增加了 50% 纯度的颜色  ... 
下面的 .alert-info 里面的背景颜色的值，是用 desaturate 函数处理的 $base-color ...  就是减少了 30% 饱和度之后的颜色 ... 
我们再打开编辑器的拾色器来理解这两个函数的作用 ... 点击这个 $base-color 的值 ...  shift + command + C ...   Windows 上是 shift + ctrl + C  ... 
saturate 这个函数做的事就是相当于我们把这个小圆圈向右上角这个方向去移动  ...     desaturate 函数做的是相反的事 ...   它相当于是向左下方去移动这个小圆圈 ...


03-12-颜色函数 - opacify 与 transparentize

http://sass-lang.com/documentation/Sass/Script/Functions.html#opacity_fu...
想让一个颜色更透明一些，可以使用 transparentize  这个函数 ...    相反的，想增加颜色的不透明度，可以使用 opacify 这个函数去处理指定的颜色 ... 
这两个函数的就是去修改颜色的 alpha 的值，也就是颜色的不透明度，这个值是从 0 到 1 之间的数字 ...   0 表示完全透明，1表示完全不透明 ... 
这里我先定义了一个颜色，用的是 hsla 这个函数 ...  最后的 0.5 表示的就是 a 的值  ..   （预览）
在它下面，再去定义两个变量 ...   先定义一个变量，可以叫它 $fade-in-color  ... 它的值，是用 opacify 处理之后的颜色  ... 这个函数可以增加颜色的不透明度 ...  让颜色变得更不透明 ... 
它有两个参数，第一个参数是要处理的颜色 ... 这里我们用 $base-color 来表示 ... 第二个参数是要增加的不透明度的量 ...  设置成 0.3  ...   这样这个颜色的不透明度应该就是颜色原来的 0.5 加上这个 0.3 ，也就是 0.8  ... 
再去定义一个变量 ... 这个叫做 $fade-out-color  ...   这里在我们再用 transparentize 这个函数 ... 它可以让颜色变得更透明一些 ...  同样这个函数也有两个参数，第一个参数是要处理的颜色 ...  $base-color  ... 第二个参数是要增加的透明度，或者说减少的不透明度 ...  设置成 0.3 ....  这样这个颜色的不透明度的值就会是  0.5 减去这个 0.3 ，也就是 0.2 ... 
在下面，再去添加一块样式 ...   .alert  ...  先用一个 background-color  ...  它的值可以设置成 $fade-in-color  ...   再添加一个 border  ... 这个边框的颜色可以设置成 fade-out-color ...
保存 ...   在右边会显示出 Sass 编译之后的 CSS  ...   这里会用 rgba 的形式去表示颜色  ...  最后的这个小数表示的就是颜色的不透明度 ..   用 $fade-in-color 表示的颜色，它的不透明度是 0.8  ...   用 $fade-out-color 表示的颜色，它的不透明度的值是 0.3 ... 
再点一下这个 $base-color 颜色 ...   shift + command + C  ...   使用 opacify 处理这个颜色，相当于是把这个调整不透明度的滑块，向上移动 ...   让颜色变量更不透明 ... 
用 transparentize 这个函数处理颜色，相当于是把这个滑块向下去移动 ...   也就是让颜色变得更透明一些 ...


03-13-列表 - list

List 就是列表类型的数据，在 Sass 里面，列表就是用来表示 CSS  声明里的属性的一串值  ...   列表里的值可以使用空格分隔开，或者也可以使用逗号分隔开。比如这里的 border 这个属性的值，就是一个列表，它里面有三个使用空格分隔开的值 ...
下面的 font-family 这个属性的值，也是一个列表，这个列表里的值是用逗号分隔开的 .. 
列表里面可以包含其它的列表 ...   比如像这样 ...    padding: 5px 10px, 5px 0;     padding 属性的值是一个列表，这个列表里面又包含了两个列表，这两个列表之间用的是逗号分隔开的 .. 也就是， 5px 10px 是一个列表，后面的 5px 0 又是一个列表 ...   
这个列表我们也可以使用括号分隔开 ...    同样，这里的 5px 10px 是一个列表，5px 0 又是一个列表  ...    在编译成 CSS 的时候，Sass 会去掉这些括号 ... （保存）
padding: (5px 10px) (5px 0);
List 本身并不能做什么事，不过在 @each 指令里面比较有用，或者在 Sass 的 List 函数里面。


03-14-列表函数

列表有点像是其它程序语言里面的数组 ...  下面，我们在 Sass 的交互 Shell 里去试一下跟 List 相关的函数。 sass -i ...   想知道一个列表里面有多少个项目，可以使用 length 这个函数 ...    可以把要判断长度的列表直接交给这个函数 .. 或者也可以给它一个表示列表的变量 ...   这里我们直接在函数里面输入一个列表数据 ...
length(5px 10px)
回车 ...  结果是 2  ...  表示这个列表里面一共有两个项目 ...   再试一下 ...    length(5px 10px 5px 0)  ... 回车 ...  结果是 4 ...   这个列表里面有四个项目。
这个列表里的每个项目都有一个对应的序号，或者叫索引号，这个序号是从 1 开始的 ...   得到对应序号的列表里面的项目，可以使用 nth 这个函数 ..   输入 nth() ...  这个函数的第一个参数是一个列表 ...    第二个参数是列表项目的序号，比如我想要得到这个列表里的第一个项目，输入 1  ... 
nth(5px 10px, 1) 
返回的结果就是 5px  ...   再试一下 ...  把序号设置成 2  ...  这次返回的就是这个列表里面的第二个项目..  我们也可以判断出列表里的项目的序号，用的是 index 函数。
index(1px solid red, solid)  ，函数有两个参数，第一个参数是列表，第二个参数是要判断位置的列表里的项目 ...  这里我们看一下 solid 在前面这个列表里的序号是多少  ...    结果是 2  ... 
想往一个列表里面添加新的项目，用的是 append 函数  ...   第一个参数是要插入新项目的列表  ...    它的第二个参数就是要往列表里面插入的新的项目  ...   
append(5px 10px, 5px) ...    回车 ...   结果就是 append 返回来的新的列表 ... 
这个函数还有第三个参数，就是可以指定一下返回的列表的分隔符 ...   这个参数的值可以是 space ，comma ，或者 auto  ...  
要把两个列表组合成一个列表 ... 可以使用 join 函数  ..  输入 join  ...  这个函数的前两个参数就是要组合到一块的列表  ...    join(5px 10px, 5px 0)  ...   结果就是组合到一块儿的这个新的列表 ... 另外这个函数还有第三个参数，就是列表用的分隔符，我们可以设置成 space 或者 comma ，也可以设置成 auto  ... 
我们再设置成 comma 看一下 ...    你会发现，得到的这个列表，项目跟项目之间会用逗号分隔开 ...


03-15-map 与相关函数

map 就是列表项目带名字的列表 ...   也就是名/值对的列表。 我们可以使用项目的名字来找到它的对应的值。map 类型的数据，看起来像这个样子 ...   每个项目用逗号分隔开，项目有一个 key ，也就是项目的名字，还有对应的值 ...  名字与值之间可以使用一个冒号 ... 
$map: (key1: value1, key2: value2, key3: value3);
下面，我们到 Sass 的交互上面去定义一个 map 类型的数据，还有去试一下跟 map 相关的函数  ...   打开命令行工具 ... 输入 sass -i  ..  
这里我们先去定义一个 map 类型的数据  ...  可以把它交给一个变量  .. .叫做 $colors  ...  再用一组括号 ... 括号里面的东西就是 map 数据  ...   每个项目都有一个名字 ...   比如 light  ... 对应的值是 #ffffff  ... 逗号分隔一下 ... 再去添加其它的项目 ...  dark: #000000
$colors: (light: #ffffff, dark: #000000)
回车 ... 现在我们就有一个了 map 类型的数据 ...  ...   用在列表上的函数同样可以处理 map 类型的数据 ... 比如想查看一下这个 map 数据的项目数 .. 可以使用 length 函数  ...  
length($colors)
回车 ... 结果是 2 ，表示 $colors 里面一共有两个项目 ...  下面，我们再看一下专门针对  map 类型的数据的相关函数 ...   使用 map-get 这个函数，可以根据项目的名字，我们可以得到对应的值  ...  
输入 map-get()  ...  这个函数有两个参数，第一个参数是要得到值的 map ，这里我们用 $colors 来表示  ...  逗号分隔一下 ... 再去指定它的第二个参数，也就是在 map 里面的项目的 key   ... 比如我们要得到 $colors  里面的 dark 这个 key 对应的值   ...  这里输入 drak  ...  回车  ...  结果就是 #000000  ... 
再试一下 light 这个 key  ...  得到的结果就是跟它对应的值  ... #ffffff
想得到一个 map 里面的所有项目的 key ，可以使用 map-keys 这个函数  ...  map-keys  ... 它只有一个参数，就是要得到所有 key 的 map 数据  ... 输入 colors  ...   回车 ...  返回的结果是一个列表 ...  里面有两个项目，就是在 $colors 里面的所有项目的 key ... 
map-keys($colors)
如果想找出 map 里面的所有的值，可以使用 map-values  函数  ...  map-values($colors)  ...  回车  ... 结果就是 $colors 这个 map 里面的所有的项目的值 ... 
想要判断一个 map 数据里面是否有指定的 key 的项目 ...  用的是 map-has-key 这个函数   ...   输入 map-has-key  ... 它的第一个参数是要判断的 map ，输入 $colors  ... 第二个参数就是要判断的 key  ...   我们先试一下 light  ...    回车 ... 返回的结果是 true  .. 说明在 $colors 这个 map 里面拥有 light 这个 key 的项目 ..
map-has-key($colors, light)
我们再随便试一个其它的 key  ...     map-has-key($colors, gray)  ...  返回的结果是 false  ...  
把两个 map 合并到一块儿，可以使用 map-merge 函数  ...  输入 map-merge  ...   它的两个参数就是要合并到一块儿的 map  ...  先输入一个 $colors  ...   后面再加上一个 map  ..  ($light-gray: #e5e5e5) ... 
map-merge($colors, ($light-gray: #e5e5e5))
回车 ...  返回来的就是两个 map 合并到一块的结果  ...   
我们可以把这个结果再交给 $colors 这个变量  ... 
$colors: map-merge($colors, (light-gray: #e5e5e5))
再查看一下 $colors 这个变量  ...   现在它里面有三个项目 ...   想从 map 里面移除掉一些项目，用的是 map-remove 这个函数 ...    先输入 map-remove  ...   它的第一个参数是要移除项目的 map  ... 这里就是 $colors  ...  然后是要移动掉的项目 ...  我们可以使用项目的 key 来表示  ...  想要移除掉多个项目，项目跟项目之间可以用逗号分隔开 ..
map-remove($colors, light, dark)
回车 ...   返回来结果就是去掉了 $colors 里面的 light 还有 dark 这两个项目之后的 map 数据 ...   
http://sass-lang.com/documentation/Sass/Script/Functions.html#map-functions


03-16-布尔值

Booleans，也就是布尔值，它是用来表示数据的真实性用的...    布尔值可以是 true 或者得 false ，也就是真，或者假 ...  在 Sass 里面我们可以使用比较运算符，返回的结果就是布尔值  ...  先打开 Sass 的交互功能 ...  sass -i 
输入 5px > 3px ...    回车 ..  你会看到返回的值是 true ，因为 5px 大于 3px 是真的 ...    再试一下 5px > 10px  ...  回车 ... 这回返回的是 false ，因为 5px 不大于 10px  ...    5px < 10px  ...   这回又会返回  true ...    比较运算符还有 <= ，>= ，还有判断两个值绝对相等的 ==  ... 
在 Sass 里面还支持我们使用 and，or 还有 not ...  也就是 与，或，非 ...      and 两边的东西如果都是 ture ，那么它就是会返回 true ... 如果有一个东西是 false ，用 and 连接的表达式就会返回 false ..
(5px > 3px) and (5px > 10px)  ...  回车 .. 返回的是 false  ...  因为 and 右边的这个表达式 5px > 10px 是一个 false 的值 ...  再试一下 ...   (5px > 3px) and (5px < 10px) ...   回车 ...  这次会返回 true  ...  因为两个表示式都是 ture  ... 
用 or 连接的两个表达式 ，只要有一个表达式是 true ，整个表达式就会返回 true  ...   (5px > 3px) or (5px > 10px)  ...  这个表达式会返回 ture  ... 因为它的第一个表达式的值是 true  ...   (5px > 3px) or (5px < 10px) ...   两个表达式都是 true  ... 整个表达式也会返回 true  ...
not 是一个否定的操作，如果表达式的值是 ture ...  前面加上一个 not ，返回的就是一个 false  ...   如果表达式的值是 false 的话，加上一个 not ，返回的就是 true  ... 
not (5px > 3px) ...  回车 .. 返回的结果是 false  ...  因为 5px > 3px 这个表达式的值是 true  ... 加上 not ，结果就是 false  ...  
not (5px < 3px) ...  回车 ..  结果是 true  ...   5px < 3px 这个表达式的值是 false  .. 加上 not ，就变成了 true  ..


03-17-Interpolation

Interpolation 可以让我们把一个值插入到另一个值的里面，在 Sass 里，Interpolation，可以用这样的形式，把变量或者，表达式放到一组带 # 的花括号里面（#{}）。使用 Interpolation 这种语法，我们可以在样式的选择器或者属性的上面使用变量或者表达式。
我们先在一个字符串里面使用 Interpolation，这里先去定义一个变量 ...  叫做 $version ..  它的值可以是我们的项目的版本号 ..  "0.0.1" ..
比如我们要在一个注释内容里面使用这个版本号 ... 可以这样 ...  先输入点注释内容  .. /* 项目当前的版本是： */  在这里要加上 $version 这个变量表示的值 ...  先输入一个 #.. 再加上一组花括号 ... 在花括号里，输入 $version 这个变量 ...
/* 项目当前的版本是：#{$version} */
保存 ...  在输出的结果里，这段注释内容里面，会包含 $version 变量表示的值  ...  0.0.1  ... 
下面，我们在 CSS 的选择器还有属性里面去试一下 Interpolation  ...   比如这里我们有两个变量 ... 一个是 $name ... 它的值是选择器的名字 ...    info  ...   另外还有一个变量  .. 叫做 $attr  ... 它的值是 CSS 属性的名字 ...   border  ..
另起一行，再去添加一段样式 ...   .alert- 比如我们想在这里输出 $name 这个变量里的值 ... 如果直接使用这个变量的名字 ...  $name  ..   保存 ...  Sass 会提示错误 ...  这里我们就可以使用 Interpolation 的形式 ...  在变量的周围加上一组花括号 .. 在这个花括号的前面，再加上一个 # 号 ...  
同样在 CSS 属性名字里面使用变量或者表达式，也需要使用 Interpolation 的形式 ..  #{$attr}-color: #ccc;
保存 ...   在输出的结果里面，你会发现，Sass 正确的输出了使用 Interpolation 形式的变量的值 ...


04-01-控制指令 - Control Directives

在定义复杂的 mixin 或者 函数的时候，我们可能需要用到一些控制指令，比如去做条件的判断，当满足特定的条件才会去做一些事情。或者我们可能需要循环的去输出一些样式 ...  可以使用 @for 指令，去循环一定的次数来输出一些样式。 @each ，可以循环的去处理在一个列表数据里面的每一个项目 ...   比如你可能想要根据一个列表里的项目，来输出一些样式。 另外，我们还可以使用 @while 指令，它也可以循环的去做一些事情。


04-02-@if

@if 这个指令，可以让我们根据一些条件，去应用特定的样式。也就是当指定的条件是真的时候，就把一些样式包含进来。先用一个 @if ... 后面加上要判断的条件 ..  然后在后面的大括号里，可以把当条件为真的时候要包含进来的样式 ...    下面通过两个例子来理解一下这个指令 ... 
先去创建一段样式 ...   在这个样式里面，我们可以使用一个 border-radius  属性  ... 不过这里我们可以使浏览器的一些前缀 .. 因为比较旧版本的浏览器依赖这些前缀 ...   -bdrs  ...   用一个 5px 的圆角 ..  
在这段样式里，我们可以用一个 @if  ...   去判断一个变量的值  ...   这个变量叫做 $use-prefixes ...  如果这个变量的值是 ture ... 就把使用浏览器前缀的样式包含进来 ...   用一组花括号 ... 把这几行样式括起来 ...  
在上面，我们再去定义这个变量  ...  $use-prefixes  ...  先把它设置成 false  ...  然后保存一下 ...    在输出的结果里，你会发现，样式里面，没有包含带浏览器前缀的属性 ..   因为这些样式需要 $use-prefixes 这个变量的值是 true 的时候，才会包含进来 ...  
这次我们再把这个变量的值设置成 true  ...   再保存一下 ...  你会看到 ...  样式里面包含了浏览器前缀的属性 ... 因为 @if 指令判断的条件现在会返回一个真的值 ... 
我们可以使用 @else 继续去判断其它的条件 ...   再看一个例子 ..    比如一个 body 选择器 ...   这个样式里面，背景颜色要根据一个变量的值去决定 ... 
先用一个 @if  ... 判断一下 $theme 这个变量  ... 看看它的值是不是等于 dark  ... 如果是  ...  就把背景颜色设置成 黑色 ...   在这个花括号的外面 ... 再用一个 @else if ... 继续去判断一下 ... 再看一下 $theme 这个变量的值是不是等于 light  ...  如果是 ... 就把背景颜色设置成 白色 ...
最后，再用一个 @else  ...   如果 $theme 的值即不是 dark 也不是 light ，那么，这个背景颜色就设置成灰色 ... 
$theme: dark;
body {
  @if $theme == dark {
    background-color: black;
  } @else if $theme == light {
    background-color: white;
  } @else {
    background-color: grey;
  }
}
在上面我们再去定义 $theme 这个变量 ...   先让它等于 dark  ...    保存 ...  你会看到 ... 现在这个 background-color 的值，就会是 black  ...     
我们再把要这个 $theme 的值，设置成 light  ...  再保存 ...   现在这个背景颜色就会使用白色了 ...


04-03-@for

重复一定次数去输出一些样式，每次输出的样式可能会有一点有规律的区别 ...  我们可以使用 @for 这个指令 ...  先用一个 @for  ...  后面加上一个变量 ...  这个变量会在每次循环的时候都加上 1  ...  然后是 from 开始的值 ...  through 后面是结束的值 ...   把每次循环的要输出的样式放到后面的花括号里 ...    
@for $var from <start> through <end> { ... }
这个 @for 指令还有另外一种形式，  through 变成了 to  ... 这两种形式的区别就是停止循环的地方不太一样 ...  下面， 我们再通过一个例子来理解一下 @for 这个指令 ... 
比如我们要创建一个网格系统，根据使用的网格的数量，来设置不同的网格类的宽度 ...   这里先定义一个变量 ... 叫做 $columns ..  先把它的值设置成 4  ... 
然后再去使用 @for  ...   后面加上一个变量 ... 一般可以叫它 $i ...   from  1 ，循环从 1 开始 ...   through   ... 后面加上循环结束的值  ... 这里我们用 $columns 这个变量来表示 ...  现在它的值是 4  ... 这样这个循环就会从 1 开始，第一个循环这个 $i 的值就会是 1  ...   下一次循环的时候，它的值就会再加上 1 ，也就会变成 2  ...  循环一会到它的值为 4 的时候停止 ...  因为我们用的是 through  ... 所以这个循环会包含结束的值 ...   如果用 to 的话 ... 循环会在 $i 变成 4 以后立即停止  ... 
再输入一组花括号 ...  在这里，可以去设计每次循环要输出的样式 ...  先添加一个样式的选择器，这个选择器可以使用 .col- 开头 ... 后面加上每次循环的时候，$i 的值 ...   需要用一个 interpolation 的形式去输出变量的值  ...  #{$i} ..
用一个 width 属性 ...   这个宽度的值，需要做点数字运算 ..  我们可以使用 100% / $columns  ...  把 100% 的宽度平均分成几份 ...   再用这个数去乘以 $i  ... 这样每一次循环的时候，$i 的值是 1  ...  宽度就是 100% / 4 再乘以 1  ... 也就是 25%...
保存一下 ...    在输出的结果里，你会看到，一共输出了四段样式 ...  第一次循环输出的是 .col-1  ... 宽度是 25%  ...  第二次是 .col-2 ... 宽度是 50% .. 
这里我们可以再把这个 through ，换成 to 来试一下 ...   保存 ...  你会看到，这个循环到 4 那里就结束了，也就是它不会包含结束值的那次循环 ... 
$columns: 4;
@for $i from 1 through $columns {
  .col-#{$i} {
    width: 100% / $columns * $i;
  }
}
再撤销一下 ...  然后修改一下这个结束的值  .. 也就是去修改一下 $columns 变量的值  ... 修改成 12  ...   保存 ...   这样这个循环会执行 12 次 ...  每次循环都会根据本次循环的 $i 的值，输出对应的选择器，还有算出它的宽度值  ...


04-04-@each

你有一个列表，你想根据列表里的每个项目，去生成特定的样式，这个时候我们就可以使用 @each 指令，先用一个 @each  ...  然后是一个表示列表里的项目的变量 ...  后面是一个 in  ... 接着是要循环执行的列表 ...   
这里我们先去定义一个表示列表的变量 ... 比如叫它 $icons ...  它的值是一个列表 ...  每个项目之间使用空格分隔开 ...  success error warning  ...  我们想根据这个列表里的项目去生成一些样式 ..
输入 @each  ... 然后是表示列表里的项目的变量 ... 这里可以叫它 $icon  ...  这个变量的名字你可以随便去定义 ..  in ... 后面是列表 ...  我们用 $icons 来表示这个列表 ...  再输入一组括号 ...  {}
在花括号里，可以根据列表里的项目去输出选择器，还有属性的值  ...  先加上一个前缀  .icon  ... 然后用 interpolation 的形式，去输出当前的列表里的项目 ...  #{$icon} ...      在这块样式里，再添加一个 background-image 这个属性 ...  在它的值里面，我们也可以用到列表项目的值 ...    注意 url() 里面的东西被认为是字符串，所以，要输出变量的值的话，也需要使用 interpolation 的形式 ..
background-image: url(../images/icons/#{$icon}.png);
保存 ...   Sass 会根据列表里的项目，分别输出对应的样式 ...  第一个项目是 success  ...   对应输出的选择器是 .icon-success  ... 它的 background-image 属性的值里面，也会用到这个项目的值  ... 
@each 这个指令接着会去处理列表里的第二个项目 ..  也就是 error  ...  最后会去处理 warning 这个项目 ...


04-05-@while

@while 指令可以让我们去指定一个条件，当这个条件为真的时候，就会一直去循环的做事情，直到这个要判断的条件返回 false 为止。
它跟之前介绍的 @for 有点类似，不过 @while 循环更灵活一些，可以创建更复杂的循环操作。先用一个 @while  ... 后面加上一个要判断的条件 ...  然后在大括号里，指次每次循环要做的事情，比如输出的样式 ...  还有在这里，你需要做点事，让 @while 循环可以结束 .. 不然它会一直循环下去 .. 
我们还是通过一个例子来理解一下这个 @while 指令 ...    这里先定义一个变量 ... 比如叫它 $i  ... 它的值设置成 6 ... 另起一行 ... 输入 @while $i > 0  .. 这里的 $i > 0 就是我们设置的条件，如果这个条件一直返回 true ... 就会一直去执行后面的大括号里的东西 .. 
在这里，先输入一段样式 ...  在这个选择器上， 可以输出本次循环的 $i 这个变量的值  ...    它的 width 属性，也可以根据当前的 $i 的值去生成 ...  width: 5px * $i;  ...  
然后在这段样式的外面 ... 我们需要重新去设置一下 $i 的值  ...  让它等于它本身减去 2  ..  这样，第一次循环以后，这个 $i 的值，就会变成 6 减去 2 ，结果是 4 ，下一次循环结束的时候，它的值就是 4 减去 2，也就是 2  ... 这样这个循环最终会结束掉，因为要判断的条件，$i > 0 早晚会返回 false  ... 
保存 ...  你会看到输出的结果 ...     第一次循环，选择器里面的这个数字，就是最开始我们为 $i 这个变量设置的值 ，也就是 6  ... 它的宽度属性的值，也会根据当前 $i 的值去生成 ...  5px * 6 ，结果就是 30  ... 这次循环的结尾，我们让 $i 的值变成它本身减去 2  ...  这样下一次循环的时候，这个选择器里的数字，就变成了 4  ...   
再执行一次循环的时候，它的值会变成 2  ..   最后 2 - 2 的结果是 0 ..    @while 后面要判断的条件 $i > 0  ，就会返回 false ，这样整个循环就会结束了。


05-01-用户自定义的函数

函数的功能就是，你可以把一些值交给函数去处理，怎么样处理取决于函数本身的设计，最终函数会返回处理之后的结果。我们之前已经用到了一些 Sass 本身自带的函数。你也可以根据自己的需求去定义自己的函数。
要用的是 @function 这个指令 ... 它的后面是函数的名字 ...  然后在括号里，可以设置这个函数可以授受的参数，函数要做的事，放到一组大括号里，在函数的内部，你可以使用函数支持的参数去做一些运算 ...  这些参数会在用户执行这个函数的时候传递进来。
下面，我们就去定义一个函数  ...    这个函数做的事就是去返回 $colors 这个 map 数据里的指定的 key 的值  ...  先定义一个变量 .. 叫 $colors ... 它的值是一个 map 类型的数据  .. 里面有两个项目 ...   
$colors: (light: #ffffff, dark: #000000);
再去定义一个函数 ... 输入 @function  ... 后面加上函数的名字 ...  我们可以叫它 color  ...  再输入一组括号  ...括号里就是这个函数支持的参数  ...  给它添加一个叫 $key 的参数  ... 
把函数要做的事放到一组花括号里面 ...   用一个 @return 这个指令，去返回函数运算之后的结果  ...   这里我用一个 map-get 函数  .. 在 介绍 map 类型的数据的时候，我们介绍过这个函数的功能 ...  它可以返回指定 map 的 key 的值  ...  
@return map-get($colors, $key);
这样，我们就定义好了一个函数，名字叫做 color  ... 它支持一个参数 ... 这个函数做的事就是去返回在 $colors 这个 map 里面的指定的 key 的值  ... 
在下面，我们再添加一段样式，去使用这个函数  ...   选择器是 body  ...  里面用一个 background-color 的属性  ... 它的值可以使用 color 这个函数得到 ...  输入 color  ...  然后在括号里去指定这个函数的参数的值  ...    输入 light  ... 
保存 ...    在输出的结果里面，你会看到，这个背景颜色属性的值是 #ffffff  ... 这个值就是 $colors 这个 map 数据里的 light 这个 key 的值  ...


05-02-警告与错误

在我们自己设计的函数或者 mixin 里面，可以包含一些警告或者错误的提示信息 ...  这样用户在错误的使用你的函数或者 mixin 的时候，可以看到这些提醒 ... 
显示警告信息，可以使用 @warn 这个指令，显示错误信息，用的是 @error  ...     这里我们给之前定义的这个函数去添加一个提醒的内容  ...    在这个函数里，可以去判断一下在执行这个函数的时候，指定的参数，也就是 $colors 这个 map 里面的 key 是否存在 ...   如果不存在的话，就显示一个警告 .. 
判断用的是 @if 指令  ...  后面用一个 map-has-key($colors, $key)  ... 这个函数会在 map 里面包含指定的 key 的时候返回 true  ... 因为我们希望在不包含的时候显示这个警告 ... 所以它的前面，我们可以加上一个 not  ...    
在这个 @if 指令里面，使用一个 @warn  ...  后面是要显示的警告信息  ... 
@warn "在 $colors 里面没找到 #{$key} 这个 Key";
然后我们可以故意在调用 color 这个函数的时候，去给它指定一个在 $colors 里面没有 key  ...  这里用一个 gray  ...  保存 ...    在右边这里没有任何的显示  ...   这个警告信息会显示在命令行上面  ...  回到命令行工具  ... 
这里你会看到我们设计的警告信息  ...  WARNING  ...  在 $colors 里面没找到 gray 这个 Key  ...  
再回到编辑器 ..   这次我们把 @warn 换成 @error  ...   再保存一下  ... 
在右边输出的结果里面，你会看到这个错误的提示信息  ...


