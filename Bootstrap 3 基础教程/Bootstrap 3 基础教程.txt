00-01-下载 Bootstrap

下面， 我们先去下载 Bootstrap ，打开它的官方的网站，getbootstrap.com  ...  然后点击 Getting started  ...   找到 Download ，下载区域  .. 
在这里，有几个可以选择的版本，可以选择下载编译好的 Bootstrap，或者去下载 Source code ，源代码，也可以选择 Sass 版本的 Bootstrap 。 选择下载哪一个，要取决于你想怎么样去使用 Bootstrap 。
如果你想深度的定制一下 Bootstrap ，你可能想要的是 Source code 或者 Sass 。Source code 里面，包含了 Bootstrap 用到的 Less 文件，Sass 里面是 Sass 版本的 Bootstrap 。Less 还有 Sass 都是一种 CSS 预处理的语言，我们以后会有专门的课程介绍他们。
这里，我们可以先下载最简单的 Bootstrap ，也就是编译好的 Bootstrap ，先了解一下 Bootstrap 都能去做什么。在以后，开发复杂的应用项目的时候，我们再回来看一下 Bootstrap 的源代码。
点击这里的 Download Bootstrap ... 
回到桌面，先在这里新建一个目录来存储我们要做的东西 ...   可以叫它 learn-bootstrap  ...   
然后找到下载下来的 Bootstrap ， 解压一下 ... 复制解压以后的这个目录  ...   再回到刚才我们创建的目录 ...  把 bootstrap 粘贴到这里  ...  重命名一下它 ..   bootstrap  ...   然后再新建一个目录 ... 命名为 lib ，表示 library  ...  再把 bootstrap 这个目录放到里面。
bootstrap 里的 JavaScript 插件需要用到 jQuery，所以， 我们需要再去把 jQuery 下载下来  ... 打开 jQuery 的官方网站  ...  jquery.com
点击 Download  jQuery  ..   这会打开 jQuery 的下载页面 ...  在这里，可以选择一个要用到的 jQuery 的版本  ...
如果你不在乎低版本的 IE 浏览器的话 ... 可以选择 2.x 版本 的 jQuery  ...  因为它的体积更小一些   ...      点击这个 Download the compressed, production jQuery 2.1.1 
右键点击这个页面  ...   选择  存储为  ...   把它放到 learn-bootstrap 下面的 lib 这个目录里面  ... 
再打开编辑器 .... 这里我用的是 Brackets 这款编辑器  ...   它比较适合编辑 CSS 还有 HTML 的代码  ...   
打开文件菜单  ...  选择打开目录 ...   找到之前我们创建的 learn-bootstrap 这个目录  ...


00-02-准备 HTML 文档

这个视频我们先来看一下基于 Bootstrap 的项目要用到的基本的 HTML 文档的结构。先在项目的目录下面新建一个 html 文档  ... 命名为 index.html  ... 
如果为 Brackets 编辑器安装了 emmet 插件的话，可以这样去创建一个基本的 html 文档的结构   ... 输入一个 ! 号，再按一下 tab 键  ... 
给我们创建的是一个 html 5 的文档结构，doctype 是文档的类型 ，html 表示这是一个 html 类型的文档  ...  在 html 5 的标准里面，可以使用这样的简单的文档声明。
在 html 标签里面的这个 lang 属性，表示的是这个文档里面使用的语言 ...  en 表示英文，如果文档里面用的是简体中文，可以把它改成 zh-hans  ...  如果是繁体中文，它的值应该是 zh-hant  ... 
下面的这个 meta 标签，设置了这个文档里面的字符的编码格式用的是 UTF-8  ... 
再修改下 title，页面的标题 ...   Bootstrap - 文档的基本结构
Viewport
Bootstrap 3 是一款移动优先的前端架构，也就是首先考虑的是在移动设备上应用的样式，然后才是桌面设备 ...    这就要求页面必须要是响应式的，所以，我们需要再添加一个 viewport 的 meta 标签 ...     关于这个标签的详细的介绍，你可以参考宁皓网的 响应式网页设计 这个课程。
Brackets 编辑器的 emmet 插件，有一个快捷方式可以插入这个标签  ... 输入 meta:vp ，再按一下 tab 键  ...
这个 meta 标签的 name 属性是 viewport ，在 content 属性里面，指定了具体的行为，Bootstrap 只要求使用这里面的基本的两个，一个是 width=device-width ，宽度等于设备的宽度  ... 还有 initial-scale=1.0 ，初始的缩放级别是 1 倍。
其它的都是可选的，比如 user-scalable=no，如果你不想让用户在移动设备上缩放你的页面，可以加上它。后面的 maximum-scale 还有 minimum-scale 设备了页面的最大还有最小的缩放的级别。
如果你不在乎用户是否能不能缩放你的页面，可以把这几个设置去掉。只留下 widh=device-width，还有 initial-scale=1.0 。
compat
下面，我们再去为 IE 浏览器添加一个 meta 标签。同样 emmet 插件提供了一个简写形式 ... meta:compat    ... 
content 里面，设置成 IE=edge  ... 
<meta http-equiv="X-UA-Compatible" content="IE=edge">
这行代码的作用就是告诉 IE 浏览器用最新的引擎去渲染这个页面。
样式表
接下面再去把 Bootstrap 的样式表链接到页面上  ...   输入一个 link  ... 按一下回车键  ...   设置一下样式表的地址  ...  是在 lib 下面的 bootstrap 里面的 css 这个目录下面的 bootstrap.min.css ... 这个样式表是编译好的并且压缩之后的一个 Bootstrap 样式表。里面包含了所有 Bootstrap 架构需要的样式。比如网格系统的样式，按钮的样式，表格，表单的样式等等。
自定义样式
除了要用到 Bootstrap 架构里的样式，我们还需要去添加点自己的样式，这些样式可以放在一个样式表 ... 在这里，先去新建一个目录  ... 命名为 css ，在这个目录下面，新建一个样式表 ...  命名为 style.css ...
回到 html 文档 ...  把这个自定义的样式表也链接到页面上  ... 
脚本
Bootstrap 还包含了一些 JavaScript 插件，可以为页面添加一些交互的功能。 在 body 结束的标签的上面，可以去把它嵌入到页面上。 首先要嵌入的是 jQuery ，因为 Bootstrap 的 JavaScript 插件需要用到它  .. 
script:src  ...  jQuery 是在 lib 这个目录的下面  ...
另起一行。再去链接 Bootstrap 的 JavaScript 插件。它是在 lib 下面的 bootstrap ，js 这个目录里面，就是这个 bootstrap.min.js ，它是压缩之后的版本  ... 
总结
现在，我们就准备好了 Bootstrap 需要的基本的 HTML 文档的结构 。在后面视频里要做的所有的练习，都可以基于这个文档的结构  ...


01-01-使用网格系统 - Grid system

如果你看过宁皓网之前的课程，用 960 网格系统布局网页，还有之前的 Bootstrap 课程。你应该对布局用的网格系统不陌生。它其实就是把页面分割成了一定份数的网格，常见的比如 12 栏的网格，还有 16 栏的网格。
然后你在布局的时候，可以使用指定的网格数，比如你可以让主体内容占用 12 栏网格其中的 8 份，然后让边栏内容占用剩下的 4 份。 这样主体内容与边栏内容会在同一排上，因为它们加起来正好是 12 份。
Bootstrap 3 用的是 12 栏的网格。不过在元素上应用这些网格有一点区别。在 Bootstrap 3 的网格系统里面，每个网格类有四种类型  ... 
.col-xs，col 表示 column ，中文可以翻译成 栏，或者 列  ...  xs  表示 Extra small ，特小  ... 
是为手机准备的网格类  ...  在窗口的宽度小于 768 像素的时候，会使用 col-xs 这样的网格类。
另外还有 col-sm 类型的网格类  ...   sm 表示  small ，这样的网格类会用在小尺寸的设备上，比如平板电脑  ...   窗口的宽度大于等于 768 像素的时候，会使用这样的网格类去布局  ...
col-md ，md 是 medium ，表示中等尺寸的设备 ...  窗口的宽度大于等于 992 像素的时候，会用到这种网格类 ...   在一般尺寸的桌面电脑上，会用到这样的网格类 ... 
最后还有 col-lg  前缀的网格类 ...  lg 就是 large ，表示大尺寸的设备  ...  在窗口宽度大于等于 1200 像素的时候，会用到这样的网格类  ... 
在这些前缀的后面，就是具体的网格数  ...   比如 col-xs-6  ... 意思就是，在手机这样的特小尺寸的设备上，元素会占用 6 个网格的宽度，也就是 50% 的宽度 ... 
如果我们没有为元素设置在其它宽度的窗口上的网格类  ...  这个元素就会在所有的宽度的窗口上占用 50% 的宽度  ... 
如果你想让这个元素，在一般尺寸的桌面电脑上占用 9 个网格的宽度  ...  可以在它上面，再去添加一个 col-md-9  ...  这样这个元素在特小尺寸的设备，比如手机上，会占用一半的宽度，因为它会应用 col-xs-6 这个类的样式  ...  然后窗口到了一定宽度以后，会让这个元素占用  9 个网格的宽度  ...   因为如果窗口的宽度大于或者等于 992 像素的时候，就会去使用 col-md 类型的网格类  ...


01-02-让页面居中显示的容器 - .container

我们可以先在这个页面上添加点内容  ...  先添加一个标题  ...  上面加上一个叫 page-header 的 css 类，它可以在元素上面添加点额外的样式，比如在标题的下面添加一条灰色的线。这个类的样式已经在 Bootstrap 的样式表里定义好了。
h1.page-header  ....  主体
再它下面，再加上一行文字   ...  把它放在一组段落标签里面。
p ...  lorem  ... 
在浏览器里预览一下  ... 
不管窗口有多大，内容都会占满整个窗口显示  ... 想让内容在页面上居中显示的话  ... 可以在内容的周围添加一个带 .container 类的容器。
回到编辑器 ...  先选中这些内容   ...   如果安装了 emmet 插件，可以使用快捷键 shfit + command + A ， Windows 上应该是 shift + ctrl + A  ...    这样可以使用 emmet 的缩写形式，去包装一下选中的内容  ...  一个 div 标签，上面有一个叫 .container 的类  ...    保存 　...  
再回到浏览器  ...   你会发现，现在 ，内容会居中在页面上显示  ...    可以打开 Chrome 浏览器的开发者工具  ...   选择 Elements 选项卡  ... 
然后选中带 .container 这个类的 div 标签  ...   在右边，你可以看到应用在这个元素上面的样式  ....  然后我们可以改变浏览器窗口的宽度  ....  注意这个 .container 类的样式的变化   ... 
因为 Bootstrap 3 是响应式的设计，所以，浏览器的窗口在一定宽度的时候，这个 container 容器的宽度会有一些变化   ... 
把窗口缩小到一定程度的时候，页面的宽度会变成流动式的  ...    你会看到，现在 container 类应用的样式是左右的外边距是 auto ，左右的内边距是 15 像素。
并且在这里，这个类上面并没有设置宽度的样式  ... 而且这条样式也没有用到媒体查询。这也就是移动优先的设计思路。默认的样式都是针对移动设备的。
下面，我们再放大一下浏览器的窗口  ...     因为浏览器打开了开发者工具，所以，在改变窗口大小的时候，在页面上的右上角，会显示出当前窗口的宽度还有高度  ... 
注意，在窗口的宽度大于 768 像素的时候，.container 这个类的样式会发生变化   ...  在它上面会应用了一个固定的宽度，也就是 750px ，这个样式周围用到了一条媒体查询，min-width: 768px ，表示，窗口的宽度大于等于 768像素的时候，会把 .container 这个类的宽度设置成 750px  ...   一般的平板电脑会用到这个样式  ... 
同时这个 .container 也会用到默认的样式左右外边距是 auto ，左右内边距是 15像素 。
继续放大窗口的宽度   ... 
当窗口的宽度大于等于 992px 的时候，.container 这个类的样式又发生了一些变化  ...  它的宽度现在是 970px ，在这条样式的周围也用到了媒体查询，min-width: 992px ，意思就是宽度大于等于 992px 的时候。 这里的样式会应用在一般尺寸的桌面电脑上  ... 
注意这条样式会覆盖掉 min-widh: 768px 这条媒体查询里设置的样式。
继续放大窗口的宽度   ...  窗口大于等于 1200 像素的时候， .container 的宽度会变成 1170px ...   在它周围的媒体查询是 min-width: 1200px  ... 这里的样式会用在大尺寸的桌面电脑上  ... 
这条样式，会覆盖掉，窗口尺寸大于等于 992px 的样式，也会覆盖掉窗口尺寸大于等于 768px 的样式  ... 
总结
通过这个简单的 .container 类的样式，我们应该能对 Bootstrap 的移动优先的设计有点感觉。也就是默认的样式，都是针对移动设备设计的。
然后通过设置媒体查询，一步一步的去增加应用在大尺寸设备上的样式。


01-03-网格类 - grid

下面，我们去试一下使用 Bootstrap 3 的网格系统去布局页面。首先我们要考虑的是要使用什么样的布局，然后还要考虑一下在什么条件下使用这样的布局。
比如我们想把页面分成两栏，左边是主体内容，占用 8 个网格，右边是边栏内容，占用 4 个网格。而且我们希望只有在桌面设备上去应用这样的布局。
首先要用到的是一个带 .container 类的容器   ....    div.container   ... 
在这个容器里，可以去设计页面的布局。 每一排内容，需要放在一组带有 .row 类的容器里面。 div.row  ... 
在它里面，我们把页面分成两个部分  ... 可以分别把每个部分放到一组 div 标签里  ...   div*2
然后我们决定，在桌面设备上把这排内容分成左右两栏  .... 左边占用 8 份的宽度，因为 Bootstrap 的网络系统会把页面分割成 12 份，所以，占用其中的 8 份，就相当于是页面宽度的 66.6%。  右边右用 4 份的宽度  ... 也就是剩下的 33.3%  的宽度   ... 
这里，在第一个 div 标签上，添加一个 col-md-8   ....   col 的意思是 column  ..  md 表示中等尺寸 ... 8 表示占用 8 栏网格。 col-md 这种网格类的样式，会在一般的桌面电脑的设备上使用  ... 
然后把剩下的宽度留给下面这个元素  ..   在上面添加一个 col-md-4   ...  表示在中等宽度的设备上，这个元素要使用 col-md-4 这个类的样式  ... 
在这两个元素的里面，再添加点内容  ... 
h1.page-header   .... 主体  ... 边栏  ....   保存  ...   回到浏览器   ...  
现在，浏览器的窗口宽度跟在一般的手机屏幕的宽度差不多  ...  你会看到主体与边栏这两栏内容会堆叠在一起显示  ... 
下面，我们再调整一下浏览器宽度的宽度  ... 让它变大一些  ...    注意在窗口宽度大于等于 768 像素的时候， .container 这个容器会应用一个固定的宽度  ...  不过主体和边栏仍然是堆叠在一块儿的  ... 
继续放大窗口的宽度  ...     在窗口宽度大于等于 992像素的时候，你会发现，主体跟边栏会显示在同一排  ...    
下面可以选中这个应用了网络类的元素  ...    现在，页面上应用了在这个类上定义的样式 ...   col-md-8 ，占用 12 栏其中的 8 栏，宽度就是整个页面的 百分之 66.666  ...  
它下面的这个使用 col-md-4 这个类的元素，宽度是百分之 33.333
注意这两个类的样式的周围都用了一个媒体查询  ..  min-widh:992px ，它的意思就是，只有在页面的宽度大于等于 992 像素的时候，才会使用这些样式。
我们可以继续去放大页面的宽度  ...   同样，会把页面分成两部分  ...  左边占用百分之 66.6 的宽度  .. 右边占用百分之 33.3 的宽度   ..
现在，我们想改变一下，我们想让页面，在平板电脑这种宽度的设备上开始，就把页面分成像现在这样的布局  .... 
这样，可以把应用的网格类换成 col-sm 类型的  ...   sm 是 small 的简写  ...  
回到编辑器  ...    把 col-md  ... 换成 col-sm  ...   意思就是，我们要在小尺寸的设备就应用这样的布局的网格类  ... 
保存  ...
回到浏览器  ...  然后可以把窗口缩小一下  ....   再慢慢放大窗口的尺寸 ...
注意，在窗口的宽度大于等于 768 像素的时候，就会应用布局的网格类  ...   把页面分成了两部分  ... 显示在同一排  ...  左边占用百分之 66.666 的宽度 ... 右边占用百分之 33.333 的宽度   .... 
继续放大窗口的宽度   ....    会保持同样的布局  ... 
也就是，现在，除了在小尺寸的设备上，主体跟边栏会堆叠在一起显示以外  ... 其它的宽度都会把页面分成左右两部分  ... 
如果你想要的是，在手机这种宽度的设备上，把页面就设计成这种布局，我们可以使用 col-xs 类型的网格类  . ..   xs 表示 Extra small ，特小  ... 
回到编辑品  ... 把 col-sm 换成 col-xs  ...   
保存  ...
回到浏览器   ... 刷新   .... 缩小窗口的宽度   ...  
你会发现，在很小的宽度的窗口上，页面也会分成左右两部分，左边是百分之 66.666 的宽度，右边是百分之 33.333 的宽度  ...


01-04-混合使用网格类 - mixed

混合宽度的布局。就是，你可以决定布局在不同尺寸的设备下的不同的变化。比如之前我们做的那个简单的两栏布局。你可以让这个布局，在手机设备上是一种样式，在平板上是一种样式，在桌面电脑上是一种样式。
现在，我们这里有两块用 div 标签包装的内容  ...   在上面，还没有使用布局用的风格类  ...    先到浏览器上看一下  ... 
默认这两块内容，都堆叠在一块儿显示  ...    而且不管在什么样宽度的窗口下面，他们都会堆叠在一块儿  .... 
回到编辑器  ... 现在，我们想让这两块内容  ... 在手机这样的尺寸的设备上，各占一半显示在同一排  ...   应用在手机尺寸的设备上的风格类是 col-xs  ... 
各占一半的话，可以分别在这两块内容上面，添加一个 col-xs-6  ...  因为 Bootstrap 的网格系统是把页面分成了 12 栏  ...  一半正好就是 6 栏网格  ... 
保存  ... 回到浏览器  ...  刷新 ...
你会发现，在任意宽度的窗口下  ...  这两块内容都会各占一半显示  .... 
现在， 我们想在平板尺寸的设备下，改变这个布局的显示  ...  可以让主体占用 8 栏网格，让边栏占用剩下的 4 栏网格 ... 
回到编辑器  ...  在要布局的容器上面，可以继续去添加其它的网格类  ....   应用在平板尺寸设备上的网格类是 col-sm  ....   在主体的容器上，添加一个 col-sm-8   ....  然后在 边栏上面，再添加一个 col-sm-4   ... 
这样，当窗口的宽度在平板设备的宽度以上的时候，就会应用这种 col-sm 类型的网格类  ...  这些类上的样式，会覆盖掉前面的应用在更小尺寸上的网格类的样式 ...   
保存  ... 再回到浏览器  ... 刷新一下 ... 
窗口宽度缩小一下  ...   当前会使用 col-xs 这样的网格类的样式 ...   主体跟边栏各占一半的宽度  ... 
再放大一下窗口的宽度  ...  到一定程度的时候，也就是窗口的宽度大于等于 768 像素的时候，就会去使用 col-sm 这样的网格类  ...   因为在主体上使用了一个 col-sm-8，所以这块内容，会占用 8 栏网格的宽度  ...
剩下的 4 个网格的宽度，会用在边栏上面  ... 
再回到编辑器  ...  我们可以继续去添加其它类型的网格类  ...   比如我们让主体这块内容，在普通的桌面设备上，占用 9 个风格的宽度  ...  这里可以再用一个 col-md-9  ... 
然后把剩下的 3 个网格的宽度，留给边栏 ...  在这个元素上，添加一个 col-md-3  ...  col-md 类型的网格类，会在窗口的宽度大于等于 992 像素的时候使用  ... 
最后，还有一种为大尺寸的桌面设备准备的网格类  ...  也就是 col-lg 类型的网格类。这些网格类会用在窗口宽度大于等于 1200 像素的时候。
在这种情况下，我们让主体占用 10 个网格的宽度  ...    在主体内容的容器上再添加一个 col-lg-10   ... 
剩下的两个网格的宽度交给边栏  ...  在边栏上，添加一个 col-lg-2  ...
保存  ... 再回到浏览器  ... 刷新  ... 
选中主体或者边栏元素  ....  注意应用在这个元素上面的样式的变化  ... 
缩小浏览器窗口的宽度  ...     现在， 用在这个主体元素上面的样式是 col-xs-6   ...   它的宽度是 50%  ... 
然后再慢慢放大窗口的宽度  ....
大概在平板尺寸的设备上的宽度的时候，主体这块内容的容器上，会使用一个 col-sm-8 ，把它的宽度设置成百分之 66.6666   ...
继续放大  ...  在一般的桌面设备宽度的时候  ... 用在主体上的样式来自 col-md-9 这个类  ...  注意在这个类上的样式，会覆盖掉 col-sm ，还有 col-xs 这样的 css 类的样式。
现在，主体的宽度是 75%   ...  
再放大一下窗口的宽度   ...  当窗口的宽度大于等于 1200 像素的时候，在主体内容的上面，会使用 col-lg-10 这个类的样式，会把主体内容的宽度设置成百分之 83.3333  ... 
现在，在应用在边栏上面的样式，也会是来自 col-lg 类型的网格类  ... 这里用的是 col-lg-2   ... 宽度会是百分之 16.6666  ....


01-05-内容列的顺序 - push 与 pull

现在， 页面上显示的两块内容，主体还有边栏，会堆叠在一起  ...   下面，我们去在它们上面添加两个网格类，排列一下它们的显示  ... 
回到编辑器  ...  在主体上，添加一个 col-md-9 ，意思就是，让这块内容，在一般尺寸的桌面电脑设备上占用 9 个网格的宽度  ..
然后在边栏上，添加一个 col-md-3   ...  
保存 ... 回到浏览器  ...   现在， 页面分成两栏显示，左边是主体内容占用  9 个网格的宽度，右边是 边栏，占用 3 个网格的宽度  ...    假设现在，我们想在不改变代码的结构的情况下，去让边栏这块内容显示在左边，让主体内容显示在右边  ... 这个时候，我们就可以使用 Bootstrap 提供的 push 还有 pull 类型的 css 类。  把元素向右推，还有向左拉  ... 
回到编辑器  ...  在这个主体部分上面，添加一个 col-md-push-3  .... 注意这个类是 col-md 开头的  ... 就表示说，这个类会用在一般尺寸的桌面电脑设备上，也就是窗口的宽度大于等于 992 像素的时候  ... 
在这里用到的 push 类要跟在这个元素上使用的网格类相对应，因为网格类，用到也是 col-md 类型的，所以，这里也就要使用 col-md 类型的 push 类。
col-md-push-3 ，它的意思就是，在中等尺寸的设备上，把主体这块内容向右推 3 个网格的宽度  ...  这样在它的左边，就会留个 3 个网格的空间。我们可以在边栏上，去添加一个 pull 类型的 css 类，把边栏向左拉  ... 
找到边栏  ... 在上面添加一个 col-md-pull-9   ... 因为边栏这块内容，向左拉 9 个网格的宽度，才能让它正好在主体内容的左边留出来的这块空间上显示 ... 
保存  ... 
回到浏览器  ...  注意主体还有边栏的位置的变化   ... 刷新一下  ..
你会看到，边栏会跑到左边来显示  ... 占用 3 个网格的宽度 ....   主体内容会在右边显示  ...  占用 9 个网格的宽度  ... 
我们并没有改变页面的代码的结构  ...   主体内容的代码仍然是在边栏代码的上面  ....     通过在元素上面添加 push ，还有 pull 类型的 css 类，可以改变内容的显示  ... 
使用这种方法的主要原因可能是 SEO ，搜索引擎优化  ... 因为搜索引擎会认为主要的内容会在页面的上方显示，所以，主体内容的代码放在了边栏代码的上面  ...


01-06-嵌套的布局 - nesting

现在你看到的是一个简单的两栏布局的页面，左边主体部分占用了 8 栏网格，右边的边栏，占用了剩下的 4 栏网格。
在主体或者边栏的里面，我们可以使用嵌套布局，比如可以再把主体这块，再分成几个小部分。每个部分里面，再放点东西。 
先回到编辑器 ... 找到主体这块内容的代码  ...   你会看到在它上面再在用了一个 col-md-8 ，表示在中等尺寸的桌面电脑设备上，它会占用 8 个网格的宽度。
在它的里面使用嵌套的布局，需要先用一组带 row 类的容器  ... 可以用一个 div 标签  ... 上面加上一个 row  ..
div.row   ... 
用它，在主体内容的内部，去定义一排新的内容  ...    主体这块的空间又会被分成 12 份，比如，我们想在这里显示三块内容，各占用三分之一的宽度。这样也就是每块内容上，要使用的网格数是 4 。
div.col-md-4*3
在它们里面再添加点内容   ...   h2 ... 区块一  ....  p ... lorem  ..  安装了 emmet 插件以后，可以使用快捷键 alt + command + →  ... 跳转到下一处编辑点 ...    Windows 上应该是 alt + ctrl + →
区块二 ... lorem  ... 区块三  .. lorem  ... 
保存  ... 回到浏览器   ... 刷新   ... 
你会看到，主体内容的里面，又平均分成了三份。 
我们可以继续往这里添加新的内容  ...   新添加的内容会挤到第二排显示，因为第一排的空间已经被占满了  ...   回到编辑器  ... 
再添加一个 div 标签，上面加上一个 col-md-6  ...    需要两个这样的元素 .... 分别在它们里面，再加上点东西  ... 
保存  .. 回到浏览器  ... 刷新   ... .
在新的一排会显示后来添加的区块四，还有区块五  ...  
再回到编辑器。我们在 区块一这里，多加点东西  ... 保存  ... 回到浏览器  ...
你会发现，区块四，被区块一给挡住了  ...  解决这个问题，可以在区块四的前面，加上一组带 clearfix 类的元素  ... 或者，我们也可以把区块一到区块三，放在一个带 row 类的容器里面。
再把区块四，还有区块五，放在一个带 row 类的容器里面  .... 
先回到编辑器  ...    在 区块四的上面，添加一组 div 标签  ... 上面加上一个 clearfix  类  ... 这个类的样式，可以修复元素浮动的问题  ...
保存  ... 再回到浏览器上看一下  ....  
这次，区块四，还有区块五，又会在新的一排显示了。


01-07-偏移的空间 - offset

想让某块内容向右偏移一定的空间，可以使用 Bootstrap 提供的 offset 类型的 css 类。 跟布局网格类类似， offset 也有一些前缀，col-xs，col-sm，col-md，col-lg  ... 使用哪个前缀决定了在多大的窗口宽度上面去使用偏移  ... 
比如我们想让 区块四 这块内容，在一般尺寸的桌面设备上向右偏移 6 个网格的空间  ...  这样要用到的 offset 类就应该是，col-md-offset-6  ... 
回到编辑器  ...  找到 区块四 这块内容的元素  ...  
然后在它的包装内容的容器上面，添加一个 col-md-offset-6   ...    为了区分一下  ... 我们可以在区块四的文字上面，添加点额外的样式  ... 加上一个 alert ，还有 alert-info  ... 这些类的样式已经在 Bootstrap 的样式表里定义好了。
保存  ... 
回到浏览器  ... 刷新   ....
你会看到，区块四，会向右偏移一定的空间  ...   这个偏移的空间，对于 主体这块内容来说，相当于是主体内容的一半。
我们可以改变一下窗口的宽度   ... 
你会发现，这个偏移会用在中等尺寸，还有大尺寸的设备上  ...   在小尺寸，还有特小尺寸的窗口上面不会使用这个偏移  ...


01-08-隐藏与显示的响应式工具类

在 Bootstrap 3 里面，给我们提供了一些在响应式的页面上，显示或者隐藏内容的 css 类。
显示内容的类是用 visible 开头的  ...  后面加上表示窗口尺寸的后缀  ...  比如 xs 表示特小的设备，sm 是小设备，md 是中间尺寸的设备，lg 是大尺寸的设备。
比如你想让某块内容，只在特小尺寸的移动设备上显示 ...  可以在这块内容上添加一个 visible-xs   这样的 css 类。
或者，你可能想让某块内容，只在特小尺寸的移动设备上隐藏的话  ... 可以在这块内容上面添加一个叫 hidden-xs 的类。
下面，我们去试一下  ... 
在这个文档里，先添加一块内容  ... 让它只显示在特小尺寸的移动设备上  ... 
可以把它放在主体这块内容里面  ..  用一组段落标签  ...  上面加上一个 visible-xs 类  ... 
再给它点文字   ...   在这段文字上可以再添加点额外的样式  ... 用一个 alert   ... 再加上一个 alert-info   ... 
<p class="visible-xs alert alert-info">我们有支持 iOS 平台的 App，点击下载！</p>
保存  ... 回到浏览器  ... 刷新   ...   在这里，没有显示刚才添加的那段文字   ... 
缩小一下窗口的宽度  ...   在特小尺寸的宽度范围内，会把这段文字显示出来  ...   也就是，使用了 visible 类的元素，只在特定尺寸的窗口上显示它。在其它尺寸的窗口上面，都会把元素隐藏起来  ... 
下面，我们可以在这个边栏上面，添加一个 hidden 类  ...   让边栏只在特小尺寸的设备上隐藏起来  ... 在其它尺寸的窗口上都显示  ... 
回到编辑器  ... 找到边栏  ...    在它上面，添加一个 hidden-xs     ...   表示只在 xs ，特小尺寸窗口下面隐藏这个元素。
保存  ...  回到浏览器  ... 刷新   ... 
现在窗口的宽度在特小尺寸这个范围内  ... 所以，边栏就会被隐藏起来 ... 
再放大一下窗口的宽度  ....   到一定程度的时候， 边栏又会显示出来 ....  继续放大  ...  同样会显示边栏  ...  因为边栏只有在特小尺寸的窗口上才会被隐藏  ...


02-01-导航栏 - navbar

在 Bootstrap 里面，设计了很多在页面上常用的组件。 在这一章里， 我们看一下导航栏这个组件。在 Bootstrap 里，导航栏这个组件叫做 navbar   .. 
下面，我们就在这个空白的页面上创建一个导航栏  ...  如果你想让导航栏在页面上居中显示的话，可以先用一组带 .container 类的 div 标签
div.container
导航栏本身可以使用 nav 这个标签，nav 就是 navigation 的简称。在这个标签上，需要两个类，一个是 navbar，还有一个是 navbar-default  ... 
nav.navbar.navbar-default
在页面上，你会看到带灰色边框的灰色背景的条  ...  
在导航栏上，可以包含网站的标志  ...  我们可以把它放在一组 a 标签里面  ....   在这个标签上，需要一个 navbar-brand 类 ...
a.navbar-brand ...
这里我们用纯文字做为项目的标志  ...  用一组 strong 标签，加粗显示一下 ...  ninghao  ...   然后在加粗标签之后，再输入一个 .net  ....
在它的下面，可以是导航栏上的菜单项目  ...  这个菜单可以放在一组 ul 标签里面  ....  也就是无序的列表标签 ... 在这个标签上，也需要加上两个特别的类  ..  一个是 nav  ... 还有一个是 navbar-nav  ...
ul.nav.navbar-nav 
它里面是每个菜单项  ... 每个菜单项都可以放在一组 li 标签里面  ...    这里我们添加三个菜单项  ...  每个菜单项里面，都有一个 a 标签  ...   a 标签里面就是菜单项上的文字  ...
li*3>a
课程 ...   博客  .... 手册  ....
现在，你会看到，页面上的导航栏上面，会有一个标志的文字   ... 还有三个菜单项  ....  课程，博客，还有手册  ... 
在激活的菜单项上面，可以加上一个叫 active 的类  ...  它可以为菜单项添加点额外的样式，区别一下  ... 这样用户可以知道自己当前所处的位置，属于哪个菜单项 ...
在菜单项的 li 标签上，去添加这个 active 类  ... 
你会看到，应用了这个类的菜单项，默认会有一个灰色的背景。


02-02-固定在页面顶部或底部的导航栏

Bootstrap 里面的导航栏有两种样式，你现在看到的是默认的样式，这里我们把 navbar-default 这个类  ... 换成 navbar-inverse  ... 
这样会得到一个暗色背景的导航栏，文字，背景的颜色都会有些变化  ...   我比较喜欢这个样式  ...  
我们可以让这个导航栏固定在页面的顶部，或者底部显示  ... 在导航栏的这个 nav 标签上  ...  再添加一个 css 类 ...  把导航栏固定在页面顶部，可以添加一个 navbar-fixed-top 类 ...
你会看到，现在这个导航栏会跑到页面的最顶部显示  ...  而且它会固定在这里，也就是，不管怎么滚动页面，这个导航栏始终会显示在这里。
现在有一个问题 ... 就是导航里面的内容，不再居中显示了 ...    （# 调整窗口的宽度）
解决这个问题，可以在导航栏的内部，可以用一个带 .container 类的 div 标签包装导航里面的内容  ... 
我们先去掉最外层的这个带 .container 类的 div 元素 ...  
然后把它添加到导航栏的内部，可以直接放在 nav 这个标签的里面。
现在， 你会看到，导航栏里的内容，又会居中在页面上显示了  ...  
额外的边距
在这个导航栏的下面，再添加点其它的内容  ... 把内容放在 nav 标签以外  ...   用一组带 .container 类的 div 标签   ... 这样会让内容居中在页面上显示 ..
在它里面，用一组段落标签  ... 上面加上一个 alert ，还有 alert-info  ...     再回点文字   ... 
p.alert.alert-info  ...  lorem ... 
你会看到，刚才添加的这块内容，被导航栏也挡住了一块儿 ...    解决这个，需要手工在页面的 body 标签上，添加一个上边的内边距 ..  
打开这个页面的自定义样式表  ... 在 css 目录下面 ...  style.css   ... 
body  ....  pt70   ... 为 body 标签，添加一个 70 像素的上边的内边距  ...   现在，导航栏下边的内容，刚才被挡住的地方已经显示出来了 ... 
导航栏本身的高度是 50像素，应用在 body 标签上的上内边距是 70 像素 。这样导航栏下边儿的内容，会跟导航栏之间，留出一个 20 像素的空间  ... 
固定在底部
想把导航栏固定在页面的底部的话，可以在导航栏上添加一个 navbar-fixed-bottom 的类  ... 
这里我们把 navbar-fixed-top 改成 navbar-fixed-bottom   ...   
现在， 这个导航，就会固定在页面的底部显示了  ...
这里我们还是想把导航放在顶部，所以再换成原来的 navbar-fixed-top    ... 
静态
在 Bootstrap 里面，还有一个类，可以把导航栏放到页面顶部显示  ...    要用到的 css 类是 navbar-static-top  ...   跟 navbar-fixed-top 不同的是  ... 使用这个类的导航栏，会跟着页面的滚动而滚动  ... 
把这个 navbar-fixed-top 换成  navbar-static-top   ...   然后为了可以让页面能滚动  ... 我们在它下面的这个元素上，添加一个定义高度的样式  ... 
加上一个 style 属性  ...  把 height 设置成 1500px  ...  
滚动页面  ...   你会看到，现在， 导航栏会跟着页面的滚动而滚动  ...  它上面的这块空白是我们刚才在自定义样式表里为 body 标签添加的内边距样式  ...  如果你想使用这种导航栏的话，需要把这个样式去掉  ... 
下面， 我们再换成原来的 navbar-fixed-top   ... 
再滚动页面  ... 
你会看到，这个导航栏始终会固定显示在页面的顶部  ....


02-03-导航栏中的表单

下面，我们在导航栏上，添加一个搜索用的表单。添加一个表单，需要一组 form 标签   ... 
form
在它的里面，可以搜索表单元素 ...  先添加一个文本框元素  ...   也就是一个 text 类型的 input 元素  ... 在它上面加上一个占位符的文字  .... 用一个 placeholder 属性  ...   搜索  ...  
input  ... 
再添加一个提交请求的按钮  ...  用一个 button 标签  ...  设置一下它的 type 属性，设置成 submit  ... 
在这个提交的按钮上，我们可以使用一个图标  ...    在 Bootstrap 里面，有一批可以用的字体图标  ...  使用这些小图标，先用一组 span 标签。然后在这个标签上，要添加特定的 css 类  ... 一个是 glyphicon   ..   后面要再加上一个表示具体某个小图标的 css 类  ... 我们要用的是一个搜索图标 ...   所以对应的类是 glyphicon-search   ... 
在这个地址里，你可以找到在 Bootstrap 架构里面，所有的可用的小图标  ... 
在文本框这个表单元素上，需要添加一个叫 form-control 的类  ...   它会在元素上添加点额外的样式  ... 
在导航栏里的表单  ... 我们还要在 form 这个元素上，加上两个 css 类  ...  一个是 navbar-from  ...   还是一个是可以控制元素浮动的 css 类  ...  让它浮动到左边  .. 可以加上一个 navbar-left  ...   浮动让右边显示，可以把它换成 navbar-right   ...  这里我们设置成 navbar-left  ... 
自定义样式
下面，我们要做的就是为这个搜索表单添加点自定义的样式  ...   让它在这个暗色的导航栏里显得更自然一些  ... 打开 自定义样式表  ...  在 css 这个目录的下面 ... 打开 style.css  ... 
先设置一下这个文本框的样式  ...   设置一下样式的选择器  ... 
.navbar-inverse input[type="text"] {}
这个选择器的意思就是，设置一下在暗色导航栏下面的 text 类型的 input 元素的样式 ...  
先改一下背景颜色   ...   改成 313131   ... 
再去掉文本框的边框  ...   border: none  ...   设置一下在文本框里的文字的颜色   ...  color: #999
再设置下这个搜索按钮的样式  ...  我们可以去掉这个按钮的背景还有边框  ...  调整一下这个按钮的显示的位置  ... 最后再设置下小图标的颜色。
先把包装这个按钮元素的容器，添加一个定位的样式  ... 
.navbar-inverse .navbar-form {
    position: relative;
}
.navbar-from 就是用在导航栏里面的 form 标签上的那个类  ... 这里我们把它的位置设置成了相对的  ... 然后我们可以让搜索按钮，基于这个元素去绝对定位  ...  先找到这个搜索按钮  ... 
.navbar-inverse button[type="submit"] {}
这个样式选择器的意思是，去设置一下在暗色导航栏下面的 submit 类型的 button 标签的样式 ... 
添加一个 position 属性  ... 它的值设置成 absolute  .. 表示使用绝对定位  ...  再设置一下它的上边还有右边的位置  ... 
先加上一个 top 属性  ...  值可以是 15%    ...  再加一个 right 属性  ... 设置一下这个按钮基于包装它的 form 标签的右边的位置  ...  这里设置成 20px  ...
然后再去掉按钮的背景  ...   background: none   ... 再去掉它的边框  ..  border: none;
最后，我们可以再修改一下这个按钮上的小图标的颜色  ... 
.navbar-inverse .glyphicon {
    color: #999;
}
现在，在我们的导航栏上，就有了一个自然的搜索表单了  ...


02-04-导航栏中的文字，按钮与其它菜单

我们先看一下在导航栏中的按钮，这个按钮，可以用 button 标签，按钮类型的 input 标签，或者，我们也可以使用一个链接的 a 标签。这里我们用一个 a 标签去定义一个按钮  ... 
Bootstrap 为按钮设计了很漂亮的样式，你只需要在想变成按钮的元素上添加 Bootstrap 事先定义好的 css 类就可以了。
首先要添加的类是 btn ，这是一个基础的类，定义了按钮的基本的样式。 然后再添加一个决定按钮样式的类  ...   这里我们用一个 btn-primary   ... 
然后可以再加上一个控制按钮大小的类  ...  btn-sm ，可以让这个按钮小一号  ..
在导航栏上的按钮，可以再加上一个 navbar-btn  ...  它可以在按钮的周围添加合适的边距 ...
在导航栏上想要元素靠左或者靠右显示，可以使用 navbar-left 还有 navbar-right  ...  这里，我们让它靠右去显示，添加一个 navbar-right
<a href="" class="btn btn-primary btn-sm navbar-btn navbar-right">订阅课程</a>
其它的菜单
在这个导航栏上面，我们可以再添加一个菜单，这个菜单上项目可以是登录或者注册用的链接  ... 
用一组 ul 标签  ... 上面加上一个 nav 还有 navbar-nav 这两个类  ....   再加上一个改变浮动的类  ... 让它靠右显示  ... 所以加上一个 navbar-right  ... 
这个菜单跟这个订阅按钮离的太近了，可以在它上面再添加一个外边距的样式  ... 
我们可以在它周围再添加一个包装的容器  ...  上面定义一个 css 类　... 可以叫做 profile  ... 
再把这个 navbar-right 添加到这个元素上面  ... 
然后，打开自定义的样式表  ...  为 .profile  这个类定义一个样式  ... 给它添加一个右边的外边距  ..  
.profile {
    margin-right: 25px;
}
保存，再回到 index.html ...
导航栏上的文字
下面再看一下导航栏上的文字  ...   比如在登录成功以后，可以把这个菜单隐藏起来，然后显示一行文字  ... 在这个 .profile 容器里面 ...
用一组 p 标签 ...  您好 ... 后面可以有是一个链向用户档案页面的链接  ... 
<p>您好，<a href="#">王皓</a></p>
在导航栏上的文字上面，可以加上一个 navbar-text ，这个类可以要为文字添加合适的边距  ... 
导航栏上的链接也可以加上一个特别的类，它可以改变链接的颜色。在这个 a 标签上，添加一个 navbar-link  ... 
            <div class="profile navbar-right">
                <ul class="nav navbar-nav">
                    <li><a href="">注册</a></li>
                    <li><a href="">登录</a></li>
                </ul>
                <p class="navbar-text">您好，<a href="#" class="navbar-link">王皓</a></p>
            </div>


02-05-响应式的导航栏

shift + command + C 高亮实时预览
下面， 我们看一下在 Bootstrap 里面的响应式的导航栏。 在小尺寸的设备上，导航栏上的东西，比如这个菜单，搜索框，订阅按钮这些东西，都会被折叠到一块儿 ...  然后在窗口的右上角显示的一个按钮 ... 点击这个按钮，可以把折叠起来的内容显示出来。
我们需要先把要折叠起来的东西，用一个元素包装起来  ... 可以使用一个 div 标签  ... 在这个标签上面，需要一些 css 类，还要再定义一个 id  ...
添加一个叫 collapse 的类  ... 还有 navbar-collapse  ...  在上面再定义一个 id ，一会儿，在切换显示它的按钮上，需要用到这个 id  ... 这里我们可以叫它 responsive-navbar  .. 
div.collapse.navbar-collapse#responsive-navbar
用这个 div 标签，包装一下要在导航栏上折叠起来的东西  ... 
然后，我们再去定义切换显示它的那个按钮 ... 
在这个 navbar-brand 元素的上面  ... 
添加一组 button 标签  ...   上面加上一个叫 navbar-toggle 的类  ...   
button.navbar-toggle
在这个按钮上，还需要两个 data 属性  ...  一个是 data-toggle  ... 它的值设置成 collapse  ...   这个属性可以开启这个按钮的切换显示折叠内容的功能 ...
然后再添加一个 data-target 的属性  ... 它的值设置成在折叠的包装元素上面定义的那个 id  ...   就是这个 id   ...  responsive-navbar  ...
这个属性的意思就是，指定了要切换显示折叠的内容  ... 
<button class="navbar-toggle" data-toggle="collapse" data-target="#reponsive-navbar"></button>
在这个按钮的里面，再加上几个东西  ...
一个 span 标签，上面加上一个 icon-bar 的类  ..  需要三个这样的东西  ...    它们就是在按钮上显示的那三条横线  ... 
span.icon-bar*3
最后再把这个按钮，还有导航栏上的标志，放在一组带 navbar-header 这个类的容器里面  ... 
div.navbar-header  ... 
预览
下面，再到浏览器上试一下  ... 保存  ... 回到浏览器  ...
调整浏览器的窗口的宽度  ...    缩小到一定程度以后  ... 你会发现  ... 导航栏上的内容就会被隐藏起来了  ...  然后在导航栏的右边会显示出一个按钮  ... 
点击这个按钮 ... 会出现一个下拉菜单  ... 在这里，会显示出被折叠起来的导航栏上的内容  ... 
我们可以再调整一下内容在这里的显示  ... 比如这个搜索按钮的位置  ...      还有这个 订阅课程 的按钮，在这里可以把它隐藏起来  ....


02-06-理解移动优先的设计思想

使用之前我们介绍的响应式的工具类  ... 
想把这个 订阅课程的按钮在手机大小的设备上隐藏的话  ...  可以在这个元素上面加上一个 hidden-xs   ... 
修改
再回到编辑器去修改一下  ...  找到 订阅课程 这个按钮  ... 在它上面，加上一个 hidden-xs 类  ...   然后再去调整一下搜索按钮的位置  ...  打开自定义的样式表 ...  
因为 Bootstrap 3 是移动优先的设计思想，所以，默认所有的样式都是会应用到小尺寸的移动设备上的  ... 比如像手机大小的设备  ...   这样我们就可以直接去修改一下这个搜索按钮的位置  ...
把 top 属性的值，设置成 25%   ...   
然后我们再通过媒体查询，去设置一下这个按钮在其它尺寸的设备上的显示位置  ... 
@media (min-width: 768px) {
    .navbar-inverse button[type="submit"] {
        top: 15%;
    }
}
这样这个按钮在窗口宽度大于或等于 768 像素的时候，它的 top 的位置是 15%   ...
保存  ... 回到浏览器  ...
点击这个按钮  ...  现在， 你会看到，订阅课程的 按钮已经被隐藏起来了  ...   这个搜索按钮的位置也会有一些变化  ... 
再放大窗口的宽度  ....    订阅课程 这个按钮又会显示出来  ...   并且这个搜索按钮的位置也会显示在合适的位置上  ...


03-01-对话框 - Modal

点击某个按钮或者是链接 ，可以在当前的页面上，打开一个对话框，你可以设计这个对话框的作用，比如显示一个登录或者注册用的表单   ...  这就是 Bootstrap 的 Modal 组件的作用。
下面，我们去看一下怎么样使用 Bootstrap 的 Modal 组件 。这个对话框需要一些特定的代码结构  ... 
先去掉这个  style="height: 1500px;"  
然后我们可以对话框需要的代码它放在页面的底部  ...  默认对话框是隐藏起来的  ...   这里我们为了可以实时的看到对话框的变化去设计它的样式  ... 可以想办法把它显示在页面上  ... 
先添加一组 div 标签   ... 上面加上一个 modal-backdrop  ... 还有一个 in  ... 
div.modal-backdrop.in
在打开对话框以后，会在页面上，添加这样一组标签  ... 它的作用就是在对话框的下面，添加一层暗色半透明的背景  ...   让用户的注意力集中在对话框本身 ... 
这里我们手工添加这组标签是为了看一下打开对话框以后的效果 ...   在真正使用的时候，需要把它去掉  ... 
在它上面，我们再去设计这个对话框  ...
首先是一组 div 标签  ... 上面加上一个叫 modal 的类  ...    不过为了让这个对话框可以显示在页面上 ...  在这个元素上，可以再加上一个 in   ... 
然后用一个 style 属性   ... 把 display 设置成 block  ...  这样会把这个对话框显示出来  ... 真正用它的时候，要把这个 in 类 ... 还有这个 style 属性去掉  ...   因为它们在打开对话框以后，会自动添加到这个元素上，把对话框显示出来  ... 
<div class="modal in" style="display: block;"></div>
在它里面，再加上一组 div 标签。这个标签上要添加一个 modal-dialog   类  ...
div.modal-dialog
在这组标签里，是一组带 modal-content 类的 div  ...  这个类定义了对话框的背景，圆角，还有阴影的效果 ... 
div.modal-content
在它里面，是对话框的不同部分的内容  ...    分为头部，主体，还有页脚  ... 
对话框的头部内容可以放在一组 div 标签里面  ... 在它上面，加上一个 modal-header 的类 ...
div.modal-header
在头部这里，可以加上对话框的标题  ...  还有关掉对话框用的关闭按钮  ... 
先输入一组标题  ...   
h4 ...  用户登录  ...   
然后在它上面，再去添加关闭对话框用的按钮  ... 这个按钮可以使用一组 button 标签  ... 上面要加上一个 close 类  ... 按钮上的内容是一个 叉号  ... 这个符号的代码是 &times;
<button class="close">&times;</button>
头部内容的下面，就是对话框的主体内容  ...  这部分内容也要放在一个容器里面  ... 在上面添加一个 modal-body   ... 
div.modal-body  ...    在这里，先简单的输入点文字   ... <p>用户登录用的表单</p>
然后是对话框的底部的内容  ....  用一组 div 标签  ... 上面要加上一个 modal-footer 类  ..  在这里，先添加一个按钮  ... 
                <div class="modal-footer">
                    <button class="btn btn-primary">登录</button>
                </div>
现在， 你看到的，就是这个对话框组件的基本的样式  ... 
Bootstrap 还提供了两个类，可以改变这个对话框的大小  ...     在这个 modal-dialog 类所在的元素上面  ...  再添加一个 modal-lg 
它可以把这个对话框变大  ...   另外还有一个 modal-sm   ...  
这个类，可以把对话框变小一些  ...


03-02-打开与关闭对话框

下面，我们看一下，怎么打开还有关闭这个对话框  ..   先去掉在 modal 这个类所在的元素上面的 in 这个类  ...  还有它后面的这个 style 属性  ... 
再去掉下面这个 modal-backdrop 这个元素 ..   再去设计对话框的样式和内容的时候，可以把它们再添加进来 ... 
打开这个对话框，可以通过 html 的 data 属性，或者也可以通过  JavaScript 的方式  ...  先看一下用 data 属性的方法  ...
我们先要在这个对话框上定义一个 id  ...   可以叫它 login-modal   ... 然后在开启这个对话框的元素上面，需要用到这个 id  ... 
下面，我们让用户在点击  登录  这个链接的时候，打开这个对话框 ... 先找到这个链接  ..
然后在这个链接上，要添加两个 data 属性  ... 一个是 data-toggle   ... 把它的值设置成 modal  ...  意思就是，它可以切换显示对话框  ...  
再添加一个 data-target   ...  这个属性的值，就是在要切换显示的那个对话框上面定义的 id 号 ...  这里就是 #login-modal  ..
下面可以去试一下 ...  点击 登录   ...   会打开我们之前设计好的这个对话框 ... 
在显示这个对话框的时候，可以有一个过渡的效果  ...  回到编辑器 ...  在这个对话框元素上面  ... 添加一个 fade   ... 
再去试一下 ...  先刷新一下页面  ....  然后再点击这个 登录 菜单  .. 
这回显示这个对话框的时候，会有一个过渡的动画效果 ... 
关闭
下面， 我们再去想办法，在点击这个对话框上面的关闭按钮的时候，关掉这个对话框  ...
回到编辑器  ... 找到这个对话框上的这个关闭按钮的元素  .. 
就是这个带 close 类的 button 标签  ...   在这个元素上面，再添加一个 data-dismiss 属性   ... 它的值设置成 modal  ... 这样这个按钮就可以关掉对话框 了  ...  
再去试一下  ...   点击登录   ...  会显示这个对话框   ...   点击对话框上面的这个关闭按钮  ...   可以关掉对话框  ... 
或者，点击一下页面的其它的地方，也可以关掉这个对话框  ...


03-03-tabindex 属性

在这个对话框上，我们可以再加上一个 tabindex 属性 ... 这个属性的作用就是设计每一次按一下 tab 键所定位的顺序 ...   tabindex   这个属性的值如果设置成 1 ，这样每一次按一下 tab 键的时候就会定位到这个元素上  ..  这是一种提高网站可用性的方法  ...  
下面，我们先试一下不添加这个属性的效果  ...  点击 登录  ...  打开 对话框  ... 
然后按一下 tab 键 ...  注意，当前的位置会是网站的标志 ... 再按一下 tab 键，又会跳到 课程  这个链接  ... 继续按 tab 键，每次会往后移动一个位置 ...
最后，会跳到这个对话框上面的元素上，现在是在这个 关闭 按钮上  ...   再按一下 ...  会跳到 这个 登录 的按钮上  ... 
按一下 shfit + tab ，可以回跳一个位置  ...    再按一下回车键，可以执行这个动作  ... 
下面，我们在这个对话框元素上面，添加一个 tabindex 元素  ... 把它的值成 -1   ...   意思就是，当我显示的时候，按下 tab 键就从我这里开始  ... 
回到浏览器  ...
在没有显示对话框的时候，按一下 tab  键  ... 第一次仍然会跳到这个标志链接上 ...   然后是其它的菜单项  ... 
点击 登录  ...   打开对话框   .... 
然后再按一下 tab 键  ... 
你会发现，会直接跳到这个对话框上面的元素上  ...  现在是在这个关闭按钮上  ...      再按一下，又跳到对话框上面的这个登录的按钮上  ... 
在以后， 我们会继续去介绍网站的可见性方面的设计  ... 要知道，并不是所有人都是用鼠标来浏览器网页的 ... 
在对话框上添加了这个属性以后，我们可以使用 esc 键，关掉这个对话框  ...  按下 esc  .... . 会关掉这个对话框  ...


03-04-对话框的选项

Bootstrap 的 Modal 组件提供了几个选项，可以控制对话框的一些行为。比如我们可以打开或者关掉在显示对话框时候的那个暗色的背景。开启或者关闭用 esc 键关掉对话框的功能等等。
这些选项，可以通过 data 属性去控制，也可以通过  JavaScript 的代码去控制。
在对话框的元素上面，可以添加 data 后面再加上对应的选项名称，然后再设置一下选项的值  ... 
比如我们要关掉显示对话框时候的暗色的背景， 可以先看一下  ... 点击 登录 ... 显示对话框  ...  对话框周围有一个暗色背景 ... 
回到编辑器 . 找到这个对话框的元素  ... 
在它上面，添加一个 data  ... 后面加上选项的名字的属性 ...  影响这个暗色背景的选项叫做 backdrop  ....   把这个属性的值设置成 false  ... 
保存 ... 再去预览一下  ...  点击 登录  .. 显示对话框 ...   这次就不会再显示那个暗色的背景了 ..
JavaScript
下面， 我们再去看一下用 JavaScript 的方式来控制对话框的选项 ...    回到编辑器 .. 去掉这个 data-backdrop 属性 ... 然后在页面底部，可以添加点 JavaScript 的代码  ... 
用一组 script 标签 ...   然后可以把一个匿名函数交给 jQuery ，在这个函数里的代码，会在页面加载以后立即执行  ... 
$(function() {});
在这里，先找到页面上的对话框元素 ...    使用 jQuery  ... 可以用对话框上面的 id 来定位它 ...    这个 id 是 #login-modal  .. 
再调用 modal 这个方法 ..   然后把一个对象交给这个方法  ... 这个对象里面的东西就可以是对话框的选项，还有对应的值  ...   
比如我们可以先去设置一下 show 这个选项 ...   把它的值设置成 false  ... 这样在默认情况下，会把对话框隐藏起来 ... 
用一个逗号分隔一下 ..  另起一行 ... 再设置一下 backdrop  ....   把它的值设置成 false  ... 
show: false,
backdrop: false
另外还有两个可以用的选项，keyboard 还有 remote  ..   把 keyboard 的值设置成 false ，这样可以关掉用 esc 键关闭对话框的功能。
remote 这个选项，我们在后面的视频再去详细的介绍一下 ... 
先到浏览器上试一下 ...
点击 登录  ...  会显示对话框  ...  对话框周围的暗色背景已经去掉了 ...  因为我们用 JavaScript 的代码，把 backdrop 这个选项的值设置成了 false ，这样也就不会再显示那个暗色的背景了。


03-05-对话框的 remote 选项

现在， 我们定义的这个对话框，所有的代码都是在这一个文件里面，我们其实可以让对话框里面的主体内容来自其它的地址，当然这个地址要符合同源规则，也就是需要跟使用这个对话框的页面来自同一个主机名，同一种协议，同一个端口。
这里我们先去新建一个 html 文档  ...  命名为 login-form.html  ... 
添加一个基本的 html 结构  ...   在这个文档的 body 标签里面的东西就是在对话框上面内容  ...   包括对话框的头部，主体，还有页脚  ... 
先回到 index.html   ... 
找到定义对话框的地方  ...   在这里，modal-content 这个类所在的元素所包装的内容，都会是来自这个文档以外的那个地址  ... 也就是刚才我们创建的 login-form.html  ... 
Bootstrap 会使用 jQuery 的 load 方法，把运程的地址里面的内容，载入到这个 modal-content 元素里面。
所以，我们可以先把这块内容剪切掉  ...    回到 login-form.html  ... 粘贴到这里  ... 
简单再修改一下对话框的主体内容  ...   可以放一个登录用的表单  ... 
        <form role="form">
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" placeholder="输入 Email">
            </div>
            <div class="form-group">
                <label for="password">密码</label>
                <input type="password" class="form-control" id="password" placeholder="输入密码">
            </div>
        </form>
保存 ... 再回到 index.html  ...  
想要使用这种加载远程地址的功能  ... 可以使用 JavaScript 的形式 ...   在页面的底部 ... 找到之前用来设置对话框选项的 JavaScript 代码  ...
在这里，再添加一个 remote 选项  ....   然后把它的值。设置成一个远程的地址 ... 
remote   : 'login-form.html'
保存 ...    回到浏览器  ...   点击 登录   ... 
会打开一个对话框  ... 注意这个对话框里面的内容，是来自一个其它的地址 ...   也就是我们指定的 login-form.html 。
要注意的是，jQuery 的 load 方法需要用到 Web 服务器 ... 也就是，如果你直接是在文件系统里面，打开的这个页面，在这个对话框里面，就不会显示 login-form.html 这个文档里面的内容了  ... 
这里，我用的是 Brackets 的实时预览的功能  ...   它相当于是创建了一个 Web 服务器，然后打开了这个地址 。
除了使用 JavaScript 的方式以后，我们可以直接在这个开启对话框的元素上面，添加一个远程的地址的链接 ...
回到编辑器  ....  先注释掉这几行 JavaScript 的代码  ....  command + / ，windows 上应该是 ctrl + /
然后找到 登录  链接  ...   直接在这个链接的 href 属性里面，设置一下要载入到对话框里显示的地址 ...  这里就是 login-form.html ...
保存 ... 再回到浏览器  ...  
点击 登录  ..   同样会显示这个对话框   ... 
另外还有一种方法，就是可以通过 data 属性 ...    回到编辑器 ... 
找到 登录 菜单   ...  先去掉在它的 href 属性里的东西 ... 
然后找到对话框元素  ... 在上面，添加一个 data-remote   ....   它的值，可以设置成一个要载入到这个对话框里显示的地址 ... 
data-remote="login-form.html"
保存  ...  再回到浏览器上去试一下 ...
点击 登录   ...  同样，也会显示这个对话框  ....


03-06-modal 方法

在前面介绍对话框组件选项的时候，我们已经用到了 modal 方法。下面，再去试一下这个方法。
打开浏览器的控制台 ...  alt + command + J  ，windows 用户可以使用 alt + ctrl + J
比如现在， 我们想通过 JavaScript 来控制对话框的显示和隐藏 ...    想让对话框显示出来，可以这样 ...
先用 jQuery ，找到对话框  ...    然后使用 modal 这个方法 ...  再给它一个 show  这个参数 ...  
$('#login-modal').modal('show')
回车 ...  会把对话框显示出来 ...   把它隐藏起来可以这样  ...   给 modal 这个方法一个 hide 参数 ...
$('#login-modal').modal('hide')
另外还有一个 toggle ，可以显示或者隐藏对话框  ...
$('#login-modal').modal('toggle')
执行一次  ....  因为当前没有显示对话框，所以执行这行代码，会把对话框显示出来 ... 
再执行一次 ...   会把显示出来的对话框隐藏起来 ...


03-07-对话框的事件

对话框在显示，显示完成，隐藏，隐藏之后都会触发相应的事件  ...  你可以选择使用这些事件去做一些事情。 下面，我们去试一下这些事件。
打开 index.html  ...   在这个页面的底部，可以在这组 script 标签里面，去监听发生在对话框上的事件  ... 
先用 jQuery 找到页面上的对话框  ...  然后使用 jQuery 的 on 这个方法  ... 
指定一下要监听的事件  ...   对话框在显示的时候，会立即触发一个 show.bs.modal 的事件  ...   这个事件发生以后，去执行一个匿名函数  ... 这个函数要做的事，就是简单的在控制台上输出点文字  ... 
            $('#login-modal').on('show.bs.modal', function() {
                console.log('显示对话框');
            });
又类似的方法，我们再去监听其它的事件  ...   对话框在显示完成以后会触发 shown.bs.modal 这个事件 ...   发生的时候，在控制台上输出 对话框已经显示  ... 
            $('#login-modal').on('shown.bs.modal', function() {
                console.log('对话框已经显示');
            });
继续再去监听其它的事件 ...   对话框在隐藏的时候，会立即发生 hide.bs.modal 事件 ...     发生的时候，输出 隐藏对话框  ...
     $('#login-modal').on('hide.bs.modal', function() {
                console.log('隐藏对话框');
            });
隐藏完毕以后，会发生 hidden.bs.modal  ...      发生它的时候，输出 隐藏了对话框  ..
    $('#login-modal').on('hidden.bs.modal', function() {
                console.log('隐藏了对话框');
            }); 
最后，还有一个 loaded.bs.modal ...   这个事件会在使用对话框的 remote 选项，也就是加载远程地址内容到对话框以后发生 ... 内容载入完成以后，就会触发这个事件  ... 
   $('#login-modal').on('loaded.bs.modal', function() {
                console.log('已经加载好了对话框里面的内容');
            }); 
保存  ... 下面，我们再到浏览器上去试一下 ... 
打开控制台  ...  
然后点击 登录  ...  这会显示对话框   ...  首先发生的事件是 show.bs.modal  ...   会在控制台上输出 显示对话框  ...  
接着内容从其它的地址载入到对话框里面以后，就会发生 loaded.bs.modal  ...  所以会显示一个 已经加载好了对话框里面的内容  ... 
对话框完全显示以后，就会触发 shown.bs.modal 这个事件  ...  所以在显示对话框的最后，会输出 对话框已经显示                        
点击这个关闭按钮  ... 关掉对话框  ....   
这样会立即发生一个 hide.bs.modal 事件 ...  在控制台上输出的是 隐藏对话框   ...  完成隐藏以后，会触发  hidden.bs.modal  ...
所以， 最后会显示一个 隐藏了对话框  ...


04-01-旋转木马 - Carousel

准备一些图片还有文字，然后循环播放它们，每次只显示一个项目。这就是 Bootstrap 的旋转木马组件。其实就是提供了一个幻灯片的功能。在幻灯片上面，可以添加控制播放的按钮  .. 还有标识当前位置的小工具。
下面， 我们就去在这个页面上添加一个旋转木马的组件。幻灯片里面需要的图片，可以使用 holder.js 动态的生成  ....  把它下载下面来，放到项目里面，再把它嵌入到这个页面上  ... 
然后在这个导航栏的下面，去添加这个旋转木马组件。
可以先用一组 .container 类的容器 ... 它可以为元素设置一个固定的宽度，并且可以居中的页面上显示。
div.container
然后在它的里面，先添加一组旋转木马需要的容器 ...  在它上面需要添加一个叫 carousel 的类 ...  
div.carousel
我们可以把标识当前位置的小工具，幻灯片的每个项目，还有控制幻灯片播放的按钮都放到这个容器里面。这里，我们把去添加几个幻灯片的项目 ..
它们需要单独再放到一个容器里 .... 在它上面，要添加一个 carousel-inner  ... 
div.carousel-inner
然后每一个幻灯片项目都放到一组带 item 类的 容器里。
div.item
在这个幻灯片项目里面，先去添加一张图片 .. 这里我们可以使用 holders.js 去动态的生成图片 ... 
 <img src="holder.js/1200x500/auto/text:Bootstrap">
图片的地址，可以先是 holders.js ，然后加上图片的宽度还有高度 ...  后面的 auto 表示自动设置图片的尺寸 ... 在响应式的设计里面，可以加上这个 auto  ...  最后又用了一个 text:Bootstrap ，意思就是，在图片上加上 Bootstrap 这个文字  ... 
再复制一份这个幻灯片项目 ...  粘贴到它的下面  ...  修改一下项目里的图片  ... 可以只改一下图片上的文字   ....  改成 JavaScript  ... 
这样我们就定义好了两个幻灯片项目  ...   然后在幻灯片开始播放的那个项目的上面，添加一个 active 类 ...   
如果想让幻灯片自动播放，还需要在这里加上一个 data-ride 属性 ...  把它的值设置成 carousel   ... 
保存  ...  再回到浏览器  ...    5 秒钟以后  ...   会切换到下一个幻灯片项目 .... 
再回到编辑器 ... 在这个旋转木马的大容器上面，可以再添加一个 slide  ....  这个类可以为播放的幻灯片添加一点过渡的效果 ...  
保存  ... 再回到浏览器  ...   等待 5 秒钟 ... 
在切换幻灯片的时候，会有一个滑动的动画效果 ...


04-02-播放上一张和下一张幻灯片的控制按钮

在幻灯片的左边还有右边，各有一个按钮，使用它们，可以控制播放的幻灯片。下面，在我们的旋转木马里面，去添加这两个控制播放的按钮。
可以把它放在幻灯片项目的下面。
用一组 a 标签，在上面加上一个 left ，还有 carousel-control  ...  这是一个向左播放的按钮 ...  这个 a 标签的 href 属性的值，应该是它所控制的旋转木马的 id  ...  在上面，我们先去定义一个 id   ... 在这个带 .carousel 类的 元素上面  ...  定义一个 id  ... 可以叫它 slideshow  ... 
然后再回到这个按钮 ...  把它的 href 属性的值设置成 #slideshow  ...    再给它添加一个 data-slide 属性 ...  它的值设置成 prev  ... 表示这个按钮的功能就是向前播放一个幻灯片  ... 
然后再设置一下这个按钮上面的图标 ... 可以使用 Bootstrap 架构里面提供的小图标  .. 
这个小图标就是一个向左的箭头 ... 
用类似的方法，我们再去添加向右播放幻灯片的按钮  ... 复制  ...  粘贴  ... 再修改一下  .... 
把 left  ...   换成 right  ...    再改一下 data-slide 属性的值  ... 这里改成 next  ... 表示它的功能是向后播放一个幻灯片  ...  
按钮上的图标是一个向右的箭头 ...  把这里的 left  ... 改成 right  ... 
保存 ...  回到浏览器上  ... 
你会看到幻灯片的左右各有一个按钮  ... 点击右边的这个按钮  ... 可以播放下一张幻灯片  ... .
点击 左边的按钮  ... 可以播放上一张幻灯片  ....


04-03-标示当前播放的幻灯片的小圆点

用一个实心儿的圆点，表示当前正在播放的幻灯片  ...   点击表示幻灯片的圆点，可以切换到对应的幻灯片 ...  下面在我们的幻灯片里添加这些小圆点。
可以把它们放在幻灯片项目的上面。
先用一组有序的列表标签 ...  在这个标签上，添加一个 carousel-indicators  ...    
每个小圆点都是一个列表项目，所以要放在一个 li 标签里面  ...  在这个标签上，要再添加点属性 ...  先添加一个 data-target 的属性  ... 它的值就是在幻灯片上面定义的 id   ... 在我们这里就是 slideshow 这个 id  ... 
然后要再加上一个 data-slide-to  ...   它表示的点击当前这个小圆点所播放的幻灯片是哪一个  ...  幻灯片项目可以从 0 开始  ...   也就是，如果 data-slide-to 的值是 0 的话，点击它的时候，就会播放幻灯片里面的第一个项目 ... 
li[data-target="#slideshow" data-slide-to="$@0"]*2
这里我用的是 emmet 插件提供的撰写 html 代码的方法 ...  li 表示 html 的标签 ... 方括号里的东西是在这个标签上面的属性 ...  这里这个 $@0 ，表示一个从零开始的数字  ... 后面的 *2 表示，我们需要两个这样的标签  ... 
然后我们要在表示当前幻灯片的小圆点上面，添加一个 active 类 ...   在播放其它幻灯片的时候，会把这个 active 从这个小圆点的元素上去掉，然后添加到其它的小圆角的元素上 ... 
保存 ...   回到浏览器  ... 
在幻灯片的下面，你会看到两个圆点  ... 分别表示对应的幻灯片项目 ...    播放哪个幻灯片的时候，这个小圆角会变成实心儿的  ... 
点击这个小图点  ... 可以切换到对应的幻灯片项目上 ...


04-04-使用 JavaScript 控制幻灯片的播放

前面，我们直接在幻灯片里面添加可以控制幻灯片播放的元素，在这些元素上面，使用特定的代码结构，添加需要的 data 属性，它们就可以去控制幻灯片的播放了。这是通过 Bootstrap 的 data api 实现的功能。
另外，我们也可以通过 JavaScript 的代码，手工去设置控制幻灯片播放的元素。可以播放上一张或者下一张幻灯片，可以播放或者暂停幻灯片。下面一起来看一下怎么样去实现。
先去掉在旋转木马容器上面的 data-ride="carousel"，这样它就不会自动播放了。
然后在幻灯片里面，去添加几个按钮元素  ...  可以先添加一个包装的容器 ... 在上面加上一个 .text-center，这样可以让这样按钮居中显示  ...  
div.text-center ... 
我们可以使用一个按钮组  ...  这是 Bootstrap 提供的一个小组件  ...    
先用一组 div 标签 ... 上面加上一个 .btn-group  类 ...   它里面，是按钮组里面的按钮 ...   可以使用 button 标签  ... 在上面，加上一个 btn ，还有 btn-default ... 使用默认样式的按钮 ... 
我们需要三个这样的按钮  ...  
按钮上面显示的东西可以是一些小图标  ...  在 Bootstrap 里面，使用小图标可以先用一组 span 标签  ... 上面，要加上一个 glyphicon  ...  然后还要加上表示具体的小图标的类 ... 这些类都是用 glyphicon 开头的  ... 
div.btn-group>button.btn.btn-default*3>span.glyphicon.glyphicon-
在第一个按钮上的小图标是 backward  ...    一会用它来控制向左播放幻灯片  ...     中间是一个播放或者暂停的按钮  ...   这里可以先添加一个播放的按钮...  等会儿我们要切换一下这个按钮上的小图标 ...   
最右边的小图标，可以使用 forward  ...   它可以去控制向右播放幻灯片 ... 也就是播放下一张幻灯片  ... 
我们可以在这个按钮组的包装元素上面，添加一个边距 ...    p20
然后，再去给这几个按钮起个名字 ...  可以在这些要按钮上面定义 id 或者 css 类 ... 这里我们直接去添加 css 类  ...  向左的这个按钮 ...  添加一个 prev-slide  ...   
中间的这个按钮 ，加上一个 play-and-stop  ...  
最后这个按钮 ...  添加一个 next-slide   ... 
等会儿，我们要用到这些名字，去定位这些按钮，给它们去添加相应的功能。 在下面的视频里，我们再一起来看一下  ...


04-05-手工设置播放上一张与下一张幻灯片的按钮

下面， 我们去给这个按钮添加点真正的功能。先去创建一个目录  ... 命名为 js  ... 在这个目录里面，再新建一个文件   ... 叫它 app.js  ...
回到 index.html  ... 在这个页面上，把 app.js 嵌入进来  ... 
然后再打开 app.js   ....    我们可以把代码放在页面加载以后立即执行的函数里面  ...   
$(function() {})
下面要做的是，去监听控制幻灯片的按钮上面的点击事件  ...  当点了这些按钮以后，去执行指定的动作  ... 
先找到向左播放幻灯片的按钮  ... 在这个按钮上，我们已经添加了一个叫 prev-slide 的类 .. 可以用它来定位这个按钮 ...  再用 jQuery 的 on 或者直接使用 click 方法，去监听点击的事件  ... 
这里我们使用 on 这个方法 ...  指定一下要监听的事件的名字  ...  click ，点击的事件  ...   再去设置一下发生这个事件要执行的函数  ...   可以使用一个现有的函数的名字，或者，也可以直接用一个匿名函数  ...  这里我们直接使用一个匿名函数  ... 
在 prev-slide 这个按钮上，发生点击事件以后，要做的事就是  .... 先找到幻灯片 ...   在幻灯片的包装元素上面，我们已经定义好一个叫 slideshow 的 id ，可以使用这个 id 定位到幻灯片  ...
找到以后，去调用 Bootstrap 的 carousel 组件的 carousel 这个方法 ...   给这个方法一个 prev 参数  ...  它的功能就是向左播放一张幻灯片  ... 
$('.prev-slide').on('click', function() {
    $('#slideshow').carousel('prev');
}); 
我们可以去试一下 ...     点击这个向左的按钮 ...  你会发现，可以播放前面这张幻灯片  ...  
其它的按钮，还不起作用  ... 
再回到 app.js   ...  我们可以使用类似的方法，再去处理一下播放下一张幻灯片的按钮  ... 
复制  ... 粘贴  ... 
这个按钮上有类名是 next-slide  ...    发生点击事件以后 ... 去执行幻灯片的 carousel 方法 ...  修改一下这个方法的参数  ... 把 prev 改成 next  ... 
再去试一下  ... 
点击向左这个按钮 ... 可以播放上一张幻灯片  ...  再点一下向右这个按钮  ... 可以播放下一张幻灯片  ...


04-06-用按键控制幻灯片的播放

按一下键盘上的向左，还有向右的箭头，可以控制幻灯片的播放。
下面，我们去实现这个功能。 打开 app.js 这个文件  ...  我们要做的是去监听发生在文档本身上面的 keydown 这个事件，按下按键会立即触发这个事件  ... 
然后再去判断一下用户按的是不是向左或者向右这两个按键 ...   按下向左按键的时候去播放上一张幻灯片  ... 按下向右按键的时候，去播放下一张幻灯片  ... 
先用 jQuery 方法，包装一下 document 这个对象  ...   然后再调用 jQuery 的 on 这个方法， 去监听一下 keydown 这个事件  ...  发生这个事件，去执行一个函数  ....  我们可以把事件对象交给这个函数 ... 
在这个函数里面，可以先把用户按的按键输出到控制台上看一下 ...  用一个 console.log  ..  按下的具体的按键。是在事件对象的 which 这个属性里面 ...
$(document).on('keydown', function(e) {
    console.log(e.which);
}
保存  ... 回到浏览器 ... 打开控制台 ...  然后，先按一下键盘上的向左这个箭头  ...   在控制台上，会显示 37 这个数字  ... 这个数字就是键盘上的向左这个箭头按键的代号 ... 
再按一下向右的箭头...   会输出一个数字 39  ...  它表示的就是键盘上的向右箭头这个按键 ..
下面，我们可以利用这两个表示按键的数字，去判断一下  ...  根据按下的具体的按键，去执行指定的动作 .. 
回到 app.js  ....
这里，我们可以使用一个 swich 语句 ...   条件是 e.which  ... 也就是看一下按下的按键的代码  ..     
case 37 ...  如果按的是向左的箭头 ... 
就去找到幻灯片，调用 carousel 方法，给它一个 prev 参数  ...   也就是，去播放上一张幻灯片 ...     结尾再用一个 break;
再去设置一种情况  ...  case 39 ...  按的是向右箭头 ...  
找到幻灯片，调用 carousel 方法，给它一个 next 参数  ...  这行代码的作用就是去播放下一张幻灯片  ...  最后再用一个 break;
    switch (e.which) {
        case 37:
            $('#slideshow').carousel('prev');
            break;
        case 39:
            $('#slideshow').carousel('next');
            break;
    }
保存 ... 回到浏览器  ... 
按一下键盘上的向左的箭头  ...   会播放上一张幻灯片  ...  
再按一下键盘上的向向的箭头  .... 会播放下一张幻灯片  ...


04-07-播放与暂停按钮

点一下这个播放按钮以后，可以开始处自动播放幻灯片，然后这个播放按钮，会变成一个暂停的按钮，点击这个暂停按钮，会停止播放幻灯片 ... 同时这个暂停按钮又会变成一个播放按钮。 下面，我们就去实现这个功能。
打开 app.js  ... 
先找到页面上的这个播放按钮 ... 在这个按钮上面，有一个叫 play-and-stop 的类  ..   用 jQuery 找到它 ... 然后再用一个 click 方法  ...  在这个播放暂停按钮上发生点击事件的时候，会调用这个方法 。
给这个方法一个函数作为它的参数 ...    
$('.play-and-stop').click(
    function() {}
)
我们可以先在它上面定义一个变量 ...  叫做 play ，用它来表示当前的幻灯片是播放还是暂停 ...  先让它的值等于 false  ...   表示当前是暂停的状态 ...
再回到这个 click 方法里面的函数  ... 
在这里，可以去判断一下 play 这个变量的值  ...  如果它的值是 true 的话 ...  点击这个按钮的时候就去开始播放幻灯片  ... 
用一个 if  ...  条件是 !play ，表示 play 的值相反的值，如果是 true 的话 ...  就去执行后面的花括号里面的代码  ... 
要做的就是，先找到幻灯片  ...  然后使用 carousel 方法  ... 给它一个 cycle 参数   ... 这行代码可以开始循环播放幻灯片 ... 
 $('#slideshow').carousel('cycle');
另外，我们还要做一件事，就是把这个按钮下面的小图标，变成一个暂停的图标 ... 
 $(this).children('span').removeClass('glyphicon-play').addClass('glyphicon-pause');
把 this 交给 jQuery 方法 ... 这里的 this 表示的就是 play-and-stop 这个按钮元素 ...  然后再用一个 children 方法，找到它的子元素 ...  我们要找的是按钮里面的 span 标签  ...  
再调用 removeClass 这个方法，去掉在这个 span 标签上面的小图标的类，这个类是 glyphicon-play，一个播放按钮样式的小图标 ...  去掉以后，在这个 span 元素上面，再添加一个暂停的小图标  ... 
用一个 addClass 方法 ... 要添加的 css 类是 glyphicon-pause  ... 
执行完这些动作以后，可以再去修改一下 play 这个变量的值 ..  把它的值，设置成与当前的值相反的值，也就是如果它的值当前是 flase ，就让它等于 true ，如果是 true ，就让它等于 false  ... 
 play = !play;
在这个 if 语句的后面，再用一个 else ，去设置一下别一种情况  ...  也就是，幻灯片正在播放的时候，点击这个按钮，要暂停播放，并且把按钮上面的小图标，变成一个播放的小图标 ... 
 $('#slideshow').carousel('pause');
 $(this).children('span').removeClass('glyphicon-pause').addClass('glyphicon-play'); 
保存  ...   再回到浏览器 ...  刷新一下 ...
现在，我们设置的 play 这个变量的值会是默认的 false  .. 
点击这个播放按钮  ...  会让这个幻灯片自动开始循环的播放  ...   同时，也会把这个按钮的小图标变成一个暂停的图标  ...  接着又会把 play 这个变量设置成 true  ... 
现在， 我们可以再点一下这个按钮  ... 
因为这个时候 play 的值已经是 ture 了  ...   点击这个按钮，会暂停播放幻灯片 ..   然后把按钮上面的小图标变成一个播放的图标  ...  把 play 的值又设置成了 false  ... 
这样，再点一下这个按钮  ... 又会开始循环播放幻灯片了 ...


04-08-旋转木马的选项

Bootstrap 为旋转木马组件提供了三个选项，interval ，它控制的是自动播放幻灯片的时候，播放下一张幻灯片之前停留的时间。这个选项默认的值是 5000 ，单位是毫秒，也就是 5 秒钟的时间。
如果把这个选项的值，设置成 false ，幻灯片就不会自动播放了。
pause 选项可以控制暂停播放幻灯片的方式。默认的值是 hover，表示鼠标悬停，也是把鼠标放在幻灯片上面的时候就会暂停播放幻灯片，离开以后，又会继续自动播放。
wrap 选项默认的值是 true ，它可以控制是否循环播放幻灯片。
下面，我们可以去试一下这几个选项，设置这些选项，可以使用 Bootstrap 的 data api ，也就是在幻灯片元素上，添加 data 后面加上选项的名字，然后再设置一下对应的选项的值就行了。或者，我们也可以通过 JavaScript 的方式去设置这些选项。
先找到幻灯片的包装元素  ...   也就是这个带 carousel 类的 div 标签  ... 在这个标签上面，去添加几个 data 属性设置一下幻灯片的选项 ..
先去设置一下自动播放幻灯片时的间隔时间 ...  用一个 data ... 后面是选项的名字 ...  interval  ... 然后是这个选项的值 ...  默认是 5000  ... 这里我们设置成 1000  ... 表示 1 秒钟 ... 
保存 .. 回到浏览器 ...   点击播放 ...   现在，自动播放幻灯片的时候，会每隔一秒钟播放一张 ... 
回到编辑器 ...   再添加一个 data-pause  ...   pause 这个选项的默认的值是 hover  ... 这里我们设置成 false  .... 
再回到浏览器  ... 刷新  ....  点击播放 ...  然后把鼠标放到幻灯片的上面 ...  现在鼠标悬停到幻灯片上面，也不会暂停播放幻灯片了 ... 
再回到编辑器 ...  再添加一个 data-wrap  ....   把它的值设置成 false  ...
保存 ... 回到浏览器  ... 刷新  ... 
点击这个箭头图片播放下一张幻灯片 ...   这是最后一张幻灯片  ... 再点一下这个箭头..    不会再重新播放第一张幻灯片  ... 因为我们把 wrap 选项设置成了 false  ....  如果设置成 true 的话 ..  在播放到最后一张幻灯片的时候，播放的下一张幻灯片会是第一张幻灯片  ...   也就是会去循环去播放旋转木马里面的幻灯片  ...


04-09-旋转木马的事件

在播放幻灯片的时候，会发生两个事件，一个叫做 slide.bs.carousel  ... 这个事件在切换播放的幻灯片的时候，会立即发生 ...   切换完成以后，又会触发一个叫 slid.bs.carousel 的事件 ...   下面，我们去试一下 ... 
我们可以直接把代码放到这个页面的底部 ... 用一组 script 标签  ...   然后再用一个 jQuery 的在页面加载以后立即执行的函数 ... 
$(function() {});
在这个函数里面，可以用 jQuery 的 on 这个方法去监听事件 ...  先找到事件发生的元素  ...  这里我们要监听是发生在旋转木马上面的事件 ... 所以，先要找到旋转木马的包装元素 ...  也就是那个带 .carousel 类的元素  ...  不过在这个元素上，我定义一个叫 #slideshow 的 id ，也可以用这个 id 来定位这个旋转木马。
找到以后，使用 on ，去监听事件 ...  设置一下监听的事件的名字 ...  slide.bs.carousel  ..   这个事件在播放幻灯片的时候会立即发生 ...  发生这个事件的时候，可以在控制台上输出点文字  ...   
             $('#slideshow').on('slide.bs.carousel', function() {
                 console.log('播放幻灯片');
             });
再去类似的方法，去监听一下 slid.bs.carousel  ... 
             $('#slideshow').on('slid.bs.carousel', function() {
                 console.log('播放完成！');
             }); 
保存 ...  回到浏览器  ....  打开控制台  ... 
点击这个向右的箭头 ...   切换到下一张幻灯片  ...   这会立即触发 slide.bs.carousel  ... 所以，在控制台上，你先看到的是 播放幻灯片  这几个字 ... 
切换完成以后，又会触发 slid.bs.carousel  ...  所以，接着会显示 播放完成 ...


04-10-最终的调整

为了可以看到这个 Bootstrap 的旋转木马组件的最终的效果，我们可以把这里用到的图片点位符用真正的图片替换一下 ... 
先打开这个项目所在的目录  ...     在里面，新建一个文件夹 .. 命名为 images  ... 然后再找两张图片放进去 ..   
回到编辑器 ... 
修改一下幻灯片项目的 img  标签里面的图像的地址 ...    在 images 目录下面，有一个 01.jpg  ...      在这个幻灯片项目里面，我们也可以添加点描述的文字 ... 可以把它放在一组带有 carousel-caption 类的 div 标签里面 ...
添加一个标题 ...  再添加点文字 
然后用类似的方法，去处理一下第二个幻灯片项目  ... 
保存 ... 回到浏览器去预览一下  ... 
你会看到真正的图像的幻灯片  ...  上面还多了一些描述的文字  ...   下面，我们再继续去改进一下 ... 回到编辑器 ...   我们可以把包装幻灯片用的 .container 这个类的元素去掉 ... 
然后再让幻灯片里面的图片占满整个页面显示  .. 可以把幻灯片里面的 img 标签的宽度设置成 100%  ..   打开自定义的样式表 ...     
img {width: 100%}
再修改一下 body 标签上的，这个内边距的值  ...   现成是 70 px ，导航栏的高度是 50 像素， 这里设置成 70 的话，会在导航栏与它下面的内容之间留出一个 20 像素空间  ... 我们可以去掉这个多余的空间 ...  所以，这里把这个边距的值设置成 50 px  ... 
保存 ... 再回到浏览器预览一下 ...
刷新  ... 
现在，幻灯片项目里的图像会占满整个页面显示 ...    而且，它还可以随着浏览窗口的宽度的变化而变化 ... 
点击这个箭头 ... 或者按下键盘上的左右箭头 ...  都可以切换这个幻灯片的显示  ...


