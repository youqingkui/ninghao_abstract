01-01-安装与运行 Laravel

我们可以先打开 Laravel  的在线文档  ... 找到安装  ... 
安装 Laravel 最简单的方法，也是 Laravel 唯一推荐的方法，就是去使用 Composer 安装，Composer 是一个包管理工具，它可以自动解决依赖的问题。你可以先去安装一下 Composer  ...  然后在使用 Composer 去安装 Laravel ...  
打开命令行工具，比如我们要把 Lavarel 项目放在桌面上...  先进入到桌面 ...  然后输入命令 composer  ...  create-project ...  使用 composer 的 create-project 命令，去创建一个 Laravel 项目  ... 再用一个 --perfer-dist 选项 ... 表示我们只想要源代码  ...  然后可以指定这个项目的目录的名称 ...   composer 会自动去下载 laravel .. 还有它需要的所有的东西 ...  完成以后，会把项目放在这个 ninghao 目录的下面 ... 
这里提示我 composer 太老了，需要升级 ...   ctrl + c 退出 ... 
然后再输入 composer  self-update  ...   完成以后，再执行一下上面这行命令  ... 注意，如果你在国内的话，这个过程可能需要挺长时间，大概 10 分钟左右  ... 
composer create-project laravel/laravel ninghao
完成以后 ...  进入到项目所在的目录...   cd ninghao ... 
cd ninghao 
然后，我们可以使用 Laravel 的 artisan 工具，去运行一个服务器，artisan 是 Laravel 提供的一个命令行工具，在创建 Laravel 项目的时候会经常用以它。PHP 5.4 以后会自带一个 Web 服务器 ...   artisan 就是用的这个内置的 Web 服务器 ... 
你也可以使用常用的 Apache 或者 Nginx 作为项目的服务器 ...  
输入：php artisan serve
成功以后，提示 Laravel development server started on http://localhost:8000  ...  我们可以在浏览器里预览一下  ... 打开浏览器 ...  输入  localhost:8000，这样会打开项目的首页 ...  说明我们已经成功的安装好了 laravel ... 


01-02-相关配置

在这个 Laravel 基础教程里面，我们只需要去修改一个地方的配置。用编辑器打开我们的 Laravel  ..   这里我用的是 Brackets 编辑器  ....   点击 文件 ...   打开目录  ... 选择之前我们在桌面上创建的这个项目的目录  ... 
然后打开  app   ...  config ...  找到 app.php  ... 
在这里，可以修改 Laravel 的一些基础的设置 ...   比如这里，我们可以把这个 debug  ...  设置成 true  ... 它的作用就是开启调试模式 ... 
在开发的时候，可以开始它 ...   在正式的应用里面，需要再把这个 debug 设置成 false  ... 另外，这里，还可以设置应用的地址 ...   时区 ...  等等  .... 


02-01-路由-routes

打开项目的首页 ... 会显示一个 Laravel 的图标 ... 下面有一行文字  ... You have arrived...   你可能会想，Laravel 是怎么知道要给我们显示什么内容的 ... 
用浏览器打开首页这个地址 ...  这其实就是一个 HTTP 的 GET 请求 ...   这个请求会通过应用的路由，也就是 Route ，转到特定的地方去处理，处理好以后会返回响应的内容，也就是你现在看到的这个页面上的内容。
我们需要根据需要去设计这些路由，这样用户在请求查看页面，或者提交表单的时候，应用才能根据这些请求做出不同的响应。
先打开我们创建的 Laravel 项目 ...  打开 app 这个项目  ...  找开 routes.php  ...   在这个文件里面，我们可以去定义应用需要的路由 ... 
目前这里只有一个 ....  这段代码的意思就是，当有人使用 GET 方法请求应用首页的时候 ...  去使用 hello 这个视图  ...   用的是 Laravel 的 Route 类的 get 方法去定义的这个路由 ...    它的地址是一个斜线 ...  表示应用的首页 ...   
这个方法的第二个参数是一个函数 ...  在这里，用到了 View 类的 make 方法 ...  去把这个请求，发给 hello 这个视图去处理 ... 
视图
应用的视图会放在 views 这个目录的下面 ..  这里你会看到 hello.php 这个视图  ...   打开它 ...
在这个文件里有一些 HTML 的代码 ...   注意这个页面的主体内容上，是一大串字符串 ... 这其实是一个用 base64 编辑的图片儿 ...   如果你用的是 Brackets 编辑器 ... 鼠标放在上面，会显示真正的图片 ...
在它的下面，还有一行文字  ...  这里面的东西，其实就是之前我们看到的这个应用的首页。
我们可以试一下 ... 改一下这里面的文字  ...  换成 how're you doing ~  保存 ... 
回到浏览器 ...  在页面上，会显示我们修改之后的文字。


02-02-定义路由

下面，我们去定义几个路由。打开 routes.php ...   定义路由可以使用 Route 这个类 ...  比如我我们要定义一个基本的 GET 路由 .. 可以使用 get 方法，这个方法里面有两个参数 .. 第一个参数是用户要请求的地址 ... 输入一个 movie ...  第二个参数是一个函数，它的作用就是去决定怎么样处理这个请求。 这里就是，如果有人请求 movie 这个地址，你需要做的事情。
这里我们可以简单的返回一个字符串  ...  电影列表 ...  它的意思就是，有人访问 movie 这个地址，返回 电影列表 这个字符串 ... 
Route::get('movie', function()
{
    return '电影列表...';
});
保存... 回到浏览器 ...  输入 movie ...  因为我们定义了路由，去处理 movie 这个地址的 GET 请求。要做的事就是返回 电影 这个字符 ... 
我们可以试一下请求其它的地址 ...  比如 video ... 这里会提示，发生错误了。因为在我们的应用里，还没有去定义处理 video 这个地址的请求的路由... 所以应用不知道怎么样去处理这个请求，也就会显示这个错误。
POST
下面，我们再去定义一个路由，复制一下这段代码 ...  这个路由可以使用 Route 的 post 方法 ...   地址仍然是 movie ...  现在，如果使用 POST 的方法去请求 movie 这个地址的时候，比如把表单使用 POST 方法提交到这个地址的时候。就会使用这个路由 ...  
同样可以让它返回一个简单的字符串 ...   发布电影  .... 
Route::post('movie', function()
{
    return '发布电影...';
});
下面，可以用一个 Chrome 浏览器的扩展，去测试一下 ....   这个扩展叫做 POSTMAN ，你可以的 Chrome Store 里免费下载到。 
打开以后，在地址栏里输入 http://localhost:8000/movie ... 后面的请求方法现在是 GET  ...  点击 Send ，发送 ...   你会看到返回来的是 电影列表  这个字儿 ...  
这次再把请求的方法改成 POST ...  地址同样是 movie ...  点击 Send ...  这次返回来的是 发布电影 ... 虽然我们请求的同一个地址，但是使用的是不同的方法 ... 所以，会由不同的路由去处理这些请求 ... 
要查看应用里面注册的所有的路由，可以使用 artisan 命令行工具 ...  打开命令行工具 ... 输入 php artisan routes ... 会给我们显示出注册的路由列表。


02-03-路由中的参数

这里的  movie  这个地址，可以作为电影的列表页面。如果想访问单独某个电影，可能的地址是 movie ，后面一个斜线，然后是电影的名称或者 ID  ...  像这样的地址，在定义路由的时候，可以使用参数。
打开 routes.php ... 复制一下这段代码  ... 同样使用 Route 类的 get 方法 ...  不过这个地址是 movie 斜线  ...  一组花括号 ... 在花括号里，可以定义一个参数 ...   比如我们叫它 movie_id .. 
这样这个 movie_id 可以传递到后面的函数里，输入 movie_id ...    在函数里，返回的内容里面，可以再加上这个参数的值  ... 
Route::get('movie/{movie_id}', function($movie_id)
{
    return '电影：' . $movie_id;
});
这样，如果有人请求 movie/1  ...   就会返回电影冒号 1  ...  请求 movie/2 ... 就会返回电影冒号 2  ...    保存 ... 回到浏览器 ...  
输入 movie/1 　...  回车 ... 在页面上会显示 电影冒号 1  ...  这个 movie 斜线后面的东西，就是我们在定义路由的时候，使用的那个 movie_id ... 
再试一下 ...   movie 斜线 599 ...     会显示电影冒号 599 ... 
使用这种形式的路由，我们就可以根据用户请求的地址，动态的去获取一些内容，比如，我们可以根据这个参数的值 ... 去到数据库里面查询出相关的电影 ... 再把它显示出来。


02-04-路由中的参数的正则表达式

再试一下输入一个字符串 ...   movie/fargo ...   你会发现，页面上同样会显示出这个字符串 ... 
如果你只想让这个 movie_id 参数是数字类型的 ... 或者字符类型 ...  或者匹配某种特定的模式 ...    我们可以使用正则表达式去设计这个模式  ... 
回到 routes.php ...  在这个带参数的 route 后面 ...  使用一个 where 方法 ...  它的第一个参数是路由里的参数的名称  ...   这里就是 movie_id .. 
第二个参数是一个正则表示式 ..  如果想让 movie_id 只能是数字的话，这个表达式可以这样写 ...   一组方框号 ... [0-9]+  ... 它的意思就是，movie_id 可以是 0-9 之间的任意数字 ... 并且可以是多少数字 ... 
保存 .. 回到浏览器 
输入 movie/22  ...  回车 ...  没有问题 ...  movie/1280 ...   也可以 ... 只要是数字都是可以的 ... 
再试一下字符串 ...   movie/fargo ... 这回，会显示错误了 ... 因为在我们设计的这个路由里面， movie斜线后面这部分 ... 只能使用数字 ...  
再回去修改一下 ...   这里改成小写的字母 a 到 z  ... 保存 ... 
回到浏览器 .. movie 斜线  235 ...   提示错误  ...  因为我们只允许这部分内容是小写的 a 到 z 这些字母 ... 
输入 movie/fargo ....  这回是可以的 ... 你可以使用正则表达式设计出任何你想要的模式  ...    
Route::get('movie/{movie_id}', function($movie_id)
{
    return '电影：' . $movie_id;
})
->where('movie_id', '[a-z]+');


03-01-视图-views

在应用响应用户的请求以后，会返回响应的结果，一般我们需要把这个结果放在视图上去处理。视图上会包含内容展示的逻辑运算，比如在什么情况下展示什么样内容。在视图上，也会去决定内容的布局，用什么样的 HTML 标签等等。你也可以把视图想成是数据展示的模板。
下面，我们去创建一个视图。
先打开 routes.php ...   修改一下处理用 GET 方法请求 movie 这个地址的路由 ... 目前它只是简单的返回了一个字符串 ...  下面，在这里，可以把这个请求指向一个视图  ...  先去掉 '电影列表...' 这几个字 ...  
return ...  然后使用 View 类的 make 方法 ... 去指定一个视图 ...  这个方法里的参数就是视图文件所在的位置还有名称 ...  movie.index ...  
这个意思就是，这个视图文件是在 movie 这个目录的下面，点前面这部分，是视图文件的目录 ... 最后这部分是视图文件的文件... 在这里，这个视图文件叫做 index.php ...  或者 index.blade.php ...  blade 是 Laravel 用的模板引擎 ... 在后面我们再去学一下它。
创建视图文件
先保存一下 ..  然后再去创建这个视图文件 ...  应用的视图文件，一般都会放在这个 views 目录的下面 ... 
先在这个目录下面创建一个新的目录 ... 叫做 movie ...
然后在这个 movie 目录里，再去创建 index.blade.php  这个视图文件... 
打开这个文件 ... 在里面，可以先用一个简单的 HTML 模板 ...  
在这个视图文件里，我们可以添加样式表，脚本文件... 设计布局，样式等等。
简单修改一下 ...   lang 属性的值改成 zh-hans ...    title 改成这个项目的名称 ...  movietalk ...
再主体上，再添加点文字  ...  <h1>movietalk</h1>  ... 
保存一下 ...  再打开浏览器 ...  确定 Web 服务器已经运行了 ...  然后输入 http://localhost:8000/movie  ...  回车 ... 
在页面上，会显示 movietalk  ... 
查看一下源代码 ... 
源代码跟我们在 movie 目录下的 index.blade.php 里面设计的是一样的。
这也就是说，当我们使用 GET 方法请求 movie 这个地址的时间，在我们设计的路由里面，会把这个请求指向 movie 目录下面的 index.blade.php 这个视图文件 ...  在这个视图文件里，我们可以去设计怎么样去展示应用响应的内容。


03-02-传递数据到视图里面

传递数据到视图文件里面，有几种方法可以做到。打开 routes.php ...  比如我们要给 movie 目录下的 index.blade.php 传递点数据过去 ... 
可以在它的后面，调用 with 这个方法 ..  这个方法有两个参数 ... 第一个参数是要传递的数据的名称 ...  这里我们可以叫它 user ...  第二个参数是跟它对应的数据的具体的值 ...  输入我的名字 .. 
Route::get('movie', function()
{
    return View::make('movie.index')->with('user', '王皓');
});
再打开这个视图文件 ... app ... views ... movie ... index.blade.php 
在这个视图文件里，我们可以使用传递过来的 user 数据 ...   这里简单的用一个 php 的 echo ，去输出 user 里面的值  ...
<p><?php echo $user; ?></p>
保存 .. 回到浏览器... 
这里会输出从 routes 里面传递过来的 user 这个数据的值 ... 
魔术方法
我们也可以使用另一种方法把数据传递到视图上 ...  回到 routes.php ...   把这行代码改成 
withUser('王皓')
在 with 的后面，也就是这个大写的 User ...  就是要传递给视图的数据的名称 ...  括号里的东西是跟它对应的值 ...   这个方法是动态生成的 ...   在后面，可以使用这种方法继续传递其它的数据  ...  比如再传递一个叫 Email 的数据  ...  输入一个箭头 ...  withEmail ... 括号里是它的值  ... 
withEmail('wanghao@ninghao.net')
这种方法叫做魔术方法，Magic method ... 方法是在调用的时候动态生成 ...    再打开 index.blade.php ... 找个地方，把 email 里的值也显示出来 ... 
<p><?php echo $email; ?></p>
保存 ... 再回到浏览器 ...   刷新  ... 
这里会显示出，传递到视图上的 user 还有 email 里面的东西 ... 
传递数组
如果要传递到视图上的数据有很多个， 我们也可以先去定义一个数组 ... 然后把这个数组作为 make 方法的第二个参数 ...   再回以 routes.php ..
先去定义一个数据 ...
    $data = array(
        'user'      => '王皓',
        'email'     => 'wanghao@ninghao.net'
    );
再把这个 data 放在 make 方法的第二个参数上 .. 
    return View::make('movie.index', $data);
保存 ...  回到浏览器 ... 
这里，同样会显示传递过来的数据 ...


03-03-传递子视图到视图上

我们可以把一个视图，嵌入到另一个视图里面，作为这个视图的一个子视图。下面，我们先去创建一个视图，然后把它嵌入到其它的视图里面。
在 movie 这个目录下面，再创建一个目录 ... 叫做 block ...  在这里，再去创建一个视图文件 ...  可以叫它 boxoffice.php ...
打开这个文件 ..  我们可以先手工在这里输入点静态的文字  ... 
<h3>电影票房排行榜</h3>
<ul>
    <li>第一名...</li>
    <li>第二名...</li>
    <li>第三名...</li>
</ul> 
保存一下 ... 下面，我们可以把这个视图，作为 movie 目录下的 index.blade.php 这个视图的子视图 ...  先打开 routes.php ... 
在这个路由里面，可以先用一个 nest 方法，去指定一下要嵌入到 index.blade.php 这个视图的子视图 ...   这个方法里面，有几个参数 ...  第一个参数是这个子视图的名字 ... 这个名字可以随便定义 ... 我们需要用到它在视图里面输出这个子视图 ... 这里叫它 boxoffice
第二个参数是这个子视图的位置 .. boxoffice 这个视图是在 movie 下面的 block 这个目录的下面 ... 先输入 movie 点 block 点 ... 后面再加上这个视图的名称  ... boxoffice ... 这里不需要去指定这个视图文件的扩展名 .. 
再保存一下 .. 
然后，打开movie 目录下面的 index.blade.php ... 在这个视图里，可以输出子视图里的东西 ...   有一个简单的 echo ... 输出的东西是 boxoffice ...  这个名字是在 nest 方法的第一个参数里面定义的 ... 
<p><?php echo $boxoffice; ?></p>
保存 ... 回到浏览器 ... 
你会看到，movie 这个页面，除了会显示 index.blade.php 这个视图里的内容以外 ... 还会显示在 boxoffice 这个视图里的东西 ...


03-04-传递数据到子视图上

在嵌入视图的时候，可以给 nest 方法指定第三个参数 ...  这个参数是要传递到子视图上的数据  ...  下面，我们可以去试一下 .. .回到 routes.php ... 
先定义一个数据  ...  可以是一个数组  ...   在里面，再设置具体的数据还有对应的值 ... 
    $data_block = array(
        'block_title' => '电影排行榜'
    );
再把这个 data_block ，放在 nest 方法的第三个参数上 ... 
打开这个 boxoffice 视图文件 ...  把这个标题 ... 替换成传递过来的数据  ...  
<?php echo $block_title; ?>
保存 ... 回到浏览器 ... 
传递到子视图上的数据，可以正常显示 ...


04-01-模板-blade

Blade 是 Laravel 提供了一套模板引擎，别被它的名字吓到 ... 用起来其实很简单 ...  Blade 是一套又灵活，又强大，又简单的模板引擎。
我们可以根据需要，去创建一些布局，在这些布局里面，可以把一个页面划分成几个部分，每个部分的内容都可以放在一个单独的文件里面。
我们可以重复去利用这些创建好的布局。下面通过几个演示，你应该可以更好的理解 Blade 模板。
打开 views ... movie 下面的 index.blade.php 这个文件 ... 
这是我们之前创建的一个视图文件 ...  在这个文件里，除了显示主要内容以外，还有一些其它的东西，比如 html 声明，meta 标签等等  ... 
这些内容很可能在其它类型的页面上也会用到，比如使用同样的样式表，或者脚本文件等等。
这样，我们就可以去创建一个布局。这样需要用到这个布局，用一行简单的代码就行了。
这个文件其实也是一个 blade 模板文件 ...  因为它的扩展名是 .blade.php ...  
这里面的内容，可以认为是布局的一个区块，或者叫做一个区域 ...   所以，我们可以把它定义成一个区域 ... 
输入一个 @section ... 然后在括号里，去给这个区域起个名字 ...   比如 content ... header .. footer ..  sidebar 等等 ... 这里我们叫它 content ... 
这个区域的结束，要用一个 @stop ... 
@section('content')
    <h1>movietalk</h1>
    <p><?php echo $user; ?></p>
    <p><?php echo $email; ?></p>
    <p><?php echo $boxoffice; ?></p>
@stop
这样， 除了这个区域的内容以外，我们可以把其它的东西都放在布局里面 ..    剪切一下 ...  
在这个区域视图里面，我们还要指定一个它要使用的布局文件 ...   这里需要用一个 @extends ...  然后在括号里指定这个布局文件的位置  ... 
movie.layout.master ....  它的意思就是，去使用在 movie 目录下面的 layout 里面的 master.blade.php 这个布局文件 ....  .blade.php 是 blade 模板文件的扩展名 ...  它前面的东西才是这个模板文件的名称  ...  这里只需要使用这个模板文件的名称 ... 
下面，我们再去创建这个布局文件 ... 
先在 movie 目录的下面，新建一个目录 ... 命名为 layout ... 在里面，再去创建一个布局文件 ... 命名为 master.blade.php ... 
打开这个文件 ... 
在这里，加上一些 HTML 代码 ...  这些代码应该是所有使用这个布局的视图都需要的代码 ... 
<!doctype html>
<html lang="zh-hans">
<head>
    <meta charset="UTF-8">
    <title>movietalk</title>
</head>
<body>
</body>
</html>
你可以给这个布局文件添加需要的样式表，脚本文件 .. 可以定义它的样式 ...  设计布局等等  ... 
然后在想要显示区块内容的地方 ... 使用一个 @yield ..  再去指定一下区块的名称就行了 ...    比如在这里我们可以去载入 content 这个区块的内容 ..   先给这个区块添加一个容器 ...  可以再加上个 css 类 .. 这样方便去给这块内容添加样式 ...   @yield ... 在括号里，指定一下区块的名称  ... 
    <div class="page">
        @yield('content')
    </div>
保存 ...  再回到浏览器上去看一下 ... 
这里，仍然可以正常显示之前的内容 ...   不过现在， 我们可以更灵活的去展示内容了。


04-02-在布局中定义区块

在布局里面，可以使用 @yield 把指定的区块载入进来。其实我们也可以直接在布局文件里去定义区块，然后在使用这个布局的视图文件里面，可以覆盖掉这个区块里的内容，也可以先把布局区块里的内容显示出来，再去显示自己的内容。
下面通过几个简单的演示，来理解一下。
先打开 master.blade.php 这个布局文件 ... 在这里，我们可以去定义一个区块。@section ..  在括号里指定这个区块的名称  ..  比如叫它 sidebar ..
结束这个区块，之前我们用的是 @stop ... ，不过在这里，我们可以使用 @show ...   这样，如果在使用这个布局的模板文件里面，没有定义 sidebar 这个区块，就会去使用在这个布局里定义的区块内容。
在它里面，可以再简单的输入一行文字  ...   
@section('sidebar')
<h3>sidebar</h3><p>来自 master 布局的边栏内容</p>
@show
保存 ... 回到浏览器 ...   这里会显示 sidebar ，来自 master 布局的边栏内容。
下面，我们可以在使用 master 布局的模板文件里面，重新定义一下 sidebar 这个区块 ... 
打开 movie 目录下面的 index.blade.php  ...  在这里，使用 @section ... 去定义 sidebar 这个区块 ...  区块结束的位置上，使用 @stop 结束 ... 
然后在里面，再去定义要在这个区块上显示的内容 ...  
@section('sidebar')
<p>来自 index 模板的边栏内容</p>
@stop
保存 ... 回到浏览器 ... 
现在，这里会显示 来自 index 模板的边栏内容  ...   这是因为我们重新定义了 sidebar 区块要显示的内容  .. 所以会覆盖掉在布局上 sidebar 上面的内容  ... 
不过，如果你既想把布局上的区块内容显示出来，然后又想显示在模板文件里面重新定义的这个区块的内容  ...   我们可以使用一个 @parent  ... 
回到 index.blade.php ...   在这个 sidebar 区块里面  ... 输入 @parent ...   这个东西会把布局上的对应的区块内容显示出来 ..  这里应该就是把 master 布局上的 sidebar 区块上的内容显示出来。
保存 ... 再去预览一下 ...
在页面上，sidebar 这个区块上，同时会显示在布局上的这个区块的内容，还会显示使用这个布局的视图文件里面定义的这个区块上的内容。


04-03-在模板中输出数据

Blade 模板引擎提供了一些特定的显示数据的形式，这些形式，可以不用在 Blade 模板文件里面使用 php ...  可以让模板文件更容易懂，对于设计师来说比较友好。
比如，在这个 index.blade.php 文件里面，用了很多 php 的标记，去输出变量里面的值  ...   
下面，我们用 Blade 的形式去改造一下它。 在这里，可以去掉 php 的标记 ...  然后使用两组花括号去包装一下要输出的数据 ... 
{{ $user }}
{{ $email }}
{{ $boxoffice }}
这种形式的效果跟直接使用 php 标记，然后用 echo 输出是一样的 ...  不过这样的形式更友好一些，可以让模板文件更整洁 .. 
下面去预览一下 ... 保存 ...  打开浏览器 ... 会显示同样的结果 ... 
再回到这个模板文件..   如果你要输出用户提供的数据  ...  我们需要 escape 一下内容里面的 HTML 标记 ...    在 Blade 模板里面，使用三组花括号就可以实现这个功能 ...
先打开 routes.php ...  我们改造一下 user 这个数据  ...  在里面加上点 html 的标记 ..
'user'      => '<strong><i>王皓</i></strong>',
保存 .. 回到浏览器 ...   注意 王皓 这两个字的变化  ...  刷新  ...
它会变成粗体还有斜体 ...  查看一下源代码  ...   因为这个文件上面应用了 html 标记 ...   
再回到 index.blade.php ... 
我们可以使用三个花括号，去包装一下 user  ...  保存 ... 
再去预览一下 ... 
现在， 页面上会直接显示出 html 标记 ...  查看一下源代码 ...    HTML 标记用的尖括号，会自动被转换成对应文字符号 ...


04-04-模板中的逻辑

（幻灯）在模板文件里面，我们有时候也经常会用到简单的逻辑判断，比如 if ，else ，elseif ，如果怎么样，就去怎么样 ...  也可能会用到循环，去循环输出一些内容，比如 for 循环，while 循环，foreach 循环等等。
在 Blade 模板里面，使用这些东西，不需要使用 php 标记 ... 可以使用一个 @ 符号，再加上用到的像 if ，for，while 这些关键词就可以了。在结束判断或循环的地方，同样使用一个 @ 符号... 加上 endif ，或者 endfor 这些关键词。
比如去判断一个条件 ...  先用一个 @if ...  在括号里，加上要判断的条件 ...    另起一行 ...  可以去指定这个条件为真的时候要做的事 ... 
如果有其它要判断的条件，可以用一个 @elseif ，去继续指定要判断的条件，另起一行，指定这个条件为真的时候要做的事。
最后可以再用一个 @else ... 然后另起一行，再去定义其它的要做的事。
结束这个判断，在最后，可以使用一个 @endif ...  
循环
在 Blade 里面使用循环也可以这样做，@ 符号，加上循环语句的名字，比如要输出一个数组里面的东西，可以使用 foreach 循环，@foreach ，在括号里，可以这样...    items as item ，items 表示数组的名称 .. item 可以表示数组里的项目  ...   
另起一行，可以使用两组花括号，中间加上表示数组项目的名称，来输出这个项目里面的东西 ... 
 这个循环结束的时候，可以使用一个 @endforeach ...  如果你用的是 for 循环，结束的地方应该就是 @endfor ... 
在 Blade 模板中使用这些逻辑判断还有循环的方法，跟使用一般的 PHP 语法是差不多的，只不过，我们不再需要额外去输入开始 php 标记，还有结束的 php 标记。 使用 Blade 的这种方法，可以让模板更整洁一些。


05-01-HTML

Lavavel 里面的 HTML 类，定义了很多有用的方法，使用这些方法，我们可以在模板文件里面，去嵌入样式表，脚本文件，可以生成链接，列表，插入图片等等。
应用里面需要用到的资源，比如脚本文件，样式表，图片，这些东西可以放在 public 这个目录的下面  ... 
下面，我们先把一些资源放在这个目录的下面 ...   这里有几个目录 ...  它是 bootstrap 这个框架提供的一些样式表，还有脚本文件 ...  把它们放在 public 这个目录下面 ... 
然后再打开布局用的 Blade 模板文件 ... 
在这里嵌入需要的样式表，可以使用 HTML 类的 style 方法 ... 这个方法里有三个参数，样式表的地址，属性，还有安全链接，属性的类型是一个数组，安全链接是布尔值，也就是 true ，或者 false .. 真，或者 假  ...
比如我们要嵌入 public 目录下面的 css 这个目录里面的 bootstrap.css 这个样式表 ... 
先输入两组花括号 ...   在里面再输入 HTML 冒号冒号 ...  style ... 调用 HTML 的 style 方法 ...   在括号里，第一个参数是样式表的路径 ...   它是在 css 这个目录的下面 ... 叫做 bootstrap.css ...
{{ HTML::style('css/bootstrap.min.css') }}
在下面，我们可以再使用一个在这个样式表里提供的 CSS 类 ..   在这个容器里，加上一个 container ... 
保存 ... 回到浏览器，刷新 ...
点击右键  ... 审查元素 ...  你会看到，Laravel 会把刚才的代码转换成嵌入样式表的链接 ... 
默认这里会使用 HTTP 协议，如果你想使用 HTTPS 协议，可以把 style 方法的第三个参数设置成 true ... 
回过来 ...  这个 style 方法的第二个参数是一个属性数组 ...  没有特别需要指定的属性，在这里可以加上一个空白的数组 ...   再输入一个逗号 ...再把第三个参数的值设置成 true ...  表示我们要使用加密的安全协议去嵌入这个样式表。
{{ HTML::style('css/bootstrap.min.css', array(), true) }}
保存 ... 回到浏览器 ...  
现在你会看到，刚才的 http ，会变成 https ...  不过因为我现在使用的 Web 服务器，不支持 HTTPS，所以，不会在页面上嵌入这个样式表... 
回过来，把这两个参数先去掉 ...  使用简单的 http 协议 ... 
Script
嵌入脚本文件，用的是 script 方法 ... 用法跟 style 方法是差不多的 ...    两层花括号，HTML 冒号冒号，script ...  同样这个方法有三个参数，第一个参数是脚本文件的地址，第二个参数是属性数组，第三个参数是，是否要使用安全链接。
这里我们把 public 目录下面的 js 这个目录里的 bootstrap.js 链接进来 ...  js/bootstrap.js
{{ HTML::script('js/bootstrap.min.js') }}
保存 ... 回到浏览器，刷新。
这里你会看到，已经嵌入了 js 目录下面的 bootstrap.js 这个脚本文件。


05-02-插入图像

使用 HTML 类的 image 方法，可以在模板文件里面插入图像。这个方法有四个参数，第一个参数是图像的地址，第二个参数是图像的 alt 属性的值，第三个参数是一个属性数组，最后一个参数是，是否要使用 https 协议插入图像。
下面，我们可以在这个模板文件里面，插入一张图像 ...  图像文件是在 public 目录下面的 image 目录里面。
两层花括号... 然后输入 HTML 冒号冒号，image  ...  图像是在 image 目录下面，叫做 fargo-poster.jpg ...    用逗号分隔一下，再去设置它的第二个参数，也就是图像的 alt 属性的值 ..    '冰血暴海报'  ...   第三个参数是一个属性的数组 ...  比如你可以给图像添加 class 属性，指定一个 css 类，可以添加 id 属性，也可以是其它自定义的属性，这些属性的名称，还有属性的值，要放在一个数组里。
比如我们去给这个图像添加一个 class 属性 ...   先输入一个 array ，去定义一个数组  ...  数组里面使用名值对的形式 ...  设置的属性的名称是 class ....  跟它对应的值是  img-circle .. 这个类的样式是来自 bootstrap  样式表 ... 
用逗号再分隔一下 ... 可以继续去定义其它的应用在这个图像上的属性还有对应的值  ....   再添加一个 width 属性 ... 设置一下图像的宽度 ... 对应的值是 xxx ... 
{{ HTML::image('image/bg.jpg', '背景', array('class' => 'img-circle', 'width' => '200px')) }}
下面到浏览器里预览一下 ...
在页面上，会显示出 image 目录下面的 xxx  这张图像 ...  再查看一下这个地方的元素 ... 
在这个图像标签里面，还会包含一个 class 属性 ... 值是 xxx  ... 还有一个 width 属性 ... 对应的值是 xxx ...


05-03-生成链接

在视图里面生成链接，用的是 HTML 类的 link 方法 ...  跟它对应的还有一个 secureLink 方法 ... 它可以生成使用安全协议的链接。使用 link 方法也可以去设置让链接使用安全协议。
link 这个方法有四个参数，第一个参数是链接的地址，第二个参数是链接上的文字  ...  第三个参数是一个属性数组，最后一个参数是，是否要使用安全协议。如果把这个参数设置成 true ... 就会跟 secureLink 这个方法的功能一样，在链接里面使用 https 协议。
下面，我们可以在这个视图里面使用 link 方法插入一个链接。
同样先要使用两层花括号，再输入 HTML 冒号冒号 ...  link ... 要链接的地址是应用的首页 ...  用一个斜线来表示 ...   然后是链接上的文字  ...  输入
首页 ...  再给这个参数添加一个 class 属性 ...  先输入一个 array ...    要添加的属性是  class ，对应的值是 btn btn-lg 还有 btn-primary ... 
{{ HTML::secureLink('/', '首页', array('class' => 'btn btn-lg btn-primary')) }}
保存 ... 去浏览器上再看一下...
在页面上，会显示一个首页链接 ... 在这个链接上，会应用 btn，btn-lg 还有 btn-primary 这几个 CSS 类  ...  它们的样式是在 bootstrap.css 这个样式表里面定义的。


05-04-生成列表

HTML 类的 ol 还有 ul 方法，可以把一个数组转换成有序，还有无序列表。 这两个方法里面有两个参数，第一个参数是要转换成列表的数组，第二个参数是一个属性数组，这个数组里面的属性，可以应用到 ol 还有 ul 标签上。
下面，我们先去准备一个数组 ....  可以打开 routes.php ，在这里， data 是一个数组  ...   不过我们把 data 传递给视图的时候，会把这个数组里面的项目转换成各自的名称的数据，比如 user 里面是 王皓， email 的值是 wanghao@ninghao.net ... 
这里我们需要传递一个数组数据 ... 所以，可以把它们再放在一个数组里面  ...  这个数组的名字可以叫做 accout .. 
    $data = array(
        'account' => array(
             'user'      => '<strong><i>王皓</i></strong>',
             'email'     => 'wanghao@ninghao.net'
    ));
这样，把 data 传递给视图以后，accout 就是一个数组了 ... 然后再把它做为 ol 还有 ul 的一个参数，就可以把这个数组里面的项目转换成一个列表了。
打开 master.blade.php 这个文件 ... 
先清理一下 ... 
然后去调用 HTML 类的 ol 方法 ...   把传递过来的 accout 作为它的第一个参数 ...   
{{ HTML::ol ($account) }}
保存 ..  打开浏览器 ... 
在页面上，会显示一个有序的列表  ...  这个列表里面的项目，就是传递给视图的 account 这个数组里面的项目。
再去看一下 ul 方法 ... 回到视图文件 ... 把 ol 换成 ul ..  
再回到浏览器 ... 
现在，这个列表会变成一个无序的列表 ... 因为我们使用的是 HTML 类的 ul 方法。


06-01-表单

生成表单，用的是 Form 类。
打开之前我们创建的 index.blade.php 这个模板文件。先清理一下 ... 
插入一个表单，可以使用 Form 类的 open 还有 close 方法 ... open 方法可以生成表单开始的标签 ...  close 方法生成的是表单结束的标签。
两层花括号 ... Form 冒号冒号 ... open ，使用 Form 类的 open 方法 ... 这个方法里面有一个参数，参数的类型是一个数组，数组里的东西就是这个表单的一些选项。
等会儿我们再去指定一些选项 ... 
在表单结束的地方，再使用一个 Form 类的 close 方法。
 {{ Form::open() }}
 {{ Form::close() }}
然后去前面看一下 ..  保存 ...   打开浏览器 ...  地址是 movie ...   查看一下这个页面的源代码  ... 
在这里，你会看到一个 Form 表单  ...  默认，这个表单的 method ，也就是表单的方法是 POST　...  提交的地址是当前的这个页面 ...  也就是 action 属性的值  ...   接受的字符集是 UTF-8
另外在这个表单里，还有一个隐藏的 input 元素 ...  它的值是一串随机的字符串 ... 这是为了防止 CSRF，也就是身份欺诈 ，自动生成的一个 Token ..   用户在提交表单的时候，Laravel 会把这个 token 的值放到用户的 session 里面。 提交以后如果发现期望的 token 值，跟用户 session 里面的 token 值不匹配...  就会放弃提交。
<form method="POST" action="http://localhost:8000/movie" accept-charset="UTF-8">
<input name="_token" type="hidden" value="YfQjV1pi7jrMDAonzdaqDxefznCJy8gzlehi1aBG">
</form>
选项
下面，我们再去设置一下这个表单的相关的选项 ...   
回到模板文件 ...   表单的选项参数会放在一个数组里 ...  先输入一个 array ..    比如我们要修改表单的提交方法 ...  可以设置一下 method 属性 ...
array('method' => 'GET')
保存 ... 回到浏览器 ....  你会看到，method 属性的值会变成 GET .. 
再回去修改一下 ...  把 GET 换成 PUT ...  然后再去设置一下提交到的地址 ...   设置一下 url 属性 ...    对应的值是 movie/new
array('method' => 'PUT', 'url' => 'movie/new')
再去看一下 ...
表单的 action 属性会变成设置的 movie 斜线 new  ...   不过 method 方法属性的值是 POST ...  这是因为目前 HTML 表单只支持 POST 和 GET 两种方法 ... 
使用其它的 HTTP 方法 ...  Laravel 会在表单里面加上一个隐藏的 input 元素 ... 元素的名字是下划线 method  ...   这个元素的值就是对应的方法的名称 ...  你会看到，这里是 PUT　...


06-02-表单元素

在 Lavavel 的 Form 类里面，提供了一些方法，可以去创建表单元素，这些方法的名字基本上跟表单元素的名字是一样的。比如 text 方法可以添加文本类型的表单元素，password 可以添加密码类型的元素，select 可以添加选择列表，checkbox 可以添加复选框  ... 用 label 方法，可以给元素添加标签，file 方法可以添加上传文件的表单元素，submit 方法可以生成一个提交按钮。
下面，我们可以去试几个生成表单元素的方法。
先去添加一个文本类型的表单元素 ...  用的是 Form 类的 text 方法。通常这些方法都支持两三个参数 ... 第一个参数是要添加的这个表单元素的名称 ..  第二个参数是它的默认的值 ...  第三个参数是它的相关的选项。
两层花括号 .. Form 冒号冒号 ... text ...  这个元素可以叫它 ... movie_title  ... 
{{ Form::text('movie_title') }}
保存 ... 再去预览一下 ..   页面上会显示一个文本框  ...   文本框的名称 ... 也就是 name 属性的值是 movie_title  ... 
标签
下面，我们再去给这个表单元素添加一个 label  ...  用的是 Form 类的 label 方法  ..  它的第一个参数是标签的名称  ...    我们可以叫它 movie_title  ... 这样这个标签会自动去匹配 movie_title 这个表单元素 ...  并且在这个元素上添加一个 id ，id 的值也会是 movie_title  ..
它的第二个参数是这个标签上显示的文字  ...   输入 电影标题 ... 
{{ Form::label('movie_title', '电影标题') }}
保存 ...  回到浏览器 ... 
在 movie_title 这个文本框的上面会显示一个标签  ...  这个标签的 for 属性是 movie_title ...   movie_title 这个文本框上面，也会多出一个 id 属性，属性的值，也会是这个 movie_title   ... 
其它元素
下面，我们再去添加一个文本区域，再加上一个提交按钮 .. 
先给文本区域也添加一个标签  ...  这个标签是为 movie_content 表单元素准备的 ... 上面的文本是 电影内容 
{{ Form::label('movie_content', '电影内容') }}
再去添加文本区域 ... 使用 Form 类的 textarea 方法  ...  元素的名称是 movie_content  ...
{{ Form::textarea('movie_content') }}
下面再去添加一个提交按钮 ...  用的是 submit 这个方法 ...   在这个方法里，可以指定一下按钮上的文字  ... 
{{ Form::submit('发布电影') }}
保存 ... 回到浏览器 ... 
页面上会显示三个表单元素 ...  电影标题，电影内容，还有发布电影的按钮 ...


07-01-控制器 - Controllers

我们可以把相关的路由，使用一种叫 Controller ，控制器 的东西组织在一起。在控制器里面，可以定义一些方法，然后用这些方法里去处理路由的逻辑。这样做可以让应用的路由的结构更清晰 ... 更容易维护，也可以使用架构提供的一些其它的高级功能。
一个控制器，其实就是一个 class 。  先打开 app 目录下面的 routes.php  ... 
在这之前的视频里，我们在这个文件里创建了一些路由 ...  用 Get 方法请求 movie 地址，还有用 Post 方法请求 movie 地址，还有用 Get 方法请求 movie 斜线加上电影的 id 这样的地址的路由。
在这些路由里，我们把处理这些请求的逻辑放在了对应方法的第二个参数里面 ...    因为这些路由都是跟 movie 相关的 ... 所以，我们就可以去创建一个叫 movie 的控制器 ... 在这个控制器里，去定义一些方法，去处理这些路由。
控制器，一般会放在 app 目录下面的 controllers 这个目录里面。 这个目录里面，已经包含了两个控制器 ... 一个是 BaseController  ...  我们自己创建的控制器，都要去继承这个控制器。
还有一个 HomeController.php  ...  这是一个演示用的控制器 ...  你可以基于这个文件里面的内容，去创建自己的控制器 ... 
创建控制器
新建一个文件 ... 命名为 MovieController.php   ....  控制器的名称 ... 再加上 Controller  ...   打开这个文件 ... 在这里，我们要定义一个类 ...  这个类的名字就是控制器的名字 ..   
我们自己创建的控制器类，都要去继承 BaseController  ...   也就是在 BaseController.php 里面定义的类 ...   在这个类里，可以去添加一些所有控制器都需要的东西。 
继承其它的类用的是 extends  ...  然后是要继承的类的名称  ...  BaseController ... 
<?php
class MovieController extends BaseController {}
在这个类里面，去定义一些方法 ... 用这些方法去处理路由 ...  
public ... function ...  movieIndex  ...   这个方法就是把请求指向 movie 目录下面的 index.blade.php 或者 index.php 这个视图文件 ... 
    public function movieIndex() {
        return View::make('movie.index');
    }
在路由里面，使用这个控制器里的这个方法 ...  需要再去编辑一下 routes.php  ...  打开这个文件 ...  比如我们要在 get movie 这个地址的路由上使用刚才定义的方法  ... 
去掉这里的 function 参数  ...  然后去指定一个控制器类的方法 ...  首先是控制器的名称  ...  后面是这个控制器类里的方法 ... 中间用一个 @ 符号 ... 
Route::get('movie', 'MovieController@movieIndex');
这个路由的意思就是，如果有用 get 方法请求 movie 这个地址 ... 把这个请求交给 MovieController 这个控制器里面的 movieIndex 方法去处理 ...
在这个方法里面，会把请求指向一个视图文件 ... 也就是在 views 目录下面的 movie 目录里面的 index.blade.php 这个文件 ... 
打开这个文件再看一下 ... 
先清理一下 ...   留下 @extends('movie.layout.master')   这行 ...   然后在  content 这个区块里面，只是简单返回一个 电影列表 这几个字 ... 
然后去掉其它的东西 ...   再去编辑一个这个视图文件使用的布局 ...  movie 目录下面的 layout 里面的 master.blade.php  ... 
清理一下 ... 主体内容只留下这行 @yield 代码  ... 
下面，我们再到浏览器上预览一下 ...  
打开 movie 这个地址 ... 在页面上会显示 电影列表 ... 
使用刚才介绍的方法，我们可以继续在 MovieController 这个控制器里，去定义其它的方法来处理其它的路由  ...


07-02-控制器参数

回到 MovieController.php ..  再去添加一个方法 ...  叫它 movieGet ... 一会儿用它去处理请求个别电影页面  ...  这个方法需要传递进来一个参数 ...  $movie_id  ... 
方法里面可以指定一个视图 ...  这个视图放在 movie 目录下面 .. 叫做 single.blade.php ...   然后我们再把传递过来的 movie_id 这个参数传递给这个视图 ... 可以作为它的第二个参数  ... 是一个数组 ...  传递过去叫做 movie_id .. 传递的值是这个 $movie_id  ... 
    public function movieGet($movie_id) {
        return View::make('movie.single', array('movie_id' => $movie_id));
    }
下面，我们再去创建这个视图文件 ...  在 views  ... movie 这个目录的下面，新建一个文件 ..  命名为 single.blade.php ...  先让它使用 movie.layout.master 这个布局 ... 
在 content 这个区块里，指定一点要显示的东西 ...  电影页面 ...  下面加上传递过来的 movie_id 的值  ... 
@extends('movie.layout.master')
@section('content')
    <h1>电影页面</h1>
    <p>{{ $movie_id }}</p>
@stop
再去编辑一下路由  .. 打开 routes.php  ...   在给这个 get ... movie 斜线 movie_id 这个路由，去指定一个控制器的方法 ..   使用 MovieController 的 movieGet 这个方法 ...  也就是刚刚我们创建的那个控制器方法。
Route::get('movie/{movie_id}', 'MovieController@movieGet')
->where('movie_id', '[0-9]+');
保存 ... 打开浏览器 ...  输入 movie 斜线  ... 加上一个 id 号 .. 
这里会显示 电影页面 ... 下面还有在地址指定的 id 号 ...


07-03-REST 控制器

使用控制器，我们可以把相关的路由处理方法组织到一块儿，不过，我们还是需要去创建不同路由，然后为路由指定应用这些方法。Lavarel 提供了两个更简单的方法。
一个叫 REST 控制器，还有就是 Resource 控制器，也可以叫资源控制器。
REST 控制器，可以让我们只创建一个路由，给它指定一个控制器，在这个控制器里，用 REST 命名的规范去创建方法。这样这些方法会自动应用到不同的请求上。
给路由指定一个控制器，用的是 Route 类的 controller 方法 ...  
在这个方法里，第一个参数是一个基本的地址，比如 movie  ..  user ... video ... blog...  photo   等等  ... 第二个参数是给这个基本的地址分配的控制器的名称  ...  
然后在这个 REST 类型的控制器里面，可以使用 HTTP 的动作的名称，比如 get 或者 post  ... 后面加上请求的地址 ...  比如 getIndex  ... 这个方法默认会去处理使用 get 方法请求基本地址的根目录  ...  这里就是 movie 这个地址 ... 
再比如，去定义一个 postCreate 方法 ... 这个方法对应的是，使用 post 方法，请求使用这个控制器的路由的基本地址，后面加上斜线 create ... 这里就是用 post 方法请求 movie 斜线 create 这个地址  ... 
一般会去显示一个发布内容的表单页面 ... 
使用这样的 REST 控制器，可以让我们定义一个路由，然后在这个路由指定的控制器里，去处理使用不同动作的请求。


07-04-资源控制器 - Resource Controllers

Laravel 还提供了一种更方便的控制器，叫做 Resource Controllers  ...  资源控制器 ...   跟 REST 类型的控制器有点类似，不过它用起来更方便。如果你想创建一个控制器来管理应用里面的某个类型的资源，比如用户，视频，产品，文章等等，这些都属于应用里面的资源 ... 
这样，我们去创建一个资源控制器，这个控制器里的方法，会自动去处理不同的路由。
比如我们给应用上的用户，去创建一个资源控制器，首先，使用 Route 类的 resource 方法，先指定一下用户资源的基本地址 ... 比如 users ... 然后在第二个参数里面去给用户指定一个资源控制器 .   
然后在这个资源控制器里，使用 index，create，store，show，edit，update，destroy 这些方法 ...    index 这个动作可以处理使用 GET 方法请求用户资源列表 ...   相当于访问 users 这个地址  ... 
create 方法处理使用 get 方法请求资源斜线 create 这个地址  ... 这里应该就是 users/create  ... 可以用它来显示一个创建新的用户的表单。
store 方法处理的是使用 post 方法请求资源的基本地址，一般就是提交新的资源 ...  比如创建一个新的用户。
show 方法可以显示个别的资源  ...  比如 users/1  ..  user/wanghao 这样的请求  ...  可以用来显示单个资源  ... 
edit 方法是去处理编辑资源  .. 地址一般是资源的基本地址，斜线 ...  资源 ...  然后是 edit  ... 比如 users/1/edit  ...   意思就是去编辑 id 号是 1 的用户资源  .. 
update 方法可以处理更新资源  ... destroy方法处理的是删除资源的请求。


07-05-创建一个资源控制器

创建一个 Resource Controller，资源控制器，有一个简单的方法，就是通过 Laravel 的命令行工具 ...  artisan  ...  下面，我们用它去创建一个用户资源控制器 ...  
打开命令行工具 ... 进入到项目所在的目录   ... 
然后输入 php artisan  ...  controller 冒号 make ...  后面是要创建的控制器的名称  ...   UserController  ...  
php artisan controller:make UserController
提示 ... Controller created successfully!  成功创建了控制器 .. 
打开项目   ...  在 controllers 这个目录的下面 ...  我们可以找到刚才使用命令创建的 UserController.php 这个文件  ...  打开它  ... 
在这个文件里面 ...  Laravel 已经准备好了一个资源控制器的模板   ...   控制器的名称  ..  还有里面定义的方法 ... 
为了演示，我们可以先在这些方法里只返回简单的文字  ... 
index 方法是显示资源列表用的 ...   
return '用户列表';
create 方法可以用来显示一个创建资源的表单  ... 
return '创建用户';
store ，可以保存资源 ... 
return '成功创建了用户！';
show 方法是用来显示单个的资源  ... 
return '用户：'. $id;
edit 可以用来显示一个编辑资源的表单  ...
return '正在编辑用户：' . $id;
update 方法是更新资源用的 ...
return '更新了用户：' . $id;
destroy 是删除资源用的 ... 
return '删除了用户：' . $id;
路由
保存一下 .. 然后我们再去给用户资源添加一个路由 ....  打开 routes.php ... 使用 Route 类的 resource 方法  ...  先去设置一下资源的基本的地址 ... 这里我们设置成 users  ...   第二个参数是指定的资源控制器  ... 
Route::resource('users', 'UserController');
预览
保存 ... 再到浏览器上预览一下 ....
输入 http://localhost:8000 斜线  ... 后面加上资源的基本的地址 ...  users  ... 
这样会显示出资源的列表  ... 如果使用 post 方法请求这个地址的话，可以发布新的资源  ... 
查看个别资源，可以在基本地址的后面，加上对应的 id ...  比如 users/99  ... 应该可以显示 id 号是 99 的用户。当然这个 id 也可以是用户的名称 ... 或者其它能标识这个用户的东西 ... 
如果用 PUT 或者 PATCH 方法去请求这个地址，可以更新这个资源  ...  用 DELETE 方法请求这个地址，可以删除掉这个资源  ... 
编辑这个资源 ...  后面要加上 edit  ... 
创建新的用户，可以输入 users/create  这个地址 ...  这个请求会使用 UserController 控制器里面的 create 方法去处理。


