00-00-课程介绍

CSS 的选择器是学会 CSS 的最重要的部分 …   它的作用就是，选中在文档里的你想要应用样式的元素 …  然后在对应的选择器里去定义想要的样式 … 
在 CSS 的第三个版本里 … 除了以前就有的 … 像是标签选择器，类选择器 …  ID 选择器等等 … 还添加了一些其它的选择器 …  比如可以选择元素子元素的伪类选择器 … 
我们可以选择第一个子元素 … 最后一个子元素  …   也可以选择在指定位置上的子元素 …   或者奇数位置上的子元素 … 偶数位置上的子元素  … 我们甚至可以自己去定义选择模式 …  比如从第四个开始，以后每隔四个元素选择一次  … 
使用这些新的选择器，把它们组合在一起使用，你几乎可以选择文档里面任何你想要的地方..   然后去给它们应用想要的样式 … 
我是王皓，下面我们就一起去学习一下使用 CSS 3 里的这些选择器 .. 


01-01-类型选择器 - Type selector

CSS 的类型选择器就是使用 html 的标签的名字来选择文档里面的元素。
比如我们想给文档里的 h1 标题元素添加点样式，输入标签的类型 …  h1 {}
在大括号里可以统一为页面上所有的 h1 标签添加点样式 …   tar …  lh1.5
再选择页面上的 h2 标签 …   同样去添加点样式 …   h2{}  tar … color: #ccc …  fz20  lh1.5
同样我们也可以选择 h3 ….   h3 {} … tar … lh1.5
最后再选择一个段落标签  …  p  …   tar … lh1.5


01-02-选择器的群组 - Groups of selectors

选择器的群组就是使用逗号分隔开不同的选择器 … 然后在后面为这个选择器的列表添加一块统一的样式 …  选择器群组比较适合选择器拥有共同的样式的情况 … 
比如在这个样式表里 ，h1 ，h2，h3，还有 p ，这些选择器后面都有共同的样式 … text-align: right  … line-height: 1.5  … 
这种情况我们可以这样做   …  h1, h2, h3, p  …  用逗号分隔开不同的选择器，最后在逗号后面可以加上一个空格 …  后面是它们的统一的样式 … 
这样我们就可以去掉选择器里单独设置的这些样式 .. 


01-03-通用选择器 - Universal selector

通用选择器就是用一个 * 号，代表所有的元素 …  使用这个选择器的样式会应用到所有类型的元素上 …  比如我们想给所有元素应用一个行高的样式... 可以这样 …  输入一个 * 号，表示所有元素 …   你会看到它会选中页面上的所有的元素 …   然后在上面应用一个行高为 1.5 倍的样式 .. 
* {
    line-height: 1.5;
} 


01-04-类选择器 - Class selectors

在文档里的元素上我们可以添加 CSS 类，然后使用类选择器，为拥有这个 CSS 类的元素去添加样式 ..  我们这里有个拥有 .container 类的 div 元素 …  想为它添加样式，可以先输入一个 . 然后再加上元素上的类的名称 … 
.container {
    padding: 0 10px;
}
在页面上的标题元素上，我都给它们添加了一个 .title 类 …  输入 .title {}  … 可以选择所有拥有这个类的元素  … 
.title {
    color: #dd514c;
}  
这里我们可以配合标签的名称更具体的去选择，比如只想选择 h3 元素上拥有这个类的元素 …   在这个点的前面，加上标签的名称  …  h3.title
把 h3 换成 h2 ，会选中带 .title 类的 h2 元素 …  
我们也可以组合类名 …   h1 元素上同时拥有 .title 类和 .band-name 这个类 …  想选择同时拥有这两个类的元素，可以这样做  …  .title.band-name … 


01-05-ID选择器 - ID selectors

使用在元素上定义的 ID，可以选择带有这个 ID 的元素，然后去为它添加一些样式 …  在这个文档上， h1 元素上定义了一个叫 page-title 的 ID ，注意一般来说，一个文档里不能有重复的 ID 名称 .. ID 表示文档里面唯一身份的元素 … 
ID 选择器就是在 ID 名字的前面加上一个 # 号 ..  
 #page-title {
     color: #dd514c;
} 


01-06-属性选择器 - Attribute selectors

我们可以使用元素里的属性作为选择器 …  属性名称的周围加上一个方括号 ..  表示选择拥有方括号里的这个属性的元素 …  我们也可以指定多个属性  …  这就表示去选择同时拥有这些属性的元素 … 
也可以指定属性的具体的值 …  它的意思是去选择拥有这个属性，并且拥有具体的这个值  …  有些属性里可能有多个值，不同的值之间用空格分隔开 …   选择属性里包含使用空格分隔开的某个值，可以在 = 号前面加上一个 ~ 号 … 
等号前面也可以是 竖线，它表示，属性的值是等号后面这个具体的值 … 或者是以这个值开头并且后面带 - 线的值  … 
测试
比如我们要选择文档里面包含  data-album 属性的所有的元素 …  然后去应用点样式 … 
[data-album] {
    border: 1px solid #ccc;
    margin-left: -1px;
    margin-bottom: -1px;
} 
方括号前面可以加上标签的名称，让这个选择器更具体一些 … 它表示，选择包含 data-album 属性的所有的 li 元素 .. 
下面我们再去选择，拥有 data-album 属性，并且它的值是 single 的 li 元素里面的 img 元素 … 
li[data-album=single] img {
    border-radius: 50%;
} 
注意这里并没有选中第一个图像元素，因为它的父元素 li 的 data-album 属性的值里，不仅有 single ，还有 atlas 这个值  ..   想要选中它的话，可以在等号前面加上一个 ~ 线 .. 


01-07-属性选择器里的匹配

在属性选择器里，等号前面加上一个 ^ ，表示去选择属性是以等号后面的值开始的元素，如果是 $ 号，表示，以等号后面的值结尾 …  或者我们也可以使用 * 号，表示属性的值里包含等号后面设置的字符  … 
下面我们可以选择文档里 alt 属性的值包含某个字符的图像元素 … 
img[alt*="Viva"] {
    border-radius: 50%;
} 
你会看到样式应用在了这两个图像上，因为只有它们的 alt 属性的值里，包含 Viva 这个字符 … 
如果想把这个样式应用到所有 src 属性里以 images/ 开头的图像元素上  ..   也就是在 images 目录里的所有的图像 … 
img[src^='images/'] {
    border-radius: 50%;
} 
或者我们可以统一去为所有 .jpg 格式的图像添加这个样式 .. 
img[src$='.jpg'] {
    border-radius: 50%;
} 


02-01-伪类 - 链接

浏览器一般会在没有访问过的链接上应用一个 :link 的伪类，在访问以后的链接上应用一个 :visited 的伪类 …  我们可以使用这两个伪类给页面上的没访问过还有访问过的链接应用不同的样式 … 
a:link {
    color: #0E90D2;
}
a:visited {
    color: #CCC;
} 
现在，页面上没有访问过的链接文字是一种蓝色 …   点击链接 ..   这个链接就变成访问过的了 .. 所以会使用 a:visited 里面的样式 ..  文字的颜色会变成一种灰色 … 


02-02-伪类 - 用户动作 :hover, :active, :focus

有一些跟用户动作相关的伪类，比如鼠标指针移动到上元素上，会应用一个 :hover 的伪类 …    元素在活动状态的时候，比如用户点击元素并且按住鼠标按键，这个时候会应用 :active 伪类  …   松开鼠标以后，会去掉这个伪类 … 
还有一个 :focus 伪类 … 比如在文本框处于焦点状态的时候，也就是点击选中了文本框 … 这个动作会为元素添加  :focus 伪类 … 
我们可以去设置一下 li 标签的 :hover 伪类的样式 … 
li:hover {
    background-color: #eee;
    border-radius: 5px;
}
鼠标放在列表项目上，会触发在 :hover 伪类上的样式 …  
再设置一下列表项目的 :active 伪类的样式 … 
li:active {
    background-color: #8058a5;
}
然后再设置一下在激活状态下的 a 标签的样式 .. 
li:active a{
    color: #fff;
}
找到页面上的一个列表项目 … 用鼠标按住它 … 这样会应用在它的 :active 伪类里的样式 … 背景会变成紫色  …  链接文字会成为白色 … 
下面我们再试试 :focus 伪类  …    点击选中这个文本框  .. .. 这样会在这个文本框元素上应用一个 :focus 伪类 …  这个文本框上我定义了一个叫 #search 的 ID  … 可以使用这个 ID 作为这个选择器的一部分 … 
#search:focus {
    outline: none;
    border: 2px solid #129FEA;
} 
再点击选中这个文本框  …  现在，  处于焦点状态的文本框会应用我们自己设计的样式 … 


02-03-伪类 - 目标 :target

当在文档内部使用 ID 作为链接的时候，用户点击了这个 ID 链接，被链接的元素上会应用一个 :target 伪类 … 
这里我在 li 上定义了一个 id ，然后用它下面的文字链接了这个 ID  …  这样点击这个链接就会在这个 li 标签上应用一个 :target 伪类 … 
li:target {
    background-color: #eee;
} 
点击链接 …  
在 li 元素上会应用一个我们设计的样式 … 


02-04-伪类 - 用户界面 :disabled

在表单元素上，添加一个 disabled 属性，表示当前禁用这个元素，也就是文本框不能输入，复选框也不能选择 … 有这个属性的话，会在元素上应用一个 :disabled 的伪类 ..  比如我们在这个搜索框上面添加了一个 disabled 属性 … 用它的 :disabled 伪类可以为这个搜索框添加点禁用时候的样式 .. 
#search:disabled {
    background-color: #f5f5f5;
} 


02-05-伪类 - 结构伪类 :nth-child()

使用 :nth-child() 这个伪类 .. 我们可以根据子元素基于它的父元素的位置来选择元素  …    这个伪类支持参数 … 参数可能是一个整数  …  比如 1，会选择父元素里的第一个子元素 .. 
我们也可以使用关键词作为它的参数  … 比如 odd  … 这样可以选择奇数位置上的子元素 …  也就是在第 1，3，5，7 这样位置上的元素 …  我们也可以使用 even … 它可以选择偶数位置上的子元素 .. .
另外这个参数还可以是表达式 ..  表达式的形式是 an+b  ..  a 和 b 都是整数 …   b 表示开始的位置  …   前面的 an 表示隔几个选择 …  2n 就表示隔两个选择 … 
这样 2n+1 跟关键词 odd 是一样的功能 … 它会先选择第一个元素 … 然后隔两个，选择第 3 个元素 ..  然后再隔两个选择第 5 个元素 .. 
如果表达式是 2n+0 ，它相当于是 2n  …  从第零个开始，隔两个一选择，也就是第一个选择的元素是第二个子元素 … 然后是第四个 …  它的功能跟关键词 even 是一样的 .. 
测试
下面我们去测试一下 …     比如我们要选中页面上这个封面列表里的第一个列表项目里的图像元素 … 然后把它变成圆形的 .. 
li:nth-child(1) img {
    border-radius: 50%;
} 
选择第二个列表里的图像，可以把开始的位置号改成 2   …   选中奇数项目 …   使用关键词 odd  … 或者使用表达式 2n+1
选中偶数项目，可以使用 even  …   使用表达式的话，可以使用 2n+0  … 或者省掉后面的 0 .. 直接使用 2n  … 
如果想从第四个开始选择，然后每隔4个元素选择一个 …   可以使用表达试 4n+4  …


02-06-伪类 - :nth-last-child()

:nth-last-child() 这个伪类跟 :nth-child() 的用法是一样的 …   它也可以根据子元素基于它的父元素的位置来选择元素 … 只不过它是倒着来的 … 如果使用参数  1 ，它会选择最后一个子元素 …  
参数里也可以使用关键词 odd  ，还有 even …   注意这个奇数和偶数都是倒数过来的  …    我们也可以使用表达式 …. an+b  … 
测试
下面我们选中封面列表里，最后一个，也就是倒数第一个列表项目里的图像元素 … 然后应用一个圆形的样式  … 
li:nth-last-child(1) img {
    border-radius: 50%;
}
选中倒数第二个 … 可以直接使用数字  2 …


02-07-伪类 - :nth-of-type(), :nth-last-of-type()

在一个父元素里的子元素，使用 :nth-of-type() 可以按类型和位置来选择这些子元素 .. 比如选择所有在父元素里，排在第1位置的图像元素 …   这个伪类的参数跟之前介绍的 :nth-chlid() 的参数的使用是一样的 ..  可以使用数字，关键词，还有表达式 　… 
另外还有一个 :nth-last-of-type() 伪类 .. 它可以倒过来数元素的位置  …  
在这个文档里， .container 这个元素的下面有很多子元素 …   如果我们想要选中第二个 p 元素 … 
p:nth-of-type(2) {
    background-color: #FCEBBD;
    color: #AF9540;
    padding: 20px;
} 
选中第一个，可以使用数字 1 … 
下面再去看一下 :nth-last-of-type()  ….  比如要选中倒数第一个 p 元素 … 
p:nth-last-of-type(1) {
    background-color: #FCEBBD;
    color: #AF9540;
    padding: 20px;
}  
选择倒数第二位置上的 p 元素 .. 可以使用数字  2  …


02-08-伪类 - :first-child, :last-child

:first-child 可以选择父元素里的第一个子元素 … 它相当于 :nth-child(1)  …. 
:last-child 这个伪类可以选择父元素里的最后一个子元素  …  用 :nth-last-child() 表示的话，就是 :nth-last-child(1)  …  表示在倒数第一位置上的元素 … 
测试
下面我们可以去选择封面列表里第一个列表里的图像 …. 
li:first-child img {
    border-radius: 50%;
} 
把 first 换成 last 　… 可以选择最后一个列表里的图像元素 …


02-09-伪类 - :first-of-type, :last-of-type

:first-of-type 这个伪类表示父元素里某个类型的第一位置上的元素 …  它相当于是 :nth-of-type(1)  …   还有一个:last-of-type   … 表示某个类型最后一个，也就是倒数第一位置上的元素 …  跟 :nth-last-of-type(1)  的效果是一样的 .. 
测试
下面我们可以选中这个文档里面，排第一位置的 p 元素 …  
p:first-of-type {
    background-color: #FCEBBD;
    color: #AF9540;
    padding: 20px;
}  
想要选择排倒数第一的 p  元素 …   可以换成 :last-of-type 这个伪类  …


02-10-伪类 - 独生子 :only-child

:only-child 可以选择父元素里的独生子，也就是没有兄弟元素的元素，这个选择器的功能和 :first-child:last-child 这个选择器的功能是一样的 … 或者也可以使用  :nth-child(1):nth-last-child(1)  … 
:only-child 这个选择器是它们的一个简单形式 …  也就是选择的元素即是父元素里的第一个子元素，也是最后一个子元素  ….
另外，还有一个 :only-of-type 伪类 　… 它可以用来选择一个类型的独生子 …   就是被选择的元素可能有兄弟 … 但是它的兄弟们跟它都不是一个类型的 … 
这个选择器和  :first-of-type:last-of-type 组合在一起用是一样的 …   也可以使用 :nth-of-type(1):nth-last-of-type(1)  ..  它们都可以选择父元素里某个类型的独生子元素 … 


02-11-伪类 - 空白元素 :empty

:empty 这个伪类选择器可以选择空白元素 .. 也就是元素里没有任何内容  …   注意它只会选择完全空白的元素，元素里包含一个简单的空格也不行 … 
这个文档里包含一个空白的 <div> 标签  … 想找出它并且给它添加点样式，可以这样 … 
div:empty {
    width: 170px;
    height: 170px;
    background-color: #eee;
}
这个选择器只会把文档里空白的 div 元素选择出来 …   然后去应用样式 …


02-12-伪类 - 否定 :not()

:not() 是一个否定的伪类，我们可以把一个简单的选择器作为一个参数给这个 :not() 伪类选择器 … 这样选择的元素就是不匹配指定选择器的元素 .. 
比如，在这个文档里，我们想要选择不是第一个子元素的 li 元素  …   li:not … 在括号里指定一个否定选择器 …  这里我们用 :first-child 这个伪类选择器 .. 它的意思是第一个子元素 … 不过现在它在 :not() 这个否定伪类里，所以，整个选择器的意思就是去选择不是第一个子元素的 li 元素 … 
你会看到，会选择除了第一个列表以外的所有的列表元素 … 
li:not(:first-child) {
}
再试一下，选择不是最后一个子元素的列表元素 ..  把 :first-child 换成 :last-child  … 
现在选择的是，除了最后一个列表元素以外的所有的列表元素 … 
 li:not(:last-child) {
}


03-01-伪元素 - 首行与首字

想要选择每个段落里的第一行文字，去应用点特点的样式 … 可以使用 ::first-line 这个伪元素选择器 …   选择第一行里的第一个文字，可以使用 ::first-letter 这个伪元素选择器 …  注意伪元素选择器的都是用两个冒号开头的 … 
测试
这里我们去选择这个文档里的每个段落的第一行 …  然后应用一个加粗文字的样式 … 
p::first-line {
    font-weight: bold;
} 
你会发现，段落里面只有第一行文字是加粗的 …   而且我们如果改变窗口大小 … 始终会把第一行文字加粗显示 … 
下面再去试试 ::first-leter  … 
p::first-letter {
    color: #0E90D2;
    font-size: 30px;
    float: left;
    letter-spacing: 5px;
} 
文档里面，只有段落里的第一行里面的第一个字符应用了我们设计的样式 … 


03-02-伪元素 - 之前与之后

::before 这个伪元素可以选择元素的之前，你可以在元素之前添加点内容  …  修改它的样式 …    跟它对应的还有一个 ::after 伪元素 …  它做的事就是选择元素之后的部分 … 同样我们可以添加点内容 … 还有其它的样式 … 
比如我们要选择文档里面的这个大标题一 …  在它之前先添加点东西  …  先用 content 属性，把内容添加到一组引号里面 …   再加点其它的样式 … 
h1::before {
    content: ‘before ';
    font-size: 15px;
    color: #666;
} 
在文档里大标题的前面，你会看到添加的内容，还有应用在上面的样式 　…. 
再试一下 ::after …  同样在大标题一的后面加点东西 … 
h1::after {
    content: ' after';
    font-size: 15px;
    color: #666;
}
在大标题一的后面，会出现添加的内容和样式 …


04-01-组合 - 后裔

用空格分隔开不同的选择器，这种形式是组合类型的选择器 …  它表示选择前面选择器的指定的后裔元素 …  比如这个选择器 div img  … 它表示选择 div 元素里的，图像类型的后裔 …. 
这个图像元素可以是 div 元素的子元素，孙子元素，曾孙子元素 …  只要它是 div 元素的后裔就会被选择 …  如果只想选择孙子和孙子以后的元素 …   也就是不包含子元素的后裔 ..   在选择器里可以加上一个 * 号 .. 
测试
下面我们去选择在 .container 类的 <div> 元素里面的图像后裔 …  
div.container img {
} 
现在会选择所有的在 .container 类里面的图像类型的后裔元素 …  包括子元素，孙子元素等等 … 
如果我们不想选择图像类型的子元素 ..  在这个选择器里， .container 和 img 之间 .. 加上一个 * 号 … 
div.container * img {
}  
因为上面这个小头像直接在 .container 类的元素的下面，也就是它是 .container 类的子元素 .. 所以不会选择它 .. 只会选择子元素以后的图像类型的元素 …


04-02-组合 - 儿子

如果我们只想选择元素直接的子元素，也就是不包含元素的其它的后裔 .. 比如孙子元素，曾孙子元素等等 …   在选择器里，可以使用 > 号来表示 … 
比如这个选择器 …   div > img  …    它只会选择在 div 元素里的，图像类型的儿子元素 .. 
测试 … 
div.container img  …  这个选择器可以选择 .container 类下面的所有的图像类型的后裔 …   如果只想选择它的图像类型的儿子 …..   在这个选择器 …  加上一个大于号 ..  把它放在 .container 和 img 之间  … 
div.container > img {
}
你会看到，只会选择页面上的这个头像图像  … 因为只有它是 .container 的直接的图像类型的儿子元素…


04-03-组合 - 兄弟

我们可以选择元素的下一个邻近的兄弟元素 … 或者元素后面的兄弟元素 …  不邻近也可以 …    在选择器里，使用 + 号 … 表示选择+号前面的这个元素的下一个邻近的兄弟  …   这个兄弟的类型在 + 号后面去定义  ..  
选择元素后面的兄弟元素，可以使用 ~  …    ~ 号后面的元素只要是 ~ 号前面元素的往下的兄弟都会被选择 .. 
测试
在这个文档里 ..   h1,h2,h3 都是兄弟元素 … 选中 h1 元素邻近的下一个兄弟元素 h2 ..  可以这样  … 
h1 + h2 {
}
下面我们再去选择 h2 元素后面的 h3 这个兄弟元素 …  如果使用 h2 + h3 {}  … 不会选择这个标题三元素 … 因为 h3 不是 h2 元素的下一个邻近的兄弟  .. 因为它们之间还有其它的兄弟元素 .. 也就是 p 元素和 blockquote 元素 … 
我们可以把 + 号 … 换成 ~  … 
h2 ~ h3{
} 
这样我们就可以选择 h2 元素的后面的 h3 这个兄弟元素了 …


