00-00-课程介绍

jQuery 是一个 JavaScript 的类库，它里面定义了很多实用的方法，使用这些方法，我们可以很方便的去选择页面上的元素，jQuery 支持使用类似 CSS 选择器的方法来选择元素，比如选择页面上包含某个特定属性的元素，拥有某个类或者 ID 的元素，选择奇数位置上的元素，或者偶数位置上的元素 ...   
选择了这些东西以后，我们可以使用其它的方法去处理它们。
比如可以为所选择的每一个项目都设置一个属性 ... 可以给它们添加一个统一的 CSS 类，可以为他们添加一个包装元素等等。
在这个课程里，我们还会去学一下使用 jQuery 去处理事件 ...   比如鼠标相关的事件，表单相关的事件，还有按键相关的事件。
最后我们再去看一下 jQuery 里的动画效果的使用。


00-01-准备工作

在我们的应用项目里想要使用 jQuery，我们需要先去下载它 。先打开到 jQuery 的官方网站  … jquery.com  …   点击页面上的 Download jQuery 下载 jQuery ..  打开下载页面以后 …. 在这里，我们可以选择要下载的 jQuery 的版本 .. 
jQuery 1.x 目前最新的是 1.10.2  … 1.x 版本的 jQuery 有更好的兼容性 … 它支持老版的 IE 浏览器 ..   像 IE 6，IE 7 还有 IE 8 ..
如果你不在乎这些浏览器，可以使用 jQuery 2.x ..  这个版本的 jQuery 体积更小一些 …  
每个版本的 jQuery 都有一个适用在正式的网站或应用里使用的生产版本 … 这种版本是压缩之后的 jQuery … 体积更小一些 …  所以它载入的时候会更快 …  
还有一种是没有压缩过的 jQuery ..   如果你想读一下它的代码 … 可以下载这种没压缩之后的 jQuery  … 
CDN
如果你不想把 jQuery 放在自己的服务器上，可以使用放在 CDN 上的 jQuery … 
这样，不需要下载 jQuery …  直接把这行代码放在我们的应用里就行了 ..   使用在 CDN 上的 jQuery 的好处就是，可以节省点我们自己的服务器的带宽 …  
如果用户之前访问的网站里面，使用了同一个 CDN 上的 jQuery …  这样他在访问你的网站的时候，它的浏览器可能就不需要去到 CDN 上下载 jQuery … 因为这个 jQuery 已经在浏览器的缓存里面了 .. 
要注意的是，如果使用 CDN 上的 jQuery … 要确定可以连接互联网才能使用 …  
除了 jQuery 提供的 CDN … 你也可以选择 Google CDN 上的 jQuery … 或者 微软 CDN 上的 jQuery … 
下载
下面我们去下载 1.x 的适用生产环境使用的 jQuery … 
点击这个 Download the compressed, production jQuery 1.10.2 ..
点击右键 …  选择 存储为 ..    把它放在我们的网页项目所在的目录里面 … 
再用文本编辑软件打开网页项目所在的目录  …  
新建一个网页 …  !
在页面结束的 body 标签的上面 … 可以用 script 去嵌入 jquery …  相对于这个文档来说，jQuery 是在上一级目录里的 js 这个目录的下面 ... 
这样，在这个页面上，我们就可以使用 jQuery 了 … 
如果页面嵌入的其它的脚本文件，需要用到 jQuery ，我们需要把这些脚本文件放在这个 jQuery 的下面。


00-02-当页面载入以后

在 JavaScript 的课程里，我们介绍了 window 对象的 load 事件 … 网页上所有的资源都准备好以后会触发这个事件 …. 使用它的 onload 事件处理程序，我们可以在这个 load 事件发生以后，再去执行一些 JavaScript 代码  … 这样能保证执行的代码可以正常的工作 .. 
不过 load 事件只有在所有的资源都准备好的时候才会发生 ..  包括页面上所有的图片 …   jQuery 提供了一个更方便的方法 … 使用 ready 事件 … 这个事件在页面结构准备好以后就会被触发 …  不需要去等待所有的图片完全都显示 … 
如果在 ready 事件指定的函数运行的时候，需要用到样式表 … 我们可以把样式表放在代码的上面去载入...  
打开这个网页链接的脚本文件 ..   script.js ...   然后…  输入
$(document).ready() 
document 表示文档这个对象 …  就是代表网页本身的那个对象 …  加上一个点 … 调用 ready() 这个方法 …   
这里这个 $ 符号就是 jQuery 函数 … 
在这个 ready  方法里面，可以去指定一个在文档准备好以后才会运行的函数  … 这样可以保证在函数里的代码可以安全的执行  ..  因为如果说文档还没准备好，就去执行代码  … 这样很可能会失败  .. 
$(document).ready(function () {
    console.log( '准备好了！' );
}); 
另一种写法
另外还有一种更简单的方法，可以实现在文档载入以后立即执行 …    可以在 jQuery 函数里面使用一个匿名函数 … 这个匿名函数在页面载入以后会立即去执行  ，像这样 …   $(function() { console.log( '准备好了' ); });  
这两段代码的效果是一样的。


00-03-jQuery 函数

jQuery 在全局范围里面只定义两个东西 …  jQuery() 函数 .. 还有它的另一种简单的名字 .. 就是一个 $() 符号  …   它俩的功能是一样的 ..  我们一般会使用 $()  这个名字…  因为这个名字简单一些，可以少敲几个字符...
这个函数有几种使用的方法 …   首先我们可以给它一个选择器 …   选择器可以选择页面上的元素 …  jQuery 支持大部分的 CSS3 的选择器 … 所以可以用很灵活的方法去选择页面上的元素 … 
而且 jQuery 也会处理浏览器的兼容问题 … 在不支持 CSS3 选择器的浏览器上，也可以使用 CSS3 的选择器来选择元素 … 
比如这行代码  … jQuery( '.list-group li' )
它可以选中页面上在 .list-group 这个类下面的所有的 li 元素 …   同样，我们也可以使用，用这个 $() 符号表示的 jQuery 函数  …  $( '.list-group li' )
jQuery 函数返回的这个查询到的结果是一个 jQuery 的对象 …   jQuery 为这个对象提供了大量的实用的方法 … 你可以用这些方法去处理选择的结果，或者叫返回来的这个 jQuery 对象 …  
你可以改变结果里面的每一个项目的属性，项目里的内容 … 可以给它们添加事件处理等等 … 
第二种
第二种使用 $() 函数的方法就是给它一个对象的名字 .. 比如 document 对象 … windows 对象  …  jQuery 会把这些对象转换成 jQuery 的对象 … 这样我们就可以使用 jQuery 的方法去处理这个对象了 …  
第三种
第三种使用 $() 函数的方法是可以给这个函数一些文本内容，注意这个文本内容里一定要包含至少一个 html 标签   … 不然 jQuery 会把没有 html 标签的文本内容当成是选择器来处理  …  
jQuery 同样会把这些文本内容转换成 jQuery 对象，然后我们可以用 jQuery 提供的方法去处理这个文本对象 …  比如可以把它插入到文档里的某个位置上 ..


00-04-jQuery 方法

用 jQuery 函数返回的是 jQuery 对象，jQuery 为 jQuery 对象提供了一些方法 … 使用这些方法可以去处理这个 jQuery 对象 …   有些 jQuery 方法，会同时拥有设置和获取的功能。
比如 attr 这个方法，它可以去设置元素的属性 …  比如为对象里的每一个项目都添加一个alt 属性 … 并且指定统一的 alt 属性的值  . …  
同时 attr 这个方法也可以去获取项目里的属性的值。
为 attr 方法同时指定属性，还有属性值的时候，它的功能就是去设置属性。
如果只为它指定一个属性 … 这个 attr() 方法的功能就变成了，去获取到这个指定的属性的值  … 
要注意的是，在方法是获取功能的时候 … 一般只会获取到选择结果里面的第一个项目的值  … 并不是所有的项目的值  …. 
链子式的调用
要处理页面上的东西，先要去选择要处理的东西 …  这样 jQuery 会返回一个 jQuery 对象，然后去调用这个对象的方法去处理它 … 这些方法一般会处理对象里的每一个项目 … 然后再返回这个 jQuery 对象 … 
这样我们就可以继续去调用这个对象的其它的方法去处理它 … 
这种调用的形式就是 jQuery 著名的链式调用 …


01-01-选择器

jQuery 提供了很多可以选择页面上元素的方法 … 用起来也很方便  …  
在 JavaScript 的课程里，我们介绍过使用 getElementsByName … 按照标签的名字去选择元素 …  还有 getElementById … 使用元素上的 id 来选择它们 …  
jQuery 的选择元素的方法更像是 querySelector 和 querySelectorALL ...  
它可以让我们使用类似 CSS 选择器的方试来选择元素 .. 
比如想要按标签选择 ..  可以直接在 $ 后面的括号里输入标签的名称  …  想按元素上的类来选择，在这里可以直接输入类的名称 …  同样，我们也可以按照元素上的 ID 来选择 …  
或者可以使用其它的更复杂的选择器 .... 
jQuery 支持我们使用 CSS3 的选择器来选择页面上的元素 ...   如果你想了解更多的关于 CSS3 的选择器，可以参考一下宁皓网的 CSS3 选择器这个课程。


01-02-基本的选择器

这个视频我们去试一下 jQuery 里的基本的选择器。  …     这个文档的开始是一组 header 标签  … 上面有一个 header id  … 还有一个 page-header 的类 … 
它的里面是一个 h1 标签，还有一个 h5 标签  … 
另外，页面上还有一组无序列表  … 列表里的项目是图像  …  
下面我们可以直接在控制台上去测试一下 jQuery 的选择器 … 控制台会直接给我们返回选择的结果  … 
先试一下按元素的标签名称来选择元素 … 
$( ‘header' )
它可以找到页面上的 header 标签元素 …    因为这个标签上定义了 id ，我们也可以使用这个 id 来选择这个元素 …
$( ‘#header' ) 
输入一个 # 号 … 后面是 id 的名称  …  跟在 CSS 样式表里的写法是一样的  … 
同样会返回这个元素 … 
再试一下用类来选择 …   $( ‘.page-header' )
类名的前面加上一个 . 
返回的还是一样的元素  …  因为这个页面上只有一个元素上面有这个 page-header 类 .
想要选择这个元素里面包含的 h1 标签  … 可以这样 …  .page-header 这个类下面的 h1 元素 … 
$( '.page-header h1' )
找到的就是在这个类下面的 h1  元素 … 
再试一下其它的其它的标签 　… 
$( ‘img’ )
找到所有的 img 标签元素  …    选择了元素我们可以对它们做一些事情  …  比如可以看一下选择的结果的数量  … 
可以去访问选择的结果这个 jQuery 对象的 length 属性 …   $( 'img' ).length
显示页面上一共有 12 个 img 元素 …    这个 length 是数组对象的标准属性 …  我们也可以使用 jQuery 的 size() 方法，获取到对象里的项目数 … 
下面，可以给它们添加一个统一的 css 类 …   $( 'img' ).addClass( ‘img-circle' )
.img-circle 这个类里面的样式来自 bootstrap …  它会把图像变成圆形的 …


01-03-选择器里的过滤

我们可以对选择的结果做一点基本的过滤 …  比如我们只想选择第一个 img 元素 … 再给它添加一个 css 类  … 可以这样 … 
$( 'img:first’').addClass( 'img-circle');
在选择器的后面，加上一个冒号 … 后面再加上一个 first  …  first 就是第一的意思  …. 这里就表示，找到页面上的第一个 img 元素 … 
你会看到，页面上只有第一个图像是圆形的 …    Command + R  ...  选中最后一个 … 可以把 first 换成 last …   last 是最后一个的意思 … 
$( 'img:last').addClass( 'img-circle'); 
现在，页面上只有最后一个图像也是圆形的  … 
:odd 与 :even
使用 odd 和 even ， 可以选择结果里面的奇数项目或者偶数项目 … 
先按一下 command + R   …  windows 用户可以使用 ctrl + R …   刷新一下页面 … 这样可以彻底请除掉在控制台上输入的东西 … 
$( ’img:odd‘ ).addClass( ‘img-circle‘);  
在选择器里加上  :odd  … 可以选择结果里面的奇数项 … 
不过我们要注意的是，结果里面排第一个的是 0 ，不是 1  …   0 是一个偶数 … 所以，在页面上，是从第二个图像开始变成圆形的 …
因为第二个图像在结果的索引里面，它的索引号是 1 …  1 是一个奇数 …
刷新一下 ….  再试试 even … 
$( ‘img:even’ ).addClass( ‘img-circle’ );  
现在，所有索引号是偶数的项目会变成圆的 … 
:eq , :lt, :gt
使用 :eq 可以指定具体的结果 … eq 应该是 equal 的缩写 … 意思是等于  …  比如我们想让页面上第二个图像变成圆的 … 可以这样 
$( ‘img:eq( 1 )’ ).addClass( ‘img-circle’ );  
eq 的后面加上一个括号 … 括号里可以指定具体的索引号  …  索引是从零开始的 … 所以页面上的第二个图像的索引号是 1  … 
:lt 可以指定小于某个索引号的结果  ..  lt 是 less than 的缩写 .. 意思就是 小于  ….   跟它对应的还有 :gt  …. Greater than … 表示大于 … 
$( 'img:lt( 3 )' ).addClass( 'img-circle' );
这个选择器会选择小于 3 这个索引号的结果  …  也就是 0，1，2  这几个项目  … 
再试一下 :gt  … 大于指定索引号的结果  … 
$( 'img:gt( 5 )' ).addClass( 'img-circle' ); 
选择大于 5 这个索引号的结果  …     页面上从第7个图像开始之后的所有的图像会变成圆形  …


01-04-选择器里使用元素的属性

元素的属性也可以用在选择器里面 …   你可以选择带某些特定属性的元素 … 或者属性有具体的值，或者值里包含某些特定的文字 …  
在这个页面上， 我在包围图像的 li 标签上添加了一个 data-album  属性 … 这个属性其实是我自己造的 … 在 HTML5 的规范里，支持我们在元素上添加用 data 开头的自定义的属性 ..
这里我用 data-album 属性表示音乐专辑 …  如果专辑里面只有一首音乐，这样我们把它的值设置成 single .. 表示这是一个单曲 …  如果专辑里面有多首音乐的话 …  data-album 属性的值我设置成了 multiple …
下面我们在控制台上试一下使用元素属性选择元素  …
测试
先试一下只使用属性的名称来选择元素 … 在方括号里，可以输入属性的名称  …   $( '[data-album]' )
找到的结果就是所有包含 data-album 属性的元素 …  
在属性的前面，也可以加上其它的选择元素的方法 … 比如，加上标签的名字 … 
     $( 'li[data-album]' ) 
这样找到的就是在 li 元素里面包含 data-album 属性的元素 …   我们也可以给属性指定具体的值 … 
比如找到所有 data-album 属性的值是 single 的 li 元素下面的 img 元素 …    $( 'li[data-album="single"] > img' ).addClass( 'img-circle' ) 
这里我用了一个大于号 ..   它表示元素的直接的子元素 … 
然后用了一个等号设置属性的值  …  表示属性的具体的值 …   再为找到的结果添加了一个 img-circle 的类 … 
在等号前面可以加上一个 ! 号，表示不是这个值 … 
     $( 'li[data-album!="single"] > img' ).addClass( 'img-thumbnail' ) 
现在找到出来的结果就是  data-album 属性的值不是 single 的所有的 li 元素下面的 img 元素  …   为找到的结果添加一个 img-thumbnail 的类 .. 
包含值 *， ~
使用单独的一个等号表示包含的具体的值，也就是所选择的元素里面的这个属性的值里不能包含其它的东西 … 
回到网页的代码  … 在第一个列表项目的 data-album 属性里加上点其它的东西 … 除了 single ，加上一个空格 … 然后是这个专辑的名字 … 
（#控制台）
使用同样代码  … 现在，就不能选中刚才添加了专辑名称在 data-album 属性里的那个元素了. .. 
这种情况，我们可以使用 * 号等于，或者 ~ 号等于 …  这两个符号表示包含某个值  … 
区别是，~ 号等于只会包含用空格分隔开的值  …   * 号等于不在乎有没有空格，只要属性的值里包含设置的字符就可以 .. 
刷新一下 …   
在等号前面加上一个 ~  … 
这样会选择上 data-album 属性里有用空格分隔开的 single 值的元素了 … 
值的位置 $ ，^ 
另外，我们还可以指定设置的属性的值出现的位置 . ..    ^= 表示属性的值是以设置的字符开始的 …  $=，表示属性的值是以设置的字符结束的  …


01-05-选择表单元素

使用 jQuery 可以很容易选择文档里的表单元素，可以选择不同类型的表单元素，或者处于不同状态的表单元素 …  
比如，我想找出这个页面上所有的 input 元素 …  
$( ‘:input’ )
跟表单相关的选择器，都有一个冒号 …  :input 表示找到所有 input 类型的元素 … 
注意这里使用 button 标签的按钮也被看成是 input 类型的元素 …  如果想单独选中按钮元素 … 可以使用 :button … 
$( ‘:button’ )
找到结果就是页面上的 重置 按钮，还有 注册 按钮  …
如果只想找到提交类型的按钮 … 可以使用 :submit  .. .  $( ’:submit' )
想选择重置按钮，可以用 :reset  … $( ‘:reset' )
选择不同的类型的表单元素，一般就是使用冒号加上元素的名称 … 或者元素类型的名称   … 
比如找到 密码 类型的 input 元素 …   $( ‘:password’ )   
文件类型的 input  .. 是 :file  …  $( ‘:file’ )
选择页面上的复选框 … 是 :checkbox  …   $( ‘checkbox’ )
单选按钮是  :radio … $( ‘:radio' )
如果想要选择被勾选的单选按钮或者复选框 ，用到的是 :checked … 
先选中这个复选框（#记住）
然后输入 $( ‘:checked’ )   … 会选择这个被勾选的 记住 这个复选框  … 还有 企业用户 这个单选按钮 … 
状态
另外我们还有一些根据表单元素的状态来选择的选择器 …  比如  :focus   … 会选择处在焦点状态的 input 元素 … 
:disabled  … 选择的是被禁用的表单元素 …  :enabled …  选择是启用的表单元素 ..


01-06-子元素选择器 - :first-child, :last-child

选择元素里面的第一个子元素，可以使用 :first-child  …  它跟之前我们介绍的 :first 选择器有些区别 …  first 的意思是找到第一个结果 … 而 :first-child 选择的是第一个子元素 … 也就是说它可能会找到多个结果 …   
比如我们找出作为第一个子元素的 img 元素 … 
$( 'img:first-child' )
找到的结果就是所有作为第一个子元素的 img 元素 …   包括这个小的头像图像 …   我们可以看一下源代码  …
这个小头像图像是在 h6 标签的下面 …  相对于它的父元素 h6 ，这个小头像属于它的第一个子元素 …  所以找到的结果里面也会包含它 …
不过如果我们把这个头像直接移到 li 标签的下面 .. 
现在这个 li 标签里面有两个 img 元素 …  它的第一个 img 类型的子元素是这个小头像的上面这个 img 元素 … 
保存 …
刷新 … 再去试一下 … $( 'img:first-child' )
返回的结果里面，就不会包含这个小头像了 … 因为现在它不属于第一个子元素 … 
下面我们再试一下 :last-child ..
$( 'img:last-child' )
这次返回的结果里面，只有这个小头像图像 … 因为在所有的 img 元素里面，只有它属于它的父元素里的最后一个子元素 …


01-07-子元素选择器 - :nth-child

:nth-child 允许我们指定选择第几个子元素 …   比如我们要选择页面上 ul 元素里的第一个 li 元素 .. 
$( 'ul li:nth-child(1)' ).addClass( 'shadow' ) 
注意这个 :nth-child 是从 1 开始的 … 也就是第一个子元素的索引号是1，这跟我们前面介绍的 eq() 不太一样  … eq() 是从 0 开始的 .. 
找到 ul 里面的第一个 li 子元素  …  再给它添加一个 shadow 类 … 
在 :nth-child 里可以指定子元素所在位置的关键词 … 比如可以使用 odd 或者 even … 选择奇数位置的子元素 … 或者偶数位置的子元素 … 
（#刷新）
$( 'ul li:nth-child(odd)' ).addClass( 'shadow' ) 
:nth-child 从1开始计算 … 所以，1，3，5，7， 这几个子元素被选择了 … 
（#刷新）
最试一下 even … 
$( 'ul li:nth-child(even)' ).addClass( 'shadow' )
这次选择的是ul元素里的 2，4，6，8，这几个位置上的 li 类型的子元素 … 
:nth-child 还支持选择自己定义的成倍数位置上的子元素 … 
比如我们要选择第 4 ，还有第 8 个 li 元素  …
$( 'ul li:nth-child(4n)' ).addClass( 'shadow' )
选择的子元素就是，从1数到 4 ，第4个子元素 …   然后在从第4个子元素往后再数4个数 … 
如果你想反过来做的话，可以把 :nth-child … 换成 :nth-last-child … 
$( 'ul li:nth-last-child(4n)' ).addClass( 'shadow' )
这样就会倒着往回数 …


01-08-内容过滤

:contains 这个选择器可以找到包含指定文字内容的元素 …  比如我们想要选择带 Viva 这个词的 li 元素 …  
$( 'li:contains("Viva")' )
在 :contains 后面的括号里输入要包含的文字 …  这里就是 li 元素里面包含的文字  …  注意文字的大小写 …  还有文字是字符串形式 … 所以我们需要在文字周围添加一组引号  … 这里也要注意引号的类型 …  如果外面我们用了单引号 … 那这里就需要使用双引号 … 不然会报错 … 
这里选择中了页面上两个 li 元素 ....    它们里面都包含 Viva 这个文字内容  …


01-09-过滤的方法

jQuery 里面提供了一些方法，可以对选择的结果进一步去过滤 …  这此方法里面，有些跟之前介绍的选择器的效果差不多 ..  下面，我们去试一些这些方法 … 
先去找到页面上的 li 元素里面的 img 元素 …  $( ‘li img’ )
选择出来的结果就是页面上的 li 元素下面的 img 元素 … 
下面我们可以去过滤一下这个结果  …   使用 eq() 方法，可以过滤出在指定位置上的结果  …   比如 eq(1) ..   这样只会选择结果里面排在第二这个位置上的结果  … 因为这个位置是从零开始算起的 .. 
在过滤出来的这个结果上，我们可以加上一个 CSS 类。 img-circle 的类 …  
$( 'li img' ).eq(1).addClass( 'img-circle' )
这个位置号，或者叫索引号，也可以是负数 … 
我们可以试一下  -1 …  这样，会过滤出倒数第一个结果 … 
$( 'li img' ).eq(-1).addClass( 'img-circle' )
.first() 和 .last() 
.first() 和 .last() 可以找到结果里的第一个，和最后一个结果 …
先看一下 .first() … 这两个方法都不支持参数 .. 所以，直接在它们的后面输入一个括号就行了 … 
$( 'li img' ).first().addClass( 'img-circle' )
.first() 找到的是选择的结果里面的第一个结果  …   再试一下 .last() …
$( 'li img' ).last().addClass( 'img-circle' )
.last() 选择的是结果里面的最后一个 ..  .
.slice()
选择结果里的某个范围，可以使用 .slice() 方法 … 比如我们想要的是页面上第7个图像到第12个图像 … 
$( 'li img' ).slice(6, 12).addClass( 'img-circle' )
.slice() 这个方法里有两个参数 … 第一个参数是开始的值 …  第二个参数是结束的值  … 


01-10-使用文档树形结构里的关系过滤

选择元素以后，可以使用 jQuery 提供的方法利用元素在文档结构里的关系进行选择 …  比如找出它的子元素，父元素，或者得上一个和下一个兄弟 …  这些方法里可以使用选择器作为它参数 …  这样我们就有可能找到元素的指定类型的子元素，或者父元素 … 
下面我们去试一下这些方法 … 
$( '#christmas' )
可以先选择拥有christmas 这个 ID 的元素 .. 也就是这个 li 元素 … 
找出这个元素里的子元素 … 用的是 .children() 这个方法 …
$( '#christmas' ).children()
它的子元素是一个 img 元素.. 还有一个 h6 元素 … 如果我们只关心里面的 h6 元素 …  可以给 children() 方法传递一个选择器 …
$( '#christmas' ).children( 'h6' )
结果就是它的 h6 类型的子元素 …    我们也可以定位元素的父元素 …   用的是 parent() 这个方法
$( '#christmas' ).children( 'h6' ).parent();
h6 元素的父元素是这个 li 元素 …  另外还有一个 parents() 方法 … 可以选择出所有的父元素 … 
想去定位 Christmas 的下一个兄弟 ..  可以使用 .next()
$( '#christmas' ).next()
找到它的上一个兄弟，用的是 .prev() 这个方法 
$( '#christmas' ).prev()
选择它的所有的兄弟，可以调用 .siblings() … 
为了更清楚一点，我们给它的兄弟们都添加个边框的样式 … 
$( '#christmas' ).siblings().addClass( 'border' )
除了 christmas 以外，它的兄弟们都有这个边框的样式 … 
.nextAll() 可以只选择它后面的所有的兄弟 …   
（#刷新） 
$( '#christmas' ).nextAll().addClass( 'border' )
还有个 .prevAll() 方法，可以选择在它前面的所有的兄弟 .. 
$( '#christmas' ).prevAll().addClass( 'border' )


02-01-操纵元素的属性

给找到的结果里的元素设置几个属性，或者获取到结果里面的第一个元素的某个指定的属性的值 … 可以使用 .attr() 这个方法 …  attr 应该就是英文 attribute 的简称 … 就是属性  … 想要移除属性，可以使用 .removeAttr() … 
元素里面像是 img 元素的 alt 属性，title 属性 ..  这些在源码里能查看的东西，就是元素的 Attributes  … 这些东西都可以使用 .attr() 这个方法去获取或者去设置 … 
另外，元素还有一些属性一般情况下是看不见的 …   使用 Chrome 浏览器的开发者工具可以查看这些属性  … 
比如我们选中页面上这个图像 …   然后打开 Properties 这个选项卡 … 
在这里面，你看到的都是 img 这个元素的 Property  …     比如元素 节点类型，节点名称，偏移的高度，宽度等等   … 
想要设置它们或者得到它们的值 …  用的是 .prop() 方法 ..  移除这些属性，用的是 .removeProp()  …


02-02-设置与移除元素属性的方法

下面我们先看一下 .attr() 这个方法 …   打开控制台 ..   先选择页面这个 img 元素 …  
包装它的容器上有一个 parachutes  ID，用这个 ID 可以选择这个 img 元素 ..   然后使用它的 .attr() 这个方法 …   给这个元素添加一个 alt 属性 … 
这个方法里的第一个参数是要设置的属性的名称 …  中间是一个逗号 … 第二个参数是要设置的这个属性的值  … 
$( '#parachutes img' ).attr( 'alt', 'Parachutes' );
在返回的结果里面，你会发现，这个元素上多了一个 alt 属性。属性的值是 Parachutes …. 
注意在用 .attr() 设置属性的时候，它会去设置在选择的结果里面的每一个元素 … 也就是如果 #parachutes 这个元素下面有多个 img 元素的话 .. 那么上面这行代码把每一个 img 元素的 alt 属性，都设置成 Parachutes  … 
.attr() 可以设置属性，也可以获取元素属性的值  … 
$( '#parachutes img' ).attr( 'alt' );
为 .attr() 这个方法指定一个单独的属性参数 ..  这样可以获取到这个属性的值  …   在获取的时候，只会获取选择结果里面的第一个项目的属性的值  … 
如果想得到每一个结果里的属性的值，可以配合 .map() 或者 .each() 方法 … 
.removeAttr()
我们再去试试移除属性的方法 … 
$( '#parachutes img' ).removeAttr( 'alt' );
这里用的是 .removeAttr() 这个方法，在它里面指定要移除的属性的名称就行了  … 
再用上面的方法去获取这个元素的属性  … 
$( '#parachutes img' ).attr( 'alt' );
返回的结果是 undefined  … 只为这个属性已经用 .removeAttr() 给移除掉了 …


02-03-添加，移除，切换 CSS 类

为选择的元素添加 CSS 类，可以使用 .addClass() … 移动 CSS 类，用的是 .removeClass()  …  切换 CSS 类可以使用 .toggleClass()  .. 它的功能就是如果在元素上已经拥有了要切换的那个类，就会去掉它，如果没有，就加上它 … 
使用 .hasClass() 可以判断元素有没有指定的 CSS 类 .. 下面，我们去试一下这些方法 … 
测试
这个文档里有一张图像，它的父元素是一个拥有 atlas 这个 ID 的 div 标签 … 
先选择这个 img 元素 ..  $( '#atlas > img' )     再用 .addClass() 给它添加一个 css 类 …   要添加的类的名称是 img-circle …  这个类的样式已经在样式表里定义好了... 它可以把图像变成圆形的 .. 
$( '#atlas > img' ).addClass( 'img-circle' )
再去判断一下元素是否有指定的类 …  用的是 .hasClass() 这个方法 ...   它的参数就是要判断的那个类的名称 ... 
$( '#atlas > img' ).hasClass( 'img-cricle' )
.hasClass() …  这个方法返回的值是布尔值，如果元素包含指定的类，会返回真，也就是 true  … 如果不包含的话 .. 会返回 false  … 
移除元素上指定的类，用的是 .removeClass() ... 在括号里，给它指定一个要移除的类的名称 ... 
$( '#atlas > img' ).removeClass( 'img-circle' )
移除以后，再用 .hasClass 去测试一下 …
$( '#atlas > img' ).hasClass( 'img-cricle' )
这次返回的结果是 false … 因为元素已经没有 img-cricle 这个类了  … 
.toogleClass()
下面我们再去试一下 .toogleClass() 这个方法 …   为了试一下这个方法， 我们可以给选择的元素绑定一个 click 事件 … 
$( '#atlas > img' ).click(function() { $( this ).toggleClass( 'img-circle' ); });
在 .click() 这个方法里，添加一个函数  …  这个函数要做的就是为当前这个对象， 这里的  this 这个关键词，表示当前这个对象 …  在这里表示的就是这个被点击的图像 …  
使用一个 .toogleClass() 方法  … 为这个图像添加一个切换的 .img-circle  类  … 
在后面介绍事件的视频里，我们会去详细的介绍事件的使用  … 
点击图像  … 会为图像添加一个 .img-circle 类 .. . 所以图像会变成圆形的 ….  再点一下这个图像 …  再去掉 .img-circle 类 …


02-04-元素的宽度和高度属性

jQuery 里的一些方法可以获取或者去设置 CSS 属性 ..    widh() 可以查看或者设置元素的宽度 … height() 可以查看设置元素的高度 …  还有 outerWidth ，outerHeight …  outer 类型的宽度和高度包含元素的宽度和高度还有内边距，外边距，再加上边框 … 
另外还有 innerWidth ，和 innerHeight  …  内部的宽度和高度 …  也就是元素本身再加上它的内边距 … 不包含边框和外边距 … 
这里我们使用 CSS 设置了 .album 类的元素的宽度为 300 像素，内部有一个 5 像素的边距，四调有一个 1 像素的边框 … 打开开发者工具 .. 
Elements 选项卡 …  选中这个 .album 类的元素 …  然后在右边窗口里，选择 Computed …   这里有个图示，可以查看这个元素里面的宽度，内边距，外边距，还有边框的宽度 … 
打开控制台，我们可以使用一些方法去查看或者设置一下 .album 元素的一些 css 属性 … 
看试一下 width() 方法 …   选中这个 .album 元素 …  调用 .width() 方法 ..  不在方法里指定值，这个方法就会去获取元素的宽度值 … 
$( '.album' ).width()
返回的结果是 288 ..   也就是元素的宽度  …  加上左右各 5 像素的内边距，2个像素的边框 ..   
再试一下 innerWidth() … 
$( '.album' ).innerWidth()
结果是 298  …   也就是元素的宽度，加上内边距 …  元素是 288 像素宽 … 加上 10 个像素的内边距 ..  结果就是 298 .. 
还有一个 outerWidth  …  
$( '.album' ).outerWidth()
结果是 300  …   这个宽度是元素的宽度加上内边距的宽度，边框，还有外边距的宽度 … 
这些方法在不指定参数值的时候，都是去获取找到的结果里面的第一个元素的宽度或者高度 … 如果在方法里加上一个参数值 …  它们的功能就变成了去设置元素的宽度和高度 … 
比如我们要设置一个 .album 元素的 outerWidth  ..  设置成 350 … 
$( '.album' ).outerWidth( '350' )
现在，它的宽度现在就会变成 350 px ，在返回的结果里面你会发现，在元素上应用了一个 style 属性 … 里面用 width 属性设置了宽度值  … 
.height()
下面我们再试试跟高度相关的方法 … 先试一下 .height()  … 
$( '.album' ).height();
结果是 288  … 这是元素本身的高度 ..   再试试 .innerHeight()  ..  也就是加上内边距的高度  … 
$( '.album' ).innerHeight();
结果是 298 …   最后还有一个 .outerHeight()
$( '.album' ).outerHeight();
加上元素本身的高度，还有内边距和边框还有外边距 …   整体的高度是 300 像素  …


02-05-设置 CSS 属性

使用 .css() 方法可以更灵活的去获取或者设置 css 属性，方法里面只用属性名称，它的功能就是获取选择结果里所有元素的属性值 …   如果再给属性指定一个具体的值，这样它的功能就变成了设置选择结果里第一个元素的属性和值。
下面，我们来看一下这个方法 …  
先选中页面上这个元素 … 它上面有一个 .album 类 ..   然后使用 .css() 方法去查看这个元素的 width 属性的值  … 
$( '.album' ).css( 'width' )
结果是 300px  … 注意返回的结果是带单位的 …   这个宽度的单位是 px ，像素  … 
再用这个 .css() 方法去设置一下这个元素的宽度  …   设置成 350 像素  …   这个属性值可以不需要使用单位 .. 
$( '.album' ).css( 'width', ‘350' )
现在这个元素的宽度变成了 350 像素  … 这个宽度值相当于我们之前介绍的使用 outerWidth() 方法来设置的宽度 … 也就是宽度包含元素的宽度，加上内外边距还有边框 … 
它其实就是在这个元素上添加了一个 style 属性 … 然后把 width 这个属性的值设置成了 350px  … 
在设置属性值的时候，我们也可以这样做，比如想让这个元素的宽度再加上 20 像素  … 
属性的值这里，可以使用一个 += ，表示，在原来的基础上再加上 20 像素 …    另外也可以使用 -= ，表示在原来的基础上减少相应的值  … 
$( '.album' ).css( 'width', '+=20' )
现在，这个元素的宽度就会变成 350+20 ，也就是 370 像素  …   如果你想要使用更复杂的去计算这个属性的值，在这里可以使用一个函数 … 在函数里去计算这个值 … 
使用 .css 方法，可以同样设置多个属性 … 这样我们需要给它传递一个对象 ，在对象里，使用名值对的形式去设置属性，还有对应的值  .. 
（#刷新）
比如我们同时设置一下它的宽度 … 还有它的边框 …    把要设置的属性放在一组大括号里 ...  每一组属性之间，使用一个逗号分隔一下 ... 
$( '.album' ).css( {width: '370', border: '1px solid #000'} )
这行代码会把元素的宽度设置成 370 像素  … 边框设置城 1 像素的黑色实线 …


02-06-元素的偏移

想要获取或者设置元素在页面上的坐标，可以使用 .offset()  …    .offset() 方法得到或设置的是元素相对于文档的位置  … 
选择 .album 元素  …  调用它的 .offset() 方法 ..   返回的结果是一个对象  ..  里面有两个属性， top  … 和 left  …  top 是顶部位置 … ， left 是左边位置 .. 
$( '.album' ).offset();
意思就是，相当于这个文档来说，这个 .album 元素，从文档顶部到这个元素的顶部的距离是 xx  …   从文档的最左边到元素的最左边 … 距离是 xx  … 
使用 .offset() 我们也可以去设置元素的坐标 … 
$( '.album' ).offset({top: 380, left: 20});
用一个对象作为 .offset() 方法的参数 .. . 这个对象里有两个属性  ..  top 和 left  …  表示要设置的元素的顶部和左边的坐标值  …


02-07-元素的位置

使用 .position() 这个方法，可以去获取或者设置元素的位置，这个位置是相对于它的用来定位的父元素的位置  ..  
.position()
注意它和之前我们介绍的 offset() 不太一样 ...  offset() 方法可以获取元素相对于文档的位置。
下面我们可以查看一下两个方法的区别。
下面，我们先用 .offset() 方法看看这个元素相对于文档的坐标 ..
然后再用 .position() 方法查看一下 …
$( '.album' ).position();
结果同样是一个对象 … 这个坐标位置是相当于它的父元素的一个位置  … 也就是相对于这个灰色背景的 div 元素的位置 。


03-01-DOM - 包装

为选中结果添加添加一些包装元素，用的是 .wrap() 方法 …  包装结果里面的东西可以使用 .wrapInner()  …  .wrapAll() 可以给所有的结果一个单独的包装， 另外还有 .unwrap() 可以去掉包装元素  … 
下面我们去试一下它们  … 先看一下我们要处理的这个文档 ..    这里有一些拥有 album 类的 <div> 标签  …  它的里面是 img  图像，还有一个 h6 标题 .. 
比如我们想给 img 元素再添加一个包装元素 …  也就是这个包装元素是在 .album 类的元素的里面， img 这个元素的外面 … 
回到浏览器 … 打开控制台 … 先去选择页面上的 img 元素 …  它是在 .album 这个类的元素下面 …  调用它们的 .wrap() 方法 … 
去给它们添加一个包装 …  在方法里面可以指定包装的元素  .. 这里我们用一组 <div> 标签  …  在这个 <div> 标签上，我们可以再添加一个 class 属性 … 指定一个 css 类 … 
$( '.album img' ).wrap( '<div class="thumbnail"></div>' );
回车  …    现在页面上的图像元素上都 有一个边框 … 这是因为我们在图像外面添加了一组 div 元素的包装.. 在这个元素上有 thumbnail 类 .. 这个边框的样式就是在这个类里定义的 … 
打开开发者工具的 Elements 选项卡再去看看 … 
图像的外面，有一组带有 .thumbnail 类的 <div> … 
.wrapInner()
（#回到控制台）
使用 .wrapInner() 我们可以去包装选中的元素里面的东西 …  选刷新一下 …  这次我们选中 .alubm 类的元素 ..  去掉后面的 img 
包装的元素同样是一组带有 .thumbnail 类的 <div> 标签  … 
$( '.album' ).wrapInner( '<div class="thumbnail"></div>' );
这次你会发现，这个边框会应用到图像还有标题内容的上面  …      回到 Elements 选项卡 ..
这个包装元素，添加到了 .album 元素的里面 ...  包装的是 .album 类里的这个图像元素，还有标题元素 … 
.wrapAll()
下面，我们再给所有 .album 类的元素添加一个统一的包装 …  用的方法是 .wrapAll() … 
这个包装元素的类型同样是 div ，不过这里我们换一个 CSS 类 … 
$( '.album' ).wrapAll( '<div class="jumbotron"></div>' );
现在，页面这四个带有 .album 类的元素会统一被一个 div 标签包装 …     （#Elements）
这里你会看到，在它们周围，有一个共同的包装元素 …  
.unwrap()
移除元素的包装用的是 .unwrap() 方法 …  用这个方法我们先移除掉为所有的 .album 添加的那个统一的包装 … 
$( '.album' ).unwrap();
直接调用这个 unwrap() 方法，这个方法不支持参数 … 
要移除掉图像和标题的包装 …  可以先选中图像或者标题 … 再去调用 .unwrap() 方法 … 
$( '.album img' ).unwrap();
这样会去掉包装图像还有标题的元素 …


03-02-DOM - 内部追加

在找到的结果的前面或者后面追加新的内容，可以使用 .prepend()  …  或者 .append() …   我们也可以使用 .prependTo() 还有 .appendTo() ，把找到的结果追加到某个位置的前面或者后面 … 
下面我们还是通过几个简单的测试，去理解一下这几个方法 … 
比如我们要在页面这些图像的上方去追加一些内容 …  用的方法是 .prepend() … 
测试
先选中图像的父元素 … 就是这个带有 .album 类的 div .. 然后调用它的 .prepend() 方法 … 
$( '.album' ).prepend( '<h6>Coldplay</h6>' );
要追加的内容是一组标题，里面的内容是 Coldplay ….  
你会看到，会在选择的每个元素的上方去添加这个指定的内容 …    如果想在它的下方去添加内容，使用的方法是 .append() …  
先刷新一下 …   再把这个 prepend() 换成 append()
$( '.album' ).append( '<h6>Coldplay</h6>' );
现在这个标题会在 .album 元素里的最后这个位置 … 
.appendTo()
.appendTo() 可以把指定的内容，添加到指定的位置上 …   像这样 … 可以把前面指定的这个标题追加到 .album 元素里的最后面 … 
$( '<h6>Coldplay</h6>' ).appendTo( '.album' )
.prependTo()    
最后再试一下   .prependTo();
$( '<h6>Coldplay</h6>' ).prependTo( '.album' )
它可以把指定的内容追加到指定位置里的最前面 …


03-03-DOM - 外部追加

.before() 可以在选择的元素的上面，添加指定的内容 … after() 可以在选择的元素的下面，去添加指定的内容 …  也就是用 .before() 和 .after()  添加的内容跟选择的元素之间是兄弟的关系  …  
跟这两个方法类似的还有 .insertBefore() ..  和 .insetAfter()  …  不同的是，这两个方法是先设置要插入到某个地方的内容 …   然后在方法里指定内容要插入到的那个位置 …  
测试
比如我们可以先选中页面上所有的 h6 元素 …  然后再用 before() 和 after() 在它的上面或者下面去添加点内容 … 
$( '.album h6' ).after( '<h5>Coldplay</h5>' )
选中 h6 元素 .. 调用 .after() 方法，在它的后面添加点内容  … 添加的内容可以作为 .after() 方法里的参数 … 
现在， 每个 h6 元素的下面，都有一个 Coldplay 的标题  …   我们也可以把这个标题添加到 h6 标题的上面  … 
把 after 改成 before  …  
$( '.album h6' ).before( '<h5>Coldplay</h5>' )
添加的内容可以是具体的字符串 … 或者也可以是选择器 …  比如我们可以选中页面上的图像 .. 然后把 h6 元素放在图像的下面或者上面  … 
下面再去试试 .insertBefore() ..  还有 .insetAfter()  这两个方法 … 
先在 jQuery 函数里面，指定一个要插入到某个位置上的内容 ... 然后调用 insertBefore 方法 ... 在方法里，指定要插入的具体的位置 ... 
$( '<h5>Coldplay</h5>' ).insertBefore( '.album h6' );
最后再试一下 .insertAfter()  … 
$( '<h5>Coldplay</h5>' ).insertAfter( '.album h6' );
新添加的标题会插入到 h6 元素的下面 …


03-04-DOM - 移除

jQuery 提供了几个方法可以很容易去移除选择的页面上的元素 …    .empty() 可以清空所选元素里面的所有的子元素 …   .remove() 和 .detach() 可以移除整个所选择的元素 …  
这两个方法的功能是一样的，只不过有点小小的区别，就是用 .detach() 方法移除元素以后，可以保留附加在这些被移除的元素上的 jQuery 数据 …   比如绑定在元素上的事件 … 
测试
下面我们去试一下这些方法 ..   先试一下 .empty()  …   比如我们要清空 h6 元素里的东西 …  h6 元素里只有文本 …   文本在文档结构里也是一种节点类型 … 
$( '.album h6' ).empty();
选中所有的 h6 …  然后调用 .empty() 方法 …    现在它里面的文字已经不见了 …   打开 Elements 选项卡 …  
h6 这个元素仍然存在，不过它里面的文字已经不在了 …   想要完全移除元素，也可以使用 .remove() 或者 .detach()  … 
比如我们要从页面上移除所有的图像元素 … 
$( '.album img' ).remove();
现在图像已经不在页面上显示了 …   再到 Elements 里去看一下 … 
原来在 .album 类里面的 img 元素 … 都已经使用 .remove() 方法移除掉了 …


03-05-DOM - 替换

替换页面上的内容，可以使用  .replaceAll()  …    还有 replaceWith() …     
.replaceAll()  这个方法里的参数是要替换的内容的目标 …     也就是我们可以先设置一些内容 …  再使用 replaceAll() 这个方法 … 在这个方法里去指定内容要替换的目标 … 
.replaceWith() 这个方法里的参数是要替换的内容  … 或者用函数返回来的内容 …  先去选择要替换的地方  .. 再用 replaceWith()  方法指定要替换的内容 … 
测试
下面我们再去看一下这两个方法的使用 …  
比如我们要把页面上所有的 h6 这个标题元素替换成指定的内容  …   可以先选择所有的 h6 元素 …  使用 .replaceWith() 这个方法 .. 方法里面指定要替换成的内容 .. 
$( '.album h6' ).replaceWith( '<h5>Coldplay</h5>' )
现在，页面上所有的 h6 元素，都会使用一个 h5 元素替换掉 … 里面的内容是 Coldplay  … 
.replaceAll()
下面我们再用 .replaceAll() 这个方法去做同样的事  …   先指定内容 …   调用 .replaceAll() 方法 … 方法里面是要替换内容的目标  … 
$( '<h5>Coldplay</h5>' ).replaceAll( '.album h6' )
结果是一样的 .. 使用了一个带 Coldplay 文字的 h5 元素 … 替换掉了页面上的所有的 h6 元素 …


03-06-克隆

.clone()  可以创建选择结果里的每一个项目的复制品 …  这个方法可以深层次复制，元素里的子元素，还有文字都会被复制  … 
下面我们可以去把页面上这些专辑的封面，还有它下面的标题文字，也就是整个拥有 .album 类的元素，都复制一份 . 再放在它们上面的这个带有 .jumbotron 类的 <div> 元素里  … 
先选择所有 .album 类的元素 ..     然后调用 .clone() 方法 … 这样可以复制每一个 .album  元素 .. 再用一个 appendTo()  ..  把它们插入到 .jumbotron 这个类的元素上 … 
$( '.album' ).clone().appendTo( '.jumbotron' )
你会看到，下面这些内容都被复制了一份到这个有灰色背景的地方 …


04-01-事件

浏览器会根据一些行为动作触发对应的事件 .. 比如点击元素的时候，会触发 click 点击事件 …  提交表单的时候会触发 submit 提交事件 …  按下键盘上的按键也会触发相应的事件 … 
我们可以把事件绑定在元素上，然后在这个绑定的事件发生以后去做指定的事情 … 这个发生事件以后要做的事就是事件的处理程序，或者叫事件处理器 .. 英文是 event handler ..  
给元素绑定事件可以使用 .on() 这个方法 …   在里面可以指定要绑定的事件的名称 … 还有事件发生以后要做的事儿 …  使用 .on() 方法绑定事件很灵活 … 你可以绑定一个或者多个事件到指定的元素上 …  
另外 jQuery 提供了一些更简单的方法来处理事件 …  发生相应的事件，会调用对应的方法 .. 比如发生点击事件，会调用 .click() 方法 …  鼠标移到元素上会执行 .mouseenter() 方法 ..  离开的时候，会调用 .mouseleave() 方法 …   提交表单的事件发生的时候会调用 .submit() 方法 …  按下键盘上的按钮并抬起来以后，会执行 .keyup() 方法 … 
直接在选择的元素上调用这些方法 .. 然后在方法里可以用一个函数作为它的参数  …  这个函数就是当发生这个事件以后，要去做的事情 …


04-02-事件 - 鼠标

鼠标点击事件用的方法是 .click()  .. 双击事件用的是 .dblclick() 方法  … 鼠标在悬停的时候，可以使用 .hover() 方法 … 
这些都是跟鼠标事件相关的方法 …   一般只要你能想到的关于鼠标的动作，都会有一个相应的事件还有一个用来绑定事件处理程序的 jQuery 方法  … 
这个视频我们来了解一下这些跟鼠标事件相关的方法 … 
测试
在图像的下面有一个 h6 标题元素 ..   我们可以在图像上添加一个点击事件的处理程序，让它在点击图像的时候显示或者隐藏下面的这个标题  … 
下面我们可以打开这个页面嵌入的脚本文件  …   可以先去设置一下标题的默认的状态，默认把它们隐藏起来 … 
先找到所有在 .album 类下面的 h6 元素 …  用 css() 方法，设置一下 display 属性为 none … 这样可以把它们都隐藏起来 ..
$( '.album h6' ).css( 'display', 'none' );
然后再去选择所有的在 .album 类下面的 img 元素 … 使用它的 click 方法，去为元素绑定一个 click 事件的处理程序 
  $( '.album img' ).click(function(){
     $( this ).siblings( 'h6' ).toggle();
  });   
用一个函数作为这个方法的参数  … 在这个函数里，可以去调用当前元素的 h6 元素这个兄弟元素 … 再调用这个 h6 元素的 .toggle() 方法 … 
保存 …  回到浏览器 … 
点击图像 … 触发 click 事件，执行 .click() 方法里面的这个事件处理器 … 这个处理器做的事就是调用这个图像的兄弟元素，h6 元素的 toggle() 方法 … 
这样当在元素隐藏的时候，会让它显示出来，如果正在显示的话，会把它隐藏起来  … 
其它事件
下面，我们可以试一下其它的跟鼠标相关的事件的事件处理器  …   （#script）
找到 .click() 方法 ..  把它换成 .dblclick() ，双击事件的处理器 … 
现在， 双击图像，才会去显示或者隐藏标题 … 
再试试 hover …    hover 这个事件会在鼠标指针在元素上还有离开元素的时候触发  … 
（#html）把鼠标放在图像上 …   会显示标题 …    因为会触发 hover 事件 …   鼠标离开的时候 … 也会触发 hover 事件 …  所以标题会被隐藏起来 .. 
如果你只想在鼠标放在元素上的时候去做一些事  … 可以使用 .mouseenter() 这个处理器 …  如果想在鼠标离开的时候做点事 … 可以使用 .mouseleave()


04-03-事件 - 键盘输入与表单

更改表单元素，或者表单元素进入焦点状态或者离开焦点状态的时候都会触发相应的事件 …   比如用户点击了文本框，这个文本框元素就会处于焦点状态，同时会触发 focus 事件  …  当离开这个元素的时候，表单元素就不再是焦点了，这个时候会触发 blur 事件 … 
表单元素发生变化的时候会触发 change 事件 … 比如使用文件类型的表单元素选择了文件，切换选择复选框，都会触发 change 事件 … 
提交表单的时候，会触发表单本身的 submit 事件 … 
另外还有一些跟键盘相关的事件 … 
比如按下按钮上的按键会触发 keydown 事件 … 抬起按键会触发 keyup 事件 …    还有一个 keypress 事件 … 它跟 keydown 事件类似 … 不过如果你按的是 ctrl，shift ，delete 这样的按键 … 它们只会触发 keydown 事件 … 不会触发 keypress 事件 …   一般的字母或者数字键可以触发 keypress 事件 …


04-04-事件 - 键盘输入与表单 - focus, blur

现在这个网页上有几个表单元素 … 这个可以输入评论内容的文本区域上定义了 comment ID，通知是一个复选框，上面有一个 notice ID，最后还有一个提交按钮，上面定义了 submit ID  … 
我们先试一下 focus 事件的事件处理器 … 当用户点击这个文本区域的时候，更改它的 rows 属性的值  .. 现在这个属性的值是 2  … 
打开这个网页的脚本文件 …   先去选择这个评论的文本区域  …  再调用它的 .focus() 事件处理器 …    用一个函数作为它的参数  … 
在这个函数里，要做的就是修改所选的元素的 rows 属性的值  …  可以使用它的 .attr 方法 …  把 rows 的值，修改成 5  … 
$( '#comment' ).focus(function() {
        $( this ).attr( 'rows', '5' );
    }); 
回到浏览器 …  点击选中这个文本区域  ..   会触发它的 focus 事件 .. 这样就会执行 focus 事件处理器 … 把它的 rows 属性的值，改成 5  .. 
你会发现这个文本区域会变长一些 … 
.blur()
下面，我们再试一下 .blur() 事件 …   离开这个表单元素会触发 blur 事件 …  如果用户在评论这个文本区域里什么都没输入的话 …  再把它的 rows 属性的值改回成 2  … 
同样先选择评论表单元素 … 使用 blur 事件的处理器 …  在它里面，用一个简单的 if 语句，判断一下文本框里是否有内容 … 如果没有的话 .. 就把它的 rows 属性的值改成 2 …  
在要判断的条件里，我们用了一个 val() 方法 … 它可以获得表单元素的值  …  如果表单元素的值是空白的 .. 说明它里面还没有内容 … 这个条件就会这返回 true  …  也就会执行在 if 后面的大括号里的代码  …  
$( '#comment' ).blur(function() {
        if ( $( this ).val() === '' ) {
            $( this ).attr( 'rows', '2' );
        };
 }); 
再回到浏览器 …  选中文本区域  …   触发 focus 事件 … rows 属性的值会变成 5 ，文本区域会加长 …   离开的时候  … 会触发 blur 事件 … 因为还没输入内容，所以，rows 属性的值会变成 2  …


04-05-事件 - 键盘输入与表单 - keyup

我们再去看一个跟键盘输入相关的事件 , keyup  …  （#html）
在这个文档里面，有一个 <div> 标签，上面有 alert 和 alert-info 这两个类 ..  在这个元素上，我加了一个 display:none 的样式 .. 所以默认这个元素不会显示在视图模式上 … 
我们可以在这个元素上，去显示一些状态的信息 … 比如用户在文本框里输入内容的时候，会显示一个正在输入的状态  … 
按下键盘上的按键，抬起按键的时候会触发一个 keyup 事件 ..  下面我们可以利用这个事件的处理器去做点事 … 
选中评论的文本区域  … 调用它的 keyup 事件处理器 …  用一个函数作为它的参数 … 在这个函数里面，我们可以先选中那个用来显示状态信息的元素 …  它上面有个 .alert 类 …  然后使用它的 .text() 方法  .. 设置一下这个元素里的文本内容 … 
最后，再调用 show() 方法，让这个元素显示出来 … 
 $( '#comment' ).keyup(function() {
        $( '.alert' ).text( '正在输入...' ).show();
    }); 
在离开这个评论区域的时候，也可以在这个状态信息栏上显示一点内容 … 
$( '.alert' ).text( '暂停输入' ).show(); 
回到浏览器 …   点击文本区域  …  输入点内容 …   在状态栏上，也就是那个拥有 .alert 类的元素上，会显示 正在输入 …  
点击空白的地方 …   离开这个表单元素 …  会显示 暂停输入 …


04-06-事件 - 键盘输入与表单，change, submit

下面我们再去看一下跟表单相关的两个事件 …  change 和 submit  …  在表单元素发生变化的时候会触发 change 事件 …   提交表单的时候，会触发  submit 事件 … 
.change()
我们先在这个 通知 复选框上绑定一个 change 事件 …   先选中这个元素 … 它上面有一个 notice ID ..  使用 change 事件的事件处理器 .. 
用一个函数作为它的参数   …   在这个函数里面，我们用 if 语句去判断复选框的不同的状态，如果勾选了复选框，它的 checked 属性的值会是 true … 
如果没有勾选的话，这个属性的值会是 false  …  我们可以使用 prop() 方法获取到复选框元素的这个属性的值   … 
 $( '#notice' ).change(function() {
        if( $( this ).prop( 'checked' ) ) {
            $( '.alert' ).text( '发送通知' ).show();
        }else{
            $( '.alert' ).text( '不发送通知' ).show();
        }
    }); 
回到浏览器 …  勾选一下 通知  这个复选框  …  现在这个表单元素就发生了一些变化  .. 也就会触发 change 事件 … 这样在状态栏上就会显示 发送通知  …   取消勾选它 …  会在状态栏上显示 不发送通知  … 
.submit()
下面我们再去试一下 submit 事件 …   先选择表单  … 调用 .submit() 事件处理器 ….     在状态栏上显示一个 正在提交内容  … 
然后用一个提示窗口，显示在评论文本区域里面的内容  …. 
 $( 'form' ).submit(function() {
        $( '.alert' ).text( '正在提交内容...' ).show();
        alert( $( '#comment' ).val() );
 }); 
回到浏览器 …  在评论框里输入点内容 …  点击 提交 按钮 …   会触发表单的 submit 事件 … 
在弹出的提示窗口里，会显示在评论框里输入的内容  …


04-07-事件 - 事件的绑定 - on

除了直接使用事件处理器这种简便的方式 ，我们也可以使用手工绑定事件到元素上的方法 … 用 .on()  可以去绑定指定的事件，同时我们也可以给事件指定一个处理器 … 也就是一个发生事件的时候要执行的那个函数 .. 
jQuery 还提供了一个 .off() 方法，它可以关掉绑定在元素上的事件  …   如果你想在元素上绑定一次性的事件 … 可以使用 .one()  ….  用这个方法绑定在元素上的事件处理只会被执行一次 … 
测试
这个页面我们之前使用 .click() 这个事件处理器，给图像上绑定了一个 click 事件 … 点击图像，会显示或者隐藏标题 …   下面，我们可以使用 on()  的方法去改造一下它  … 
把 .click 换成 .on   …  在这个方法里，指定一下要绑定的事件的类型  … 这里我们用一个 click 事件 …  后面可以使用同样的函数作为它的参数  … 这个函数就是 click 这个事件的处理函数 … 
也就是在 .album 下面的 img 元素上发生 click 事件的时候，要执行的就是这个函数 …. 
如果在这里，我们使用了一个 false  …   表示绑定的这个 click 事件不做任何事 .. 并且防止默认的行为和事件的传播 … 相当于在这个事件上应用了 stopPropagation()  还有 preventDefault()  … 
回到浏览器上去试一下 … 
同样，点击图像可以切换显示标题 …   
.one()
想让这个事件处理器只执行一次，可以使用 one() 方法 …  (#js) 打开 on … 换成 one …  表示这是一个一次性的事件 … 
回到浏览器 … 点击封面图像 …. 会显示标题 …  不过我们再点击它的时候，标题不会隐藏起来 … 因为我们使用了 one() 的方法绑定的 click 事件 … 所以这个点击事件只会执行一次 …


04-08-事件 - 事件的取消绑定 - off

下面，我们可以再试一下 .off 方法去关掉使用 .on 绑定的事件  … 在这个文档上，我添加了两个按钮，开 ，还有关 ... 
我们可以在 开 这个按钮上绑定一个 click 事件 … 点击它的时候，去为 .album 下面的 img 元素绑定点击事件 …  然后在 关 按钮上也绑定一个 click 事件 .. 点击它的时候，可以关掉绑定在封面图像下面的 click 事件 … 
 <div class="btn-group">
          <button type="button" class="on btn btn-default">开</button>
          <button type="button" class="off btn btn-default">关</button>
 </div> 
(#js)  直接用 .click() 事件处理器给开关按钮上绑定 click 事件 …    把之前的代码放在 .on 的 click 事件处理器里 … 把这个 .one 再改成 .on …. 这样点击 开 这个按钮 … 会为封面图像绑定 click 事件 … 
再去处理一下 关 按钮 …   
点击关按钮的时候 … 我们使用 .off() 方法，关掉绑定在封面图像上的 click 事件处理器 …  在 .off() 方法里，直接指定在关掉的事件 … 
回到浏览器上 … 
点击封面图像 … 没有反应 …   点击这个 开 按钮 … 这样会在封面图像上绑定 click 事件 …  
点击封面图像  … 会显示标题 …   我们再点一下 关 这个按钮 …  这样会使用 .off 方法，关掉在封面图像上的 click 事件处理器 … 
再点一下封面图像 …  就不会有反应了  …


05-01-效果 - 逐渐消失与逐渐显示

.fadeIn() 可以逐渐显示选择的元素，.fadeOut() 可以让元素逐渐消失 …  我们可以指定显示和消失的过程所用的时间，也可以指定一个函数在动画完成以后去执行 …   .fadeToggle() 可以切换显示 …  
现在这个文档里有三个按钮 …  显示，隐藏，还有切换  …  下面，我们可以去写点代码，在点击 隐藏 按钮的时候，逐渐隐藏封面图像还有标题 …   点击 显示 按钮的时候，把隐藏的东西再逐渐显示出来 .. 
点击 切换 按钮，可以切换封面图像和标题的显示 … 
测试
打开文档的脚本文件 …  先找到 显示 按钮 .. 这个按钮上有一个叫 .on 的类 …   然后调用它的点击事件 …  点击它的时候，去执行一个函数 … 在函数里 .. 
可以先选择 .album 类的元素，也就是包含封面图像和标题的元素 …  再去调用它的 .fadeIn()  方法 … 这个方法可以把隐藏的元素逐渐显示出来 … 
类似的方法，再设置一下 隐藏 按钮 .. .  隐藏按钮上有一个 .off 类 … 用这个类选择这个按钮 .. . 然后把 .fadeIn() 这个方法换成 .fadeOut()  … 它会去逐渐隐藏选择的元素 … 
最后，我们再处理一下切换按钮 … 这个按钮上有一个 .toggle 类 … 
在这个按钮的点击事件处理程序里面，使用一个 .fadeToggle() 方法 …   在选择的元素处于显示的状态的时候，它会逐渐隐藏元素 …  处于隐藏的状态，它会逐渐显示元素 … 
下面，我们去浏览器上试一下 … 
打开控制台 … 选择其中的一个 .album 类的元素 … 注意在发生动画的时候，这个元素上的样式的变化  … 
点击 隐藏 按钮 …   你会发现，元素会逐渐隐藏起来 … 一直到完全透明的状态  …   所有的 .album 类的元素上，都会应用一个 display:none 的样式 … 
再点一下 显示 按钮 … 
刚才被隐藏的元素会逐渐显示出来 …     再试试 切换 按钮 … 
点一下，会隐藏元素 … 再点一下，会再把元素显示出来 … 
持续时间
动画的开始到结果之间有一个过程，这个过程需要的时间就是动画的持续时间，这个时间的值，默认是 400 毫秒 …  我们可以把它修改成自己想要的值   …. 
（#js）比如我们找到 .fadeOut() 这个方法 …   给它一个持续时间的参数  …  设置成 1000 毫秒  …  也就是动画从开始到结束会经历 1 秒钟的时间  … 
回到浏览器 … 点击 隐藏  … 
你会发现，元素逐渐消失的过程会变得长一些 …  因为我们修改了这个动画的持续时间  … 
有时候我们也可以使用字符串来代替这个具体的时间 … fast 是 200 毫秒 … slow 是 600 毫秒 … 
队列
jQuery 的这个动画是排队去执行的 …  比如我们在元素上同时调用了 .fadeIn() 还有 .fadeOut() …   jQuery 会先去完成 .fadeIn() 动画  … 完成以后，接着再去执行 .fadeOut()  动画 … 
(#js) 在这个显示按钮 … 先快速的显示封面图像和标题 … 然后再快速隐藏 .. 最后再慢一些逐渐显示它们 .. 
     $('.album').fadeIn( 'fast' ).fadeOut( 'fast' ).fadeIn( 'slow' );
回到浏览器 … 先隐藏一下这些封面 …  然后点击 显示  …  
你会发现  … 封面图像会快速的逐渐显示，又逐渐消失  …  最后再慢速的逐渐显示出来 …


05-02-效果 - 动画完成以后的回调函数

在动画的方法里，可以再传递一个函数作为它的参数  …  这个函数在完成动画的时候会去执行 …  （#js）
在 持续时间 这个参数的后面，加上一个逗号 … 再使用一个 匿名函数  ..   这个函数要做的就是在控制台上输出一点文字  … 
 $('.album').fadeOut(1000, function() {
            console.log('完成了动画');
 }); 
保存 …   再回到浏览器  …   点击 隐藏  … 
你会看到动画完成以后，会在控制台上输出指定的文字   …  注意这个文字显示了四次 ，说明这个函数被调用了四回 …   
因为我们选择了四个元素，然后对这四个元素应用了动画  … 所以指定的回调函数也会被执行四回 .. 
递归
下面我们可以做点有意思的事，点击 隐藏 按钮的时候，逐个去隐藏封面 …    我们可以先去选中最后一个封面，然后调用逐渐消失方法 … 
给这个方法指定一个回调函数  …  这个函数做的事就是去逐渐消失封面的上一个封面  …   然后递归地去调用这个函数 …   用到的东西是函数的 arguments 对象的 callee 属性  …   它会递归地去调用匿名函数本身 …  
$('.off').click(function () {
        $('.album:last').fadeOut('fast', function () {
            $(this).prev().fadeOut('fast', arguments.callee);
        });
}); 
（#js），选中最后一个 .album 元素，可以加上一个 :last 选择器 …   动画的持续时间用一个字符串  fast …  它指带的持续时间是 200ms  … 
动画完成以后，去调用函数 … 
在这个函数里，用 jQuery 函数封装一下当前发生动画的这个元素，把它转换成一个  jQuery 对象 … 然后使用 .prev() 方法 … 选择它的上一个兄弟 …  再调用 .fadeOut() 方法，把这个兄弟逐渐消失掉 … 
消失的过程可以让它快一些 … fast  …   然后用一个 arguments.callee  …  它可以递归地去调用这个函数函数  … 
保存 … 
回到浏览器  …  点击 隐藏  …   
jQuery 首先会选中最后一个封面，把它逐渐消失掉，再去调用动画的回调函数，去把它上一个兄弟逐渐消失掉 …  然后再去递归地调用这个函数 … 把所有的兄弟都逐渐消失掉 … 
下面，我们可以使用同样的方法，去处理一下这个显示按钮 … 点击它，可以从左到右逐个去显示封面 … 
        $('.album:first').fadeIn('fast', function () {
            $(this).next().fadeIn('fast', arguments.callee);
        }); 
这样我们需要先选中第一个封面  …  然后把 .fadeOut() … 都改成 .fadeIn() …   
保存 …  再回来看一下  … 
点击隐藏  … 会从右向左逐个消失  …  点击 显示  … 会从左到右逐个显示  …


05-03-效果 - 滑动效果与显示或隐藏

滑动效果有滑入，滑出，还有切换滑动，另外还有显示，隐藏，和切换显示  …   这个视频我们来看一下这些效果 .. 
还是使用之前的文档  …  打开它的脚本文件  …  滑入是把元素滑动显示出来 …   用到的方法是  .slideDown()  … 从上往下滑入进来 …   把 .fadeIn() 都修改成 .slideDown()  … 
滑出的效果就是把元素滑动隐藏起来 　 … 方法是 .slideUp() ..  
切换滑动的方法是 .slideToggle()  … 
保存  … 回到浏览器去试试 … 
点击 隐藏  … 封面会从下往上滑动 …   
点击 显示  … 封面会从上往下滑动出来 … 
显示/隐藏
下面，我们再试一下显示，隐藏，还有切换显示   … 
显示可以使用 .show() 方法 …  替换一下 …. 
隐藏用的是 .hide() 方法 … 
最后还有一个 切换显示  … 用的是 toggle()  … 
保存  … 回到浏览器  … 
点击 隐藏  … 可以隐藏封面  … 点击 显示  .. 可以显示封面 　…    切换  … 可以切换显示封面 …


