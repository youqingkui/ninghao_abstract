00-00-课程介绍

在这个课程里，我们先去了解一下 Web SQL 的使用流程和方法  …  然后再学习一下 SQL 基本的语句 …
比如怎么样去创建一个数据库 …  为数据库添加数据表，怎么样插入数据到数据表里面  …  更新，还有删除数据表里面的数据 ..
如何去查询数据库里的数据 …   了解数据库的 Aggregate Functions … 去统计查询到的结果，合计结果等等 …
然后我们再介绍一下数据库里的数据表之间的关系 … 怎么样去创建这种关系，还有怎么样利用创建的关系 …
有了这些基本的知识以后，我们再去使用 Web SQL 去创建一个简单的可以记录笔记的应用… 
用户可以在文本区域里面输入笔记的内容 … 点击 提交 可以把笔记内容存储到数据库里，并且会从数据库里调出用户的笔记内容，显示在页面上  … 
用户还可以编辑或者删除存储的笔记 … 
下面，我们就开始学习 Web SQL … ﻿


00-01-使用 WebSQL 的流程与方法

这个视频我们可以先来熟悉一下 Web SQL …   使用 Web SQL 的流程大概就是这样  …   使用 openDatebase() 打开一个数据库 ..  给它返回来的那个对象起个名字 ..  再去使用这个对象的 transaction() 或者 readTransaction() 方法 …  在这两个方法里面 … 使用 executeSQL()  去执行数据库的操作 … 
测试 Web SQL 我们需要使用支持它的浏览器，这里我用的是 Chrome 浏览器。
然后再启动我们在本地服务器的运行环境 ..  新建一个空白的网页 ...  把它放在 Web 服务器的发布目录里面 ... 然后在浏览器打开这个空白的网页 …  
你可以在这个课程的资源包里找到这个空白的网页。
再打开浏览器的控制台 …   
创建数据库
使用 openDatebase 这个方法，可以打开一个数据库 .  如果这个数据库不存在的话 … 浏览器会为我们去创建一个 …
输入 openDatabase("testapp", "1.0", "测试一下 WebSQL", 5 * 1024 * 1024)
这个函数里面有几个参数我们需要指定一下 … 第一个参数是数据库的名称 …  第二个参数是 数据库的版本 ..  接着是数据库的一个简单的描述  …  最后是数据库的大小 …   
这个大小的单位是字节  ..  5 * 1024 * 1024 表示数据库最大可以是 5M …   回车 …
数据库对象
这个方法会返回一个数据库对象 ..  在控制台上会直接显示出这个对象的结构  …    它的版本是 1.0 ，在里面还有几个方法 … 
changeVersion()  …  可以修改数据库的版本  …  在数据库结构发生变化的时候，可以使用这个方法去更新数据库的结构  ..  
transaction() … 交易 ..   这个词会经常出现在数据库系统里面 …  比如你想给数据库创建数据表 … 插入内容到数据库里面 … 更新或者删除内容等等 … 这些操作都要在这个 transaction() 里面去执行 … 
readTransaction() 可以进行只读的交易 ..   transaction() 可以从数据库里读取内容，也可以写入内容  . ..  readTransaction()  只能去读取内容 … 
比如你只想从数据库里读取内容然后把它显示出来 …  这种情况就可以在 readTransaction()  里面去操作 …
下面我们可以把 openDatebase 返回的这个对象起个名字 …  var db =  ...
再输入 db 回车 …  它里面的东西就是 openDatebase 返回的东西  …   这样我们可以使用 db. 的形式去做一些事情 … 
比如 db.version …  可以返回数据库的版本号 ..
使用它的 transaction() 方法 … 可以输入  db.transaction() …  这个方法里面有几个参数  … 第一个参数就是执行 transaction() 时候的调用的函数 …   第二个参数是成功以后要做的事 … 第三个参数是出现错误的时候要做的事 … 
db.transaction(function(tx){console.log(tx)}) 
我们把 transaction() 返回的 SQLTransaction 对象交给这个函数 …    叫它 tx …   然后在函数的里面 … 用一个 console.log .. 把这个 tx 对象输出到控制台上来看一下 …
你会看到 … 这个对象里面有一个  executeSQL() 方法  …  使用这个方法 …  我们可以去执行 SQL  语句 …  比如创建数据表 … 读取数据  … 插入，更新或者删除数据等等 …


01-01-理解数据库

一个数据库就好像是一个电子表格文档 ….  文档里面可以有不同的工作表 … Excel 上面叫 工作簿 …    我们可以在工作表之间建立起一些联系 …   或者叫作 关系  …
这样我们就可以相互调用不同工作表里面的内容了  …    在数据库里面，这些工作表叫作 Table ，数据表 ...
工作表里可以存储不同的数据  …    竖着的数据 … 就叫作 column … 也就是 栏 …   每一栏都可以有一个名称  …      这个表里面有四栏内容 …  id , name , age , 还有 weight …
表里面的横着的数据叫作 row …  也就是 排  …   这个表里有两排内容   …  
创建数据库，数据库的结构，调出，插入，更新，或者删除数据库里的数据 …   我们需要用到一种简单的语言  … 也就是 SQL　..


01-02-创建数据表结构

下面我们可以先去创建一个跟你现在看到的一样的 数据表 的结构  .. ..   先在数据库里创建一个叫做 user 的数据表 … 然后再去为这个表定义几个栏 … ID，name ， age ，还有 weight … 
创建数据表
打开我们在前面视频里用到的这个空白的网页  …  再打开开发者工具 … Resources …  Web SQL ..
在这里，可以找到上一个视频里创建的 testapp 这个数据库  …   选中这个数据库 ... 目前这个数据库里还没有任何的内容   … 
在右边这里 ，我们可以使用 SQL 语言去操作这个数据库  … （播放幻灯片）使用 CREATE 可以为这个数据库创建一个数据表 ..  后面加上想要创建的数据表的名称   …   然后在括号里，去指定数据表里面的 栏 内容  … 
CREATE TABLE user 
它的意思就是去创建一个叫 user 的数据表  ..  在它的前面，我们可以再加上一个 IF NOT EXISTS ..    这样如果数据库里面已经包含了 user 这个数据表，就会跳过创建 user 数据表的操作 ..
在数据表名称的后面 … 加上一个括号 … 在括号里，我们可以为这个数据表添加 栏  …  
添加添加一个  id 栏 …  后面跟着是这栏内容的类型 …  不同的数据库系统支持的内容类型会有一些区别 … Web SQL 用的是 SQLite 数据库管理系统… 所以，详细的类型 … 你需要去查看一下 SQLite 支持的数据类型 … 
这个 id 栏里面的数据的类型是整数  … 所以，表示整数的类型的关键词是 INTEGER  …     id 这栏内容我们可以让数据库自动去添加 …  也就是，当我们为这个数据表里插入了第一排内容 … 这排内容的 id 里的内容就会自动变成 1  
插入第二排内容的时候 …  id 里的内容就会是 2  … 然后依次往下排 … 
想要这样的话 … 要为 id 栏内容类型的后面，加上一个 PRIMARY KEY  …  然后是排序的方式 …  ASC … 表示升序 …   从 1 开始，往后排 …  如果是 DESC 的话 … 就是降序排列 …  数据会从最大的 ID 开始排列 … 
后面加上一个逗号分隔一下 … 再去添加其它的栏 ，第二栏内容叫作 name  …    它的类型是 TEXT …  文字类型的内容  … 
逗号分隔  … 第三栏是 age ，年龄… 它的类型是整数 …  INTEGER  …  第四栏是 weight ，体重 …   这栏内容可以是小数 … 所以它的类型可以使用 REAL …
CREATE TABLE IF NOT EXISTS user (id INTEGER PRIMARY KEY ASC, name TEXT, age INTEGER, weight REAL) ;
完成以后 .. 按一下回车，执行这条命令 ..
现在，在 testapp 这个数据库的下面 … 就会出现一个 user 数据表  …    选中这个数据表  …  目前里面还没有任何的内容  … 
在下面的视频里，我们可以使用 INSERT INTO  … 去给这个数据表添加一些内容 …


01-03-插入数据 - INSERT INTO

INSERT INTO 可以把数据插入到指定的数据表的栏里面 …   使用的方法是这样的 …  INSERT INTO  … 后面加上数据表的名称  …  然后在括号里，指定想要插入数据的数据表里的栏 …
在 VALUES　后面的括号里 …  再指定与数据栏对应的数据值  …   
这条命令 ..  会把 达拉斯买家俱乐部 插入到 content 这个数据表里的 post_title 栏 里面，另外会把 一个真实的故事 插入到 post_body 栏里面。 
演示
下面我们去给之前创建的 user 这个数据表添加一些内容  …  先选中 testapp 这个数据库 … 
输入 INSERT INTO .. 后面加上数据表的名称  … user …   然后在括号里，指定想要插入数据的数据表里的栏 …  (name, age, weight)  …
再输入一个 VALUES … 后面是要放在 name, age, weight 栏里的对应的内容 …   ('王皓', 29, 160.5)  … 姓名是 王皓 .. 年龄是 29，体重是 160.5 …  注意因为 name 这栏内容的类型是 TEXT 文本 … 所以这个值要用一个单引号 … 
INSERT INTO user (name, age, weight) VALUES ('王皓', 29, 160.5); 
这条语句的意思就是，往 user 这个表里插入一排新的内容 ...  在这排内容里，name 这栏的内容是 王皓 ， age 这栏的内容是 29 ，weight 这栏的内容是 160.5 .... 
回车 … 执行这条命令 … 再打开 user 表去看一下 ..
现在，这里面就会有一排内容了 …  因为这是这个表里的第一排数据  … 所以 id 这栏里，会自动加上一个 1， 姓名是 王皓，年龄是 29，体重是 160.5
再打开 testapp  …  使用类似的方法，再去添加一条数据  ..   按一下键盘上的向上箭头 … 可以调出之前输入的命令 …
修改一下要插入的值 …   姓名是，小雪 … 年龄  26 …  体重是 99 …   回车  .. 再打开 user 表 ..
现在这里又会多出一条数据 …   注意这个 id 栏的内容会自动增加 … 


01-04-更新数据 - UPDATE

如果想去修改已经在数据表里的内容 …  可以使用 UPDATE  …  它的后面加上要更新的数据表的名称  … 然后在 SET 这个关键词的后面 ..  输入要更新的栏，还有对应的更新以后的内容 …
最后再用一个 WHERE …   去指定一个条件 …   
比如，我们去修改一下 小雪 的体重 …  其实她不是 99 斤 …  而是 100 斤  …  
UPDATE … 加上数据表的名称  … user  ，再设置一下栏的内容  SET weight = 100 …   用 WHERE 再去指定一个条件  ..  小雪这排内容的 id 是 2  … 想要更新这排内容的 weight 栏的内容   …  这里可以输入 id = 2 ;
UPDATE user SET weight = 100 WHERE id=2;
回车 ..   再打开  user 表 …    现在，小雪这排内容的 weight 这栏里，就会变成 100 了  ….


01-05-删除数据 - DELETE

删除数据库里的内容可以使用 DELETE … 在 DELETE FROM … 后面，就是是想要删除数据的那个数据表 …  然后在 WHERE 的后面 …  去指定一个条件 …
打开 testapp … 我们可以再去添加一条新的内容  ..   姓名是 张三  …  回车 … 打开 user 表 … 张三的 id 是 3  … 下面我们用 DELETE 把张三从 user 这个表里删除掉 …
DELETE FROM user WHERE id = 3;
回车  ….  打开 user 表 … 
张三这条内容已经从这个 user 表里删除掉了 …


01-06-查询数据 - SELECT

查询数据表里的数据，可以使用 SELECT …   它的后面是要选择的数据栏 … FROM 关键词的后面可以指定 数据栏 所属的数据表  …   在 WHERE 的后面可以指定条件 …. 
这里我们还是用之前创建的数据库还有数据表演示一下 SELECT 的用法 … 
打开数据库  …  输入 SELECT  … 比如想要选择 user 表里，name 这栏的内容  …  可以输入 SELECT name FROM user …
在返回的结果里面，只会显示 user 表里的 name 这栏的所有内容  …   如果还想显示其它栏的内容 .. 可以在 SELECT 的后面指定一下 ..
SELECT name, age FROM user ;
这样会显示 user 表的 name 还有 age 栏的内容 ….   在 SELECT 后面使用一个 * 号 … 表示全部的栏 … 
SELECT * FROM user ;
这条命令会显示 user 表里的所有栏的内容 .
WHERE
在 WHERE 的后面，我们可以去指定条件 …     SELECT * FROM user WHERE id = 1; 
会显示 user 表里面 id 栏里的内容是 1 的内容  …  
在条件里面，我们也可以使用 大于，小于，大于等于，或者小于等于 .. 比如想要显示年龄大于 26 岁的所有用户 …  SELECT * FROM user WHERE age > 26; 
找到年龄大于等于 26 岁的用户 ..  SELECT * FROM user WHERE age > 26;
AND ，OR
要指定多个条件，不同的条件之间可以用一个 AND 或者 OR 来连接  …   AND 表示与，也就是满足所有使用 AND 连接的条件的数据才会被选择 …
OR 表示或，满足一个条件的数据就可以被选择 … 
SELECT * FROM user WHERE age > 26 OR weight >= 100; 
这条命令会选择 user 表里，年龄大于 26 岁，体重大于等于 100 斤的用户 ..
LIKE
使用 LIKE 我们可以去设置模糊的条件 … 比如，找出所有姓名里包含 王，这个字儿的用户 …   或者以 王 这个字开头或者结尾的用户  …  
SELECT * FROM user WHERE name LIKE '王%'; 
这里我们用了一个通配符 …  就是这个 %  …  它表示所有的字符  .. 也就是不管 王 字后面是什么 … 有多少个字儿 … 都会被选择出来 …
这里只会显示 王皓 这个用户 .. 因为 user 这个数据表里，只有 王皓 这条数据的 name 栏里的内容包含 王 这个字儿并且是以 王 字开头 …  
下划线，也就是一个通配符  … 它表示一个字符 … 
SELECT * FROM user WHERE name LIKE '王_'; 
这条命令的意思是，找到 user 表里， name 栏的内容是以 王 字开头，并且是两个字的名字 …   因为这个下划线只表示一个字符   … 
ORDER BY
我们对选择出来的数据可以排一下顺序  ..  要用到的关键词是 ORDER BY  按什么东西来排序
SELECT * FROM user ORDER BY weight; 
找到 user 表里的所有内容，找到的结果按照 weight 栏的内容来排序 …  也就是按体重来排下顺序  ….  默认的排序方式是升序排列 … 
体重最轻的用户排在最前面..   想要降序排列，需要在最后再指定一个 DESC  这个关键词 …
SELECT * FROM user ORDER BY weight DESC  … 
这样体重最沉的用户会排在前面  ….


01-07-更改与删除数据表 - ALTER & DROP

在前面的视频里，我们介绍了使用 CREATE ，去创建数据表 ….  修改已经创建好的数据表，可以使用 ALTER ..  我们可以为数据表添加新的栏 … 或者去修改数据表的名称  …
要删除数据表，可以使用 DROP  …   下面我们来看一下这个 ALTER ，还有 DROP … 
修改数据表
比如我们去给 user 表添加一个用户 e-mail 地址的栏 … 
打开数据库  …  输入  ALTER TABLE user ADD email TEXT;     这个 ADD 就是添加的意思，它后面就是我们要添加的栏的名字 .. 还有栏的数据的类型。
打开 user 表 …  这里，会添加一个新的 email 栏 …   
下面我们再去修改一下 user 这个表的名称  …  
ALTER TABLE user RENAME TO member;     ... RENAME TO 就是重命名的意思。这条声明可以把 user 这个表的名称，改成 member  …   回车   …   
然后刷新一下这个页面 …    再重新打开 testapp 这个数据库 …
回到 Resources … testapp  …   这里的 member 这个数据表，就是之前的user 表  …. 
删除数据表
删除数据表，可以使用 DROP . …  
DROP TABLE … 后面加上要删除掉的数据表的名称  …    DROP TABLE member;
这样会从 testapp 这个数据库里面删除掉 member 这个数据表 ….


01-08-Aggregate Functions

数据库的 Aggregate Functions ，可以对选择的数据做一些统计运算 … 比如，统计一下找到的结果的数量，找出结果里的在某个栏里的数据的最大值，最小值  … 或者算出平均数等等 … 
下面我们来演示一下  …     比如我们可以先去统计一下 member 表里面有多少条数据  …   这个统计运算，要用到的就是 COUNT 函数。
SELECT COUNT(*) FROM member 
COUNT 可以统计数量 … 括号里的 * 号，表示没有指定参数  … 这样它会统计 member 表里一共有多少条数据 …   这里显示的是 2 ，表示 member 表里一共有两条数据 …   在这个 COUNT 后面的括号里，可以指定想要统计的具体的 栏 …  
MAX 与 MIN
找出最大数和最小数，可以使用 MAX 还有 MIN  …. 
比如找到 member 表里，最大的体重是多少  ..  
SELECT MAX(weight) FROM member; 
最大的体重是 160.5 斤 …  
再去找一下在 member 这个表里，年纪最小的是几岁 …   SELECT MIN(age) FROM member;
AVG
算出平均数，可以使用 AVG 这个函数。比如我们去算一下在 member 这个表里，用户的平均年龄是多大 … 
SELECT AVG(age) FROM member;  
平均年龄是 27.5 岁  …  这个 AVG 就是 average  … 平均的意思 … 
TOTAL
最后我们再看一下 TOTAL 函数  .. 它可以去合计数据 … 
比如，我们想要算一下，在 member 表里的用户的总体重是多少 …. 
SELECT TOTAL(weight) FROM member;
TOTAL 后面的括号里，指定想要合计的数据栏 …    你会看到  …  所有的用户加起来，一共是 260.5 斤 …


01-09-数据表之间的关系

一个数据库里可以包含多个数据表 … 不同的数据表之间可以建立某种关系  …  比如，这里我们有两个表 …  member 还有 note …  member 表里存储的是用户的数据 … note 表里存储的是用户写的笔记的内容 …
在 note 表里面，有一个 member_id … 这栏里面的内容，对应的就是 member 表里的 id 栏 …
在向 note 表插入数据的时候，可以在 member_id 栏里面，指定一个对应的 member 表里的 id …   这个 note 表里的 member_id ，还有 member 表里的 id  ..   就是这两个表之间的关系 … 
使用它们，我们可以找到某个用户撰写的所有笔记  …  在找到的结果里面，可以包含 note 表还有 member 表里的栏的内容  … 比如 note 表里的笔记的内容，还有 member 表里的用户的名称   …


01-10-实践数据表关系

我们先去创建一个 note 数据表 ….    CREATE TABLE IF NOT EXISTS note (id INTEGER PRIMARY KEY ASC, note_content TEXT, member_id INTEGER) ;
在这个表里面，有三个栏 ….  id ，note_content ，还有 member_id …   下面我们再去给这个表插入一些数据  …
INSERT INTO note (note_content, member_id) VALUES ('我是小雪，今天心情挺好。', 2);
在插入内容的时候，指定一下这条数据对应的用户的 id  ..  这条笔记属于小雪这个用户 ..  小雪的 id 是 2  ….
再插入一些内容  ….
INSERT INTO note (note_content, member_id) VALUES ('我是王皓，《 Peaky Blinders 》很好看', 1); 
这条笔记属于 王皓 这个用户  …  他的 id 是 1  …. 
下面我们可以再去插入一条笔记内容 ….
INSERT INTO note (note_content) VALUES ('我是张三'); 
在这条内容里，没有指定它所属的用户的 ID ….
测试
下面，我们可以使用 SELECT …  去找出用户写的所有的笔记的内容  …  另外在结果里面，还要包含对应的用户的名称  ….
SELECT id, note_content, name
指定想要显示的栏内容  … note_content 这栏内容来自 note 这个表，它是笔记的内容 … name 这栏内容来自 member 表，是用户的名称 …
FROM note
在 FROM 后面加上数据表的名称  …    先输入 note 这个数据表的名称  …  接着使用一个 JOIN 关键词 …  后面再加上 member 这个表 …
这个 JOIN 的意思就是，去把两个表结合在一起，或者连接在一起 …
然后，我们需要再去指定一下，这两个表用什么东西结合在一起 …  这里我们要用 note 表里的 member_id … 还有 member 表里的 id  ….   这里我们需要用到一个 ON  … 
ON member_id = member.id    …      SELECT note_content, name FROM note JOIN member ON member_id = id; 
回车 …  
出现了一个错误   …  提示这条 SQL 声明里面，有一个模糊的栏，id  …  这是因为在 note 表里，还有 member 表里面，都有一个栏叫 id  …
最后的这个 member_id = id  就是出现问题的地方  …  我们需要明确的去指定  …  这个 id 到底是哪个表里的 id 　..  
member_id 来自 note 表  … 等号后面的 id 是来自 member 表 …   所以在它的前面，我们可以明确的指定表的名称  …   member.id
在栏的名称的前面，加上所属的数据表的名称 ..  再加上一个点 ...  这样可以解决数据表里的栏名称命名冲突的问题  ….
修改好以后 … 回车  ...
SELECT note_content, name FROM note JOIN member ON member_id = member.id;
在返回的结果里面，会显示笔记的内容 …. 另外还有对应的用户的名称  …..
LEFT OUTER
note 这个表里，有三条数据  …   不过在返回的结果里面，只会显示出两条 …  这是因为在没显示出来的那条笔记内容里，没去指定笔记所属的用户的 ID  …
如果想把类似这种情况的内容也包含在查询出的结果里面，我们可以使用 LEFT OUTER  … 
在这个 JOIN 的前面，加上一个 LEFT OUTER … 
表示以左边的表为主  …. 去结合 note 表，还有 member 表 ….   这个左边的表，就是在 JOIN 左边的表  ….
跟 LEFT OUTER 对应的还有 RIGHT OUTER  和 FULL OUTER …. 不过 SQLite 目前只支持 LEFT OUTER
回车 ….  在查询的结果里面，会包含，没有指定用户 id 的 笔记内容 …


01-11-删除数据库

如果你想删除整个数据库的话   …  我们需要找到存储这个数据库的位置  …  然后直接从硬盘上删除掉 ….   在 Mac 电脑上 ，Chrome 浏览器存放 WebSQL 数据库的地方是在 用户主目录下面的 
~/Library/Application Support/Google/Chrome/Default/databases
….
在 Windows 系统里面，Chrome 浏览器的 WebSQL 数据库是在 
\Users\_username_\AppData\Local\Google\Chrome\User Data\Default\databases
Windows 用户可以直接找到这个地址，然后删除对应的数据库   …   MAC 用户，可以打开 终端工具 … 
cd ~/Library/Application\ Support/Google/Chrome/Default/databases
然后用 ls 列出当前目录里的东西 …   这个 http_localhost 里面应该就会包含我们创建的数据库  …
rm -rf http_localhost_0
这行命令可以删除掉我们之前测试 WebSQL 的时候创建的 testapp 这个数据库   ….


02-01-应用演示与所需 HTML

在接下来的视频里，我们一起去创建一个简单的可以记录笔记的小应用 …  这个小应用使用的是 Web SQL 数据库 …   在这个文本框里 … 输入一些内容  …  
天气不错 …   点击 提交  ..  这样会把 内容 存储在用户本地的 Web SQL 数据库里面  … 
在它的下面，会显示出在数据库里的所有的笔记内容  …    
#  《 Peaky Blinders 》很好看 …  提交
每一条笔记会有笔记的内容，记录的时间 … 还有一个 删除 按钮，和一个 编辑 按钮 … 
点击 删除 … 可以从 数据库 里面删除掉当前这条笔记  （# 《 Peaky Blinders 》很好看）…    点击 编辑  … 会把 笔记 的内容显示到 上面的 文本区域 里面 …  同时这个 提交 按钮 … 会变成 更新 按钮 …
在 文本框 里，可以输入修改之后的笔记内容  …  点击 更新 … 会 修改 这条笔记的内容 …
这些就是这个小应用能做的事儿 … 非常简单 … 
不过它用到了一般的处理数据库数据的几个重要的步骤 …   创建内容，读取内容，更新内容，还有删除内容 …  在四个步骤可以简称为 C..R..U..D …  crud …
C 表示 Create 创建 ，R 是 Read 读取 ，U 表示 Update ，更新… D 是 Delete  删除… 
HTML
下面，我们先去看一下这个应用，用到的 HTML 代码 …  
这个 HTML 文档用到的样式大部分是来自 Bootstrap …   另外还有一些自定义的样式 …  我把它放在了 style.css 这个样式表里  … 
文档本身的结构也很简单 …  一个标题 ….  它的下面是一个提交笔记用的表单 …  这个表单里面，有一个文本区域  …   可以让用户输入笔记的内容 …  这个文本框我给它起了个名字 … 叫做 note-content …
最后还有一个发布笔记用的 提交 按钮 … 在它的上面，我定义了一个 ID … submit 
另外这里还有一个 隐藏 的文本框  … 它的名字是 note-id … 在后面的视频里我会解释它的作用 … 
然后在页面的底部，还有一个 script.js  …  应用功能的主要的 JavaScript 都放在了这个文件里面  …  在后面的视频里，我们主要的工作都会在这个 script.js 文件上面   …


02-02-创建数据库与数据表

这个视频我们可以先去创建这个应用需要的数据库，还有数据表。
先打开 script.js …  
首先我们去创建一个数据库  …  可以使用 openDatabase …   openDatabase("noteapp", "1.0", "一个可以记录笔记的应用", 5 * 1024 * 1024); 
浏览器每次加载这个脚本文件的时候，都会试图去打开 noteapp 这个数据库 … 如果这个数据库不存在的话 … 就会去创建一个 …. 
这个 openDatebase() 会返回一个对象  … 我们可以命名一下返回的这个对象  ..   这样会方便以后去使用这个对象里的东西 …  比如它的 transaction() 方法  … 
// 打开数据库
var db = openDatabase("noteapp", "1.0", "一个可以记录笔记的应用", 5 * 1024 * 1024);
有了数据库并且打开以后 …  下一步要做的就是去为这个数据库创建 数据表 …  
创建数据表可以使用 SQL 的 CREATE TABLE  …  不过我们想要执行 SQL ，需要在一个 Transaction() 里面去执行 … 这个  transaction() 是打开数据库返回来的那个对象里的一个方法 …
transaction()  就是交易的意思 …   我们可以把它想像成现实生活里的交易  … 比如你花了 10 块钱，买了二斤苹果 …  你交了钱，拿了苹果，这就算是完成了一个交易  … 
如果你给了钱了，但是没拿到苹果，你肯定不干   …   如果你拿了苹果不给钱就想走人 … 卖苹果的肯定也不干  …. 所以这个交易就不会生效 … 
换到数据库上面来 …  我们可以把一系列的对数据库的操作装在一个 transaction()  交易里面  …  
如果说在执行这个交易里的数据操作的时候 … 出现了错误 …  这个交易就会取消 ….  
创建数据表
下面我们就去创建一个 transaction() …  在这个交易里，使用 CREATE TABLE 去创建一个数据表  …
// 创建数据表
db.transaction(); 
它的第一个参数是一个函数 … 这里我们使用一个匿名函数 .. 就是没有名字的函数  …   把 transaction() 方法返回的一个对象交给这个函数去处理 …. 
db.transaction(function(tx){}); 
tx 表示 transaction …  然后在这个函数里面，可以使用 tx 这个对象的 executeSql() 方法去执行 SQL …
db.transaction(function(tx) {
    tx.executeSql("CREATE TABLE IF NOT EXISTS note (id INTEGER PRIMARY KEY ASC, note_content TEXT, note_date TEXT)");
});
这里我们用一个 CREATE TABLE IF NOT EXISTS note …   意思就是 …  如果 note 这个数据表不存在的话，就会去创建一个叫做 note 的数据表 …
在后面的括号里，可以定义这个数据表里的栏 ..  这个表里有三个栏 …  id ， note_content , 还有 note_date …
id 是这个表的主键 … 它会自动增加 …   note_content 还有 note_date 都是文本类型的内容 …. 
保存一下 …   
在浏览器里，打开这个应用的页面 …  因为它在 Web 服务器的发布目录里面的 websql 这个目录下面 …
localhost/websql/index.html  … 可以打开这个应用的页面 …   浏览器会载入页面嵌入的 script.js 文件  …  执行里面的代码  …. 
这样就会去创建或者打开 noteapp 这个数据库 …  并且如果 note 数据表不存在的话，就会为我们去创建一个 … 
打开 Chrome 浏览器的开发者工具 …
Resources …. Web SQL ….  这里会有一个 noteapp 数据库 …   它的下面包含了一个 note 数据表 ….


02-03-插入数据到数据库里

这个视频我们要做的事情就是，把用户在这个文本框里输入的内容，在点击 提交 按钮以后，插入到 noteapp 这个数据库的 note 这个表里面  ….
我们要做的就是，去监听这个 提交 按钮的点击事件 … 发生点击事件以后 …  去获取到文本框里的内容 … 然后执行 SQL 的 INSERT INTO … 把获取到的内容插入到指定的数据表里面 … 
监听 提交 按钮 ..  要先找到这个按钮 … document.getElementById("submit-btn");  括号里的东西就是在 提交 按钮上定义的 ID　…  把找到的东西起个名字  …  var submitBtn = 
     // 获得 提交 按钮并监听它的点击事件
     var submitBtn = document.getElementById("submit-btn");
然后再输入 …  submitBtn.addEventListener("click", submitNote, false);
监听 提交 按钮的点击事件 …  这个事件发生以后 … 去调用 submitNote 这个函数 … 
submitNote()
下面我们再去定义这个 submitNote() …  
     // 提交笔记
     function submitNote(){}
然后在这个函数里，可以使用一个 transaction() 去执行一个数据的交易 … 在这个 transaction() 里面，使用交易的 executeSql() 去执行 INSERT INTO ，把指定的数据插入到指定的数据表里面。
    db.transaction(function(tx) {
        tx.executeSql("INSERT INTO note (note_content, note_date) VALUES (?, DATETIME('now', 'localtime'))",
                        [noteContent],
                        onSuccess, onError);
    });
INSERT INTO … 后面加上数据表的名称  … note ，然后在括号里，指定数据表里的栏 …  note_content .. 笔记的内容，还有 note_date … 记录笔记的时间 … 
VALUES 后面是要插入到这两个栏里面的具体的内容  …  第一个值是 笔记的内容 … 这里我们用一个 ? 号代替一下 …    然后在 executeSQL 的第二个参数里面，再去指定这个地方的具体的内容到底是什么..
这样做会更安全一些 ….   用逗号分隔一下 … 再去定义第二个值 …   也就是记录笔记的时间 …   SQLite 的 DATETIME() 函数可以生成当前的时间 …  
      DATETIME('now', 'localtime')
它可以插入用户当前的本地的时间 … 如果不指定这个 localtime … 会生成一个国际的标准时间 …
在最后，用逗号分隔一下 … 再去定义 executeSql 的第二个参数 ..    是一个数组 …   里面的东西可以去匹配在第一个参数里面使用 ? 号通配符的地方 …  也就是数组里面第一个值，匹配在前面的第一个 ? 号，第二个值，匹配第二个 ? 号 … 
这里，我们只用了一个 ? 号 … 所以这个数组里面第一个数据就会去匹配这个 ？ 号 …   可以定义一个 noteContent…
这个 note_content 里面的东西，一会儿，我们去让它从提交笔记的那个文本区域里面，动态的获得 … 
这里要注意的就是，在 SQL 声明里面，不去直接指定数据 …  而是使用这种 ? 号，加数组匹配的方式 …  另外在真正的应用里面，你应该去筛选或者过滤一下这些要放在数据库里的数据 … 
获得笔记内容
下面我们去获取到用户在表单里面输入的笔记内容 ..   先回到应用的页面看一下 …  （#index.html） … 
这个提交笔记的表单上 .. 有一个 note-form 的 ID  … 使用这个 ID 我们可以得到这个表单对象  …  然后使用 elements  …  加上这个表单里面的控件的名称  …  可以得到这个表单元素的值  … 
笔记的内容，会来自这个名字是 note-content 的这个文本区域 … 
回到 script.js ….  在最开始… 用一个 document.getElementById 获取到 note-form 这个表单 . …     把它命名为 noteForm …   这样在这个文件的其它的地方 …  直接使用 noteForm  就行了 … 
     // 获取到提交笔记的表单
    var noteForm = document.getElementById("note-form");
再找到 submitNote() …  在这里，我们去定义 noteContent  …   它的值是 noteForm 里面的 note-content 这个元素里的值 … 
     // 得到 note-form 表单里的 note-content 文本区域的值
     var noteContent = noteForm.elements["note-content"].value;
测试
现在，我们的应用就可以动态获取到用户提交的笔记内容，然后把它插入到 noteapp 这个数据库里面了  … 下面我们去试一下 …  先保存一下 …
打开浏览器 … 刷新 ….
在文本区域里输入点内容  ….   测试一下笔记应用 …   点击 提交 ...
打开 开发者工具 … Resources … Web SQL … noteapp  …. note … 
在这个数据表里，你可以看到刚才提交的笔记内容 ..


02-04-执行 SQL 成功与失败调用的函数

executeSql() 的第三个参数是 执行成功以后调用的函数 …  我们可以叫它 onSuccess …  第四个参数是执行失败的时候调用的函数  …   叫它 onError …  
这个视频我们来看一下他们的作用 …     在下面先去定义一下这两个函数  …    在执行成功的时候，让它在控制台上显示一个 成功 … 
在执行失败的时候 … 在控制台上输出 失败 这两个字儿 … 
     // 执行 SQL 成功以后
     function onSuccess() {
          console.log("成功！");
     }
     // 执行 SQL 失败以后
     function onError() {
          console.log("失败！");
     }
这样，如果点击 提交 按钮，调用 submitNote 这个函数 …  在它的 transaction() 里面，执行 executeSql … 如果执行成功 … 就会去调用 onSuccess …  
我们可以把 executeSql 的 transaction 对象 … 还有 执行以后的结果  … 交给这个成功以后调用的函数  … 
     onSuccess(tx, rs)
tx 表示 transaction … rs 代表 result … 结果  …   比如你执行了一条 SELECT … 选择了一些在数据库里的数据  … 那么这些被选择出来的数据就会包含在这个 结果 对象里面 ..
你可以使用循环，去把找到的东西显示出来 … 
同样…  我们可以把 transaction …  还有失败以后的错误信息，交给失败的时候调用的函数 ..
     onError(tx, e) 
这个错误对象的 message 属性，可以输出具体的错误信息 …    console.log("失败！" +  e.message);
下面我们可以去测试一下 …  不过想让这些成功和失败的信息显示在控制台上，我们还得去做一件事儿 … 因为点击 提交 按钮以后 … 会刷新页面 …
这样显示在控制台上的信息也会被刷新 …  所以，我们可以去掉这个 提交  按钮的默认的行为 　… 
把点击事件这个对象，传递给 submitNote() …  submitNote(event)
然后在它的里面，使用事件对象的 preventDefault() 方法 … 可以去掉默认的行为 …    这样点击 提交 按钮就不会刷新页面了  …  控制台上的信息也就会保留住 … 
     // 去掉 提交 按钮的默认行为
     e.preventDefault(); 
保存一下 …  然后打开浏览器 …   再打开控制台 … 
输入点内容 (天气挺好)  … 点击 提交   ….    执行成功的以后 … 在控制台上，会显示 成功  …
再回到 script.js …  我们可以再模拟一下失败的情况 …  比如把这个 INSERT INTO … 改成 INSERT ONTO …   保存 …
回到浏览器 … 刷新  …
输入内容 …   点击 提交 … 
控制台上会显示 失败 …  后面跟着一个具体的错误信息 …  提示说 … ONTO 这块不太对 …  
这些错误信息对调试应用程序会非常的有帮助   ….


02-05-显示数据表里的内容

这个视频我们去把数据表里的内容显示出来  …  选择数据表里的内容，可以使用 SELECT … 先去定义一个函数 … 
     // 选择数据表里的内容
     function loadNote() {}
在这个 loadNote() 函数里  …  添加一个 transaction() …    在这个交易里，去执行 SELECT ….
     // 选择数据表里的内容
     function loadNote() {
             db.transaction(function(tx) {
             tx.executeSql("SELECT * FROM note ORDER BY id DESC", [], displayNote, onError);
         });
     }
SELECT … 所有的栏 .. 这个 * 号就表示所有的栏 … FROM 从 note 这个数据表里 …  ORDER BY … 按什么来排序 …  按 id 栏， DESC … 降序排列 ..
executeSql() 第二个参数是一个数组，它是匹配 SQL 语句里面的 ? 号用的  ..  这行语句里面，没有使用通配符 … 所以，这里要留一个空白的数组 …
第三个参数是执行成功以后调用的函数  … 叫它 displayNote …  第四个参数是发生错误的时候调用的函数 … 可以使用之前我们创建的 onError 这个函数 …
displayNote()
下面，我们再去定义 displayNote() …   把交易还有结果这两个对象交给这个函数去处理 … 
     // 显示数据表里的内容
     function displayNote(tx, rs) {}
rs 表示结果 ..  这样我们可以使用 rs 这个对象的 rows 属性的 item  去输出找到的结果 …  使用 rows 属性的 length 属性，可以输出结果的数量  … 
把它们配合在一起，再加上一个循环，就能输出所在找到的结果 …
下面先去测试一下  …   我们可以先在控制台上试着输出这些内容 … 
console.log("找到的结果数量是：" + rs.rows.length); 
这里我们要输出的是找到的结果的数量  … 
然后在文档的上面，我们需要去调用并且执行 loadNote() 函数 …   这样才能执行 SELECT 语句去查询数据库 … 成功以后，才能继续去执行 displayNote() …
     // 载入并显示笔记
     loadNote();
保存 …  
回到浏览器的上面 …  打开控制台  … 然后再刷新一下 …
控制台上会显示，一共找到了 * 个结果  …  
我们再去看一下输出具体某个结果的方法  … (#script.js)
比如我们想输出第  2 个结果的笔记的 id，内容，还有时间  … 
     console.log("第 2 个结果" + "\n" +
                    "id：" + rs.rows.item(1).id + "\n" +
                    "内容：" + rs.rows.item(1).note_content + "\n" +
                   "时间：" + rs.rows.item(1).note_date
                  );
这里用到的是结果对象的 rows 属性的 item …  在 item 后面的括号里，可以指定结果的序号  … 
后面，再加上数据表里的 栏 的名称  …  比如想输出笔记的 id 栏的内容 …  后面就可以加上 id …  同样，想要输出笔记内容栏里的东西 … 这里应该就是 note_content …
完成以后保存一下  …  回到浏览器 … 刷新 …
在控制台上 … 会显示第1条结果里面的笔记的 id ，内容，还有时间 ...
在下面的视频里，我们可以使用 for 循环，把所有的结果都输出到页面上  …


02-06-在页面上循环输出查询到的结果

(#index.html) 这个视频我们把找到的笔记内容输出到 note-list 这个无序列表容器里 …  （#script.js）
找到显示笔记内容的 displayNote()  … 删除掉上个视频里输出内容到控制台上的代码  ..   
然后先去找到 note-list 这个容器  …    命名为 noteListContainer
     // 获取到用来显示笔记列表的容器并清空原有的内容
      var noteListContainer = document.getElementById("note-list");
再设置一下这个容器里的内容  …  设置成空白的  …
     noteListContainer.innerHTML = ""; 
这样每次执行显示笔记的函数的时候，都会先去把容器里的内容设置成空白 … 然后再去循环输出新的内容到这个容器里面  …  
循环的操作，可以使用 JavaScript 的 for 语句 … 
// 循环输出查询到的笔记
    for (var i = 0; i < rs.rows.length; i++)  {}
先定义一个循环用的计数器，小 i  … 每次循环的时候，判断一下它的值是不是小于 结果的数量  …  然后让小 i 的值加上 1  …  
rs.rows.item(i)  .. 就是本次循环的结果里的项目  … 在它后面加上 . 还有数据栏的名称   … 就能输出对应的栏的内容 … 
我们可以命名一下它 …  var noteEntry = rs.rows.item(i); 
再设置一下 noteListContainer 里的内容 … 
noteListContainer.innerHTML +=  
这个 += 就是把每次循环输出的内容添加到显示笔记内容的容器里面 …
            "<li class='list-group-item'>" +
                noteEntry.note_content +
                "<small class='pull-right note-date'>" +
                noteEntry.note_date +
                "</small>" +
            "</li>";
这段代码里，用了几个 Bootstrap 的样式 …    noteEntry.note_content 可以输出笔记的内容 … noteEntry.note_date .. 可以输出记录笔记的时间 …
最后我们在 onSuccess() 函数上面，去调用一下 loadNote()  …  
function onSuccess(tx, rs) {
     console.log("成功！");
     loadNote();
} 
保存一下 … 回到浏览器 …   刷新 ….  
在页面上，会显示出 note 数据表里的所有的笔记内容 …
再去添加一条笔记  ….   现在能显示笔记内容了   …  提交 …
在下面的笔记列表里  …  会显示出新添加的笔记内容 …


02-07-删除笔记内容

从数据表里删除数据，可以执行 DELETE  …   更新数据表里的内容，可以使用 UPDATE …  我们先去给输出的每条笔记的添加一个 删除按钮，还有一个 编辑按钮  … 
这两个按钮的样式是 bootstrap 的 button group 组件  …  所以 … 需要一些额外的标签 … 
               "<div class='btn-group btn-group-xs pull-right'>" +
                    "<button class='btn btn-default' onclick='deleteNote(" + noteEntry.id + ")'>" +
                    "删除" +
                    "</button>" +
                    "<button class='btn btn-default' onclick='editNote(" + noteEntry.id + ")'>" +
                    "编辑" +
                    "</button>" +
                "</div>" +
这里我们为 删除 这个按钮添加了一个 onlick 的属性 …  点击这个按钮，会去执行这个属性里面的东西 … 在这里，让它去执行 deleteNote() 函数 … 
一会儿，我们再去定义这个函数的功能 …  
在执行这个函数的时候 …  给它传递了一个参数 … 这个参数就是当前这个笔记内容的 id 号 …   使用这个笔记的 id 号，我们可以准确的删除当前这条笔记 … 
在 编辑 按钮上，也用到了类似的方法 …   不同的是，点击 编辑按钮，执行的是 editNote() 函数 … 
deleteNote()
下面去定义这两个函数 …  
// 删除笔记
function deleteNote(id) {}
// 编辑笔记
function editNote(id) {}
先去定义一下 deleteNote() 函数 …   这个函数可以接受一个参数 … 这个参数就是笔记的 id …   在它的里面，我们添加一个 transaction() … 然后在这个交易里，去执行 DELETE … 删除的操作 …   
这条 SQL 里面的 ? 号，是一个占位符 ..  后面的这个 id ，会去匹配这个占位符 ...
// 删除笔记
function deleteNote(id) {
    db.transaction(function(tx) {
        tx.executeSql("DELETE FROM note WHERE ID=?",
                        [id],
                        onSuccess, onError);
    });
}
保存 …. 回到浏览器 … 刷新 … 
现在点击笔记后面的这个删除按钮  … 会去执行 deleteNote() 函数 …   执行的时候，会用到当前这条笔记的 id 作为一个参数  …  
这样就可以从数据表里面删除掉当前这条笔记的内容了 …


02-08-编辑笔记内容

编辑笔记的流程大体是这样的 …  点击 编辑 按钮 …  把当前这条笔记的内容添加到页面的文本区域上面  …    然后 提交 按钮，会变成 更新 按钮 … 
点击 更新 .. 可以把修改之后的笔记内容更新到数据表里 …  下面，我们就一步一步的去实现这个编辑的功能 …
// 编辑笔记
function editNote(id) {
    db.readTransaction(function(tx) {
       tx.executeSql("SELECT * FROM note WHERE id=?", [id], function(tx, rs){
           noteForm.elements["note-content"].value = rs.rows.item(0).note_content;
           noteForm.elements["submit-btn"].value = "update";
           noteForm.elements["submit-btn"].innerHTML = "更新";
           noteForm.elements["note-id"].value = id;
       });
    });
}
打开 script.js  …  先去定义一下 editNote() 这个函数  …  这个函数有一个参数 … 就是 笔记的 id 号 … 
在函数里面，先添加一个 transaction() ，然后在里面找到对应 id 的笔记的内容 …  在这个 transaction() 里面，只有选择数据的动作 …  没有写入数据的动作 … 
所以，我们可以使用 readTransaction()  ...
tx.executeSql 执行 SQL …  "SELECT * FROM note WHERE id=?", [id]
使用一个 ? 号 … 用后面的 id 去匹配这个 ? 号 .. 
执行成功以后 .. 调用第三个参数  ..  这里我们直接使用一个匿名函数，去定义一下成功以后要做的事情 … 
把找到的笔记内容添加到提交笔记的文本区域里面 … 
重新再设置一下 提交 按钮的值  …  默认这个按钮的值是 submit …  点击编辑的时候 … 把它的值设置成 update … 
这样在点击这个按钮以后，我们可以先做一个判断 …  如果按钮的值是 submit .. 那么点击以后会提交新的笔记 … 如果是 update 的话 … 就去更新当前这条笔记的内容 … 
再设置一下按钮上的文字  …   改成 更新  .. 
最后想要更新笔记的话，我们得知道这条笔记的 id  …   这里我们用的是一个隐藏的文本框  … （index.html）
就是这个 note-id …  默认它的值是 0 …. （script.js）
用户点击 编辑 按钮以后，我们可以把用户想要编辑的笔记的 id ，作为这个隐藏的文本框的值  …  这样在 点击 更新 按钮以后 .. 可以利用这个文本框里的值  … 也就是 笔记 的 id  … 去更新对应的笔记的内容 … 
submitNote()
最后，我们得去再重新定义一下 submitNote() …  就是点击 提交 按钮以后做的事 …    用一个 if … else … 去判断一下 提交 按钮的值 … 
先得到这个按钮的值 …   然后再获取到那个隐藏的文本框里的值  .. 
     // 得到 提交 按钮的值
     var status = noteForm.elements["submit-btn"].value;
     // 得到隐藏文本框 note-id 里面的值
     var note_id = noteForm.elements["note-id"].value;
在下面，再输入一个 if …   如果  status  等于 submit …   就去执行插入笔记内容到数据库的动作 …  
else  … 如果提交按钮的值不是 submit … 那应该就是 update …  要做的事就是去更新笔记内容 … 
 // 判断 提交 按钮的状态
    if( status === "submit"){
        // 如果是 submit 那么就添加内容到数据表
        db.transaction(function(tx) {
            tx.executeSql("INSERT INTO note (note_content, note_date) VALUES (?, DATETIME('now', 'localtime'))",
                            [noteContent],
                            onSuccess, onError);
        });
    }else{
        // 如果是 update 那么就更新内容到数据表
        db.transaction(function(tx) {
            tx.executeSql("UPDATE note SET note_content = ? WHERE id=?",
                            [noteC﻿ontent, note_id],
                            onSuccess, onError);
        });
    }
注意这里的 note_content 笔记的内容，是来自 文本区域  …  后面的 note_id  … 是来自那个隐藏的文本框 … 
保存 …  回到浏览器 …  刷新 …. 
找到一条笔记 … 点击 编辑  …   
然后在文本区域里去编辑笔记的内容  …   提交按钮会变成更新按钮 … 点击 更新 … 可以把修改之后的内容更新到数据库里面 …


02-09-结合 Local Storage 创建不会丢数据的表单

下面介绍一个可以实时的记录用户输入的表单内容的方法，把内容存储到 Local Storage 里面，这样出现错误，掉线，刷新页面，都不会丢失用户已经在表单里面输入的东西  … 
关于 Local Storage 的使用方法，你可以参考宁皓网的 Web Storage 这个课程 … 
我们要做的就是去监听这个文本框的 keyup 事件 …  每次按键盘上的按键都会触发这个事件 ..    keyup 事件发生以后，去获取文本区域里的内容，再把这个内容存储到 Local Storage 里面   … 
先去找到 note-content ，也就是这个文本区域 .. .  
然后再去监听它的 keyup 事件 …   事件发生以后 … 调用第二个参数里的函数  …  这里我们可以直接使用一个匿名函数  … 
这个函数做的事就是找到文本区域里的内容，存储到 Local Storage 里面 …    这个数据的值的名称叫做 note  … 
// 实时设置 Local Storage 存储用户输入的内容
var noteFormText = noteForm.elements["note-content"];
noteFormText.addEventListener("keyup",
     function(){
       localStorage.setItem("note", noteForm.elements["note-content"].value)
     });
下面我们可以再把 Local Storage 里面的这个 note 的值，恢复到 文本区域 里面 …    这样即使刷新页面 …  也不会丢失用户已经输入的内容了 … 
// 将 Local Storage 里的内容恢复到文本区域上
noteForm.elements["note-content"].value = localStorage.getItem("note");
保存 …  回到浏览器 … 刷新 …
打开 Chrome 的开发者工具 … Resources … Local Storage … 
然后在文本区域里面输入一些内容  ….   这里输入的内容可以实时记录到 Local Storage 里面 … 
你会发现，内容会实时的记录到 Local Storage 里面 … 
刷新一下页面 .. 
应用会从 Local Storage 里面读取 Local Storage 里面的数据，恢复到文本区域上 … 所以﻿刚才输入的内容仍然可以显示在这个文本区域上面 …


