00-00-课程介绍

File API 可以让我们使用文件选择表单或者拖放的方式，选择一些文件，我们可以访问所选择的文件的名称，类型，大小，最近修改的日期 …    然后使用 FileReader 可以去读取选择的这些文件的内容 … 
在这个课程里，我们先去看看怎么样访问用户选择的文件，然后再学习一下怎么样把用户选择的文件的列表输出到页面指定的位置上 … 文件的名称，类型，大小，还有修改日期  .. 
除了使用选择文件表单去选择文件，我们还可以通过直接拖放的方式来选择文件...
给选择的文件创建一个临时的路径，可以直接在应用里面使用这个路径来引用文件 …  
最后我们再学一下使用 FileReader 去读取文件里面的内容 … 再去了解一下 FileReader 的事件 …  一起使用 prograss 事件，为文件阅读器创建一个可以实时显示文件读取进度的进度条 … 
我是王皓，下面我们就一起去学习使用 FileAPI  …


01-01-Filelist - 文件列表

Filelist 表示的就是文件对象的列表。 使用 file 类型的 input 表单元素 ，也就是选择文件表单元素...   或者 drag and drop，拖放的方式 ，可以去引用一个文件的列表。
在这个文档里面有一个表单，叫做 upload，它的里面只有一个表单元素，fileselect，它是一个 file 类型的 input 元素，用户可以使用它去选择存储在用户本地上的文件。
在这个元素上，我添加了一个 multiple 的属性。这样这个选择文件的表单元素可以同时选择多个文件。
你可以把这个文档放在你的 Web 服务器上，然后用浏览器打开这个文件。
下面我们先在控制台上演示一下 …  command + alt + J
输入 document.forms … 可以得到当前这个文档里面的所有的表单 … 
这些表单会放在一个数组里面 … 因为这个文档里面只有一个表单  … 所以这个上传文件的表单是这个数组里面的唯一的表单  … 
document.forms 
访问这个表单可以使用表单的名称 … 或者表单在数组里面的索引号  … 第一个表单的索引号是 0 … 然后往下排 …
document.forms["upload"] 
想要得到表单里面的表单元素 … 可以这样 …  
document.forms["upload"]["fileselect"] 
因为表单里面的所有的元素也会在一个数组里 … 所以这里使用元素的名称 … 可以得到这个表单元素  …  这里我们得到的就是名称是 fileselect 的表单元素，也就是这个用户选择文件的表单元素。
使用这个 fileselect 选择的文件，会放在 files 这个对象里面  …  这个对象就是 filelist …  文件的列表。
document.forms["upload"]["fileselect"].files 
filelist 有一个 length 属性，还有一个 item 方法 …  length 属性就是文件列表里的文件的数量  …  因为还没有选择文件，所以这个 length 属性的值是 0 …   
使用 item() 方法，加上文件的索引号，可以得到在文件列表里的对应的文件 … 
点击 选择文件  …  浏览到本地上的一个文件 ..    现在文件的列表里，就会包含刚才所选择的文件了 …  （document.forms["upload"]["fileselect"].files）
现在文件列表里面有一个文件 …  文件的索引号是从 0 开始的 …  然后是代表这个文件的 File … 
file 类型的 input 也可以选择多个文件  ..    选择文件  …   这次我们多选择几个文件（#3） … 
document.forms["upload"]["fileselect"].files
现在文件列表里面会有三个文件， 文件 0 … 文件  1 …. 文件  2 …   我们可以去访问一下这个文件列表的 length 属性 ...  
得到的结果是 3 ...  表示这个文件列表里，现在包含三个文件 ... 
document.forms["upload"]["fileselect"].files.length


01-02-File - 文件

使用文件的索引号，或者文件列表的 item 方法，可以访问文件列表里面的对应的文件  …  选择文件  ... 选择几个在本地的文件 ...
如果想要得到刚才选择的这个文件列表里的第一个文件，可以这样  … 
document.forms["upload"]["fileselect"].files[0] 
因为索引号是从零开始的 … 所以第一个文件的索引号是零 …
使用 filelist 的 item() 方法，加上这个索引号，同样可以得到对应的文件对象  … 
document.forms["upload"]["fileselect"].files.item(0)
这里给我们返回来的，就是是列表里面的第一个文件对象 …  文件对象有一些属性 …    lastModifiedDate … 文件最近修改的日期  … name ，文件的名称 … size .. 文件的大小等等  … 
访问这些属性的值可以使用一个点，后面再加上属性的名称  …  比如得到列表里的第一个文件的文件名 … 可以这样 ..
document.forms["upload"]["fileselect"].files.item(0).name 
想知道这个文件的类型 …  可以去访问它的 type 属性 ... 
document.forms["upload"]["fileselect"].files.item(0).type 
返回的是 image/jpeg ... 说明这个文件是一个 jpg 类型的图像文件。
查看这个文件的最近的修改日期 … 可以使用 lastModifiedDate 这个属性  ... 
document.forms["upload"]["fileselect"].files.item(0).lastModifiedDate  
最后还有一个 size 属性 .. . 它里面是这个文件的大小 ... 
document.forms["upload"]["fileselect"].files.item(0).size
注意这个大小的单位是字节 ...


01-03-把选择的文件显示在页面上 #1

在这个文件里面，我添加了一个 <ul> 标签，上面有一个 .list-group 类 … 下面，我们去把用户使用 选择文件 表单元素所选择的文件的列表，显示在这个拥有 .list-group 类的 <ul> 标签里面 。
（#script.js）
这里我们要做的就是，先去监听选择文件表单元素的 change 事件 … 也就是如果这个表单元素发生了改变，比如选择了文件 … 就会触发这个 change 事件 .. 
然后当这个事件发生以后，我们可以在这个事件返回的对象里面，获取到所选择的文件列表 … 然后再把这个文件列表里面的文件信息显示在那个 .list-group 类的 <ul> 标签里面。
代码
先去获取到 .list-group 类所在的元素，另外还有 选择文件 这个表单元素 …   找到以后，给它们起个名字 …   listGroup 就是用来显示文件列表用的那个容器 … 这里我获取到它的方法使用了 querySelector ..  在括号，可以使用类似 CSS 选择器的形式去选择页面上的元素。
这个 querySelector 会返回找到的第一个结果 …  也就是如果文档里面包含多个 .list-group 这个类 … 它只会返回找到的第一个 .list-group … 
listGroup 下面的 fileSelect 是选择文件的表单元素 …   同时定义多个变量 … 可以只使用一个 var 关键词 ...   不同的变量之间可以使用逗号分隔开 … 
 var listGroup = document.querySelector(".list-group"),
         fileSelect = document.forms["upload"]["fileselect"]; 
监听
下面，我们再去监听 fileSelect 的 change 事件 …   这个事件发生以后 … 去执行 displayFileInfo() 函数 … 再去定义一下这个函数 ...
     // 监听 选择文件 表单元素的 change 事件
     fileSelect.addEventListener("change", displayFileInfo, false); 
displayFileInfo()
     // 当 选择文件 表单元素的 change 事件发生以后所做的事
     function displayFileInfo(event) {} 
我们把事件返回来的事件对象传递给这个函数 …  在这个对象里面会包含所选择的文件列表  ..   下面，我们使用一个 console.log() 去把这个事件对象输出到控制台上看一下 ..
  console.log(event)
保存 … 打开浏览器 …  刷新 …    打开控制台 … 
点击  选择文件 …   找到本地电脑上的几个文件  …     这个选择文件元素发生了变化  ... 也就会去触发一个 change 事件 … 
在控制台上，会输出这个事件返回的对象...   （#打开）
在它的 target 属性里面，  可以找到 files … 也就是选择的文件列表 … 在下面的视频里，我们再去使用一个循环把列表里的内容输出到页面上 …


01-04-把选择的文件显示在页面上 #2

先注释掉这个 console.log() …     首先我们可以给事件对象里的文件列表起个名字 ..  这样在后面的代码里使用这个列表的时候会更容易一些 …
var file = event.target.files; 
然后再用一个 for 循环输出文件相关的信息 … 
for (i = 0; i < file.length; i ++ ) {} 
大括号里是每一次循环要做的事儿 …   首先在文档上去创建一个 <li> 标签 … 给这个标签添加一个指定的 css 类 … 再去为这个 <li> 标签添加内容，内容就是文件的名称，类型，大小，还有最近的修改日期 …
最后再把这个<li> 标签还有它的内容追加到 listGroup 这个容器里面 … 
创建元素可以使用 createElement() … 括号里是要创建的元素的名称 ..    给这个元素起个名字 ..
               // 在文档中创建一个 li 标签
               var li = document.createElement("li"); 
然后再去给它添加一个 css 类 … 可以使用 classList.add() …   要添加的类的名称是 list-group-item … 这个类可以为列表添加一些额外的样式 … 这些样式都是来自 Bootstrap … 
               // 为 li 标签添加一个类
               li.classList.add("list-group-item"); 
再去给这个 <li> 标签添加内容 …  我们可以去创建一个文字节点 …  再把它追加到 <li> 标签里面 ..    文档都是由不同的节点组成的 …  常用的节点类型比如元素节点，元素的属性节点，元素里面的文字也是一种节点类型 … 
创建文字节点，可以使用 createTextNode() …
var content = document.createTextNode() …  
这个文字节点的内容就是文件的名称，类型，大小，还有修改日期 … 
file[i].name + ' ' +
file[i].size + ' ' +
file[i].type + ' ' +
file[i].lastModifiedDate
然后再把这个创建的文本节点添加到 <li> 标签里面 …  这里我们用的是 appendChild()
               // 把文字内容添加到 li 标签里面
               li.appendChild(content); 
最后，再把整个 <li> 标签还有它里面的内容追加到 listGroup 里面 …
               // 把 li 标签添加到 listGroup 里面
               listGroup.appendChild(li); 
保存 …  
回到浏览器  … 刷新一下 … 
然后点击 选择文件  … 找到几个在本地电脑上面的文件  … 打开 …    在页面上，会直接显示出所选择的文件列表 …. 
这个列表里显示的文件的大小还有最近修改日期的都不太友好  …  在下面的视频里，我们再去改进一下。


01-05-把选择的文件显示在页面上 #3

文件里面的 size 属性的值的单位是字节 …   把它转换成兆 …   1 兆等于 1024 KB，1 KB 等于 1024 个字节 ..  所以可以让它去除以 1024 … 会变成 KB ..   然后再除以 1024 就会变成兆了 … 
不过这个运算的结果一定会有很多的小数 …    使用 Math.round() 方法，可以把它四舍五入一下 … 
这样只会保留结果的整数部分 …  如果仍然想保留两位小数 …   可以让这个结果先乘以 100 …  四舍五入以后 ..   再让它去除以 100 …  这样就会保留两位小数 … 
想保留一位小数的话，可以把结果乘以 10 ，四舍五入以后再让它除以 10 。
在它的后面，先加上一个空格 ….  然后是单位的名称 …  MB …  表示兆 ...  
    Math.round(file[i].size / 1024 / 1024 * 100) / 100 + ' ' + 'MB' + ' ' + 
下面再去处理一下日期 …  我们可以让它本地化一下 …  可以使用 toLocaleDateString() 这个方法 … 
    file[i].lastModifiedDate.toLocaleDateString()); 
保存 ..  再回到浏览器 …   刷新 … 
选择文件  …   打开 …
现在，这个文件列表里面的文件的大小，还有最近修改的日期会更容易明白一些。


01-06-拖放选择文件

除了使用 file 类型的 input 选择文件以外，File API 还支持使用 Drag and Drop ，拖放的方式来选择文件 …  也就是用户可以直接把本地电脑上的文件拖放到你的应用界面上 ...  
要做的就是，先在页面上去设置一个可以用来拖放文件的区域，然后去监听这个区域的 drop 事件  … 也就是放下的事件 …  这个事件发生以后，在拖放区域里的文件列表，会包含在这个事件对象的 dataTransfer 属性里面 … 
然后使用循环，可以输出这个列表里的东西  …  
(#script.js)
先设置一下拖放区域里的提示文字 … 
     // 设置提示内容
     listGroup.innerHTML = "<p class='hint'>拖放文件到这里</p>”;
然后我们再去监听拖放的两个事件，drop ，还有 dragover …  
     // 监听 drop 与 dragover 事件
    listGroup.addEventListener("drop", displayFileInfo);
    listGroup.addEventListener("dragover", onDragOver); 
拖动对象并且悬停在拖放区域的时候，会触发 dragover 事件 … 这个事件发生以后，让应用去执行 onDragOver 这个函数 …
再去定义一下这个函数 … 
     function onDragOver(event) {
          event.stopPropagation();
          event.preventDefault();
     } 
让它做的事就是，停止传播事件 ..  还有防止默认的行为 …   
drop 事件会在把对象放入拖放区域的时候触发 …  发生的时候，让应用去执行 displayFileInfo …    在前面的视频里我们已经定义了这个函数 … 
首先设置一下 listGroup 里面的内容 …   把它设置成空白 …    然后再使用事件的 stopPropagation()，还有 preventDefault() …  不然把文件拖放到浏览器的页面上，默认会打开文件 … 
使用 event 的这两个方法，可以防止这些默认的行为 … 
          listGroup.innerHTML = "";
          event.stopPropagation();
          event.preventDefault(); 
使用 file 类型的 input 选择文件的时候　..   change 事件发生以后，文件的列表会在 target 里面 …  不过在使用 drag and drop 的时候，事件发生以后，这个文件列表会在 dataTransfer 这个对象里面 …. 
所以，这里，我们可以用一个 或 ..  两条竖线表示 或 …  
event.dataTransfer.files 
这样，如果用 input 选择文件的事 .. file 就是 event.target.files … 如果用拖放的方法选择文件的话 …  file 就是  event.dataTransfer.files;
下面的循环是一样的 … 可以输出使用这两种方法选择的文件的信息 … 
保存 … 
回到浏览器 ….   打开一个文件夹 …   选中一些文件 … .
把它们拖放到这个拖放的区域里面 … 
在这个区域里，会直接显示出所拖放进来的文件的列表  … 
再试一下 选择文件  ….   
同样可以在这个 listGroup 里面，显示出选择的文件列表 ….


01-07-选择文件按钮的样式

File 类型的 input 元素很难去为它添加样式，就是这个选择文件的表单元素 …  不过还是有一些方法可以试一下 …  我们不直接去为它添加样式 .. 而是使用一个按钮代替它 … 
这个替代的按钮可以使用 <button> 标签或者 <a> 标签 …  然后把真正的选择文件的表单元素隐藏起来 ..   下面我们使用一个 <a> 标签的按钮作为这个选择文件按钮的替身　… 
<a id="selectbtn" href="#" class="btn btn-primary ">选择文件</a> 
在上面使用了两个来自 Bootstrap 的 CSS 类 … 它们可以把这个 <a> 标签变成按钮的样式 ..  另外在上面我又定义了一个 selectbtn 这个 ID …
下面再去把这个选择文件的按钮隐藏起来 …   style=“display:none” ...
然后我们可以使用点 JavaScript …  去监听替身按钮的点击事件 ..   事件发生以后，去执行 选择文件 的 click() 方法 … 
这样点击这个 <a> 标签的替身，就相当于是点击了 选择文件 … 
（#fileapi.js）
先找到替身按钮 …   然后去监听它的 click ，点击事件 …  事件发生以后，去执行一个函数  …  这个函数做的事儿就是去执行 选择文件 的 click() 方法 … 
在前面的视频里，我们已经把找到的 选择文件  元素命名为了 fileSelect …   所以这里我们直接使用它 …
最后再防止 替身按钮，也就是 <a> 标签的点击事件的默认的行为 … 
     // 选择按钮
     var selectbtn = document.getElementById("selectbtn");
     selectbtn.addEventListener("click", function(event){
          fileSelect.click();
          event.preventDefault();
     }); 
保存 … 在浏览器里预览一下 … 
现在你看到的其实是用 <a> 标签做的选择文件的按钮 …  真正的选择文件按钮已经隐藏起来了 … 
点击这个按钮  …   同样可以找到选择文件的窗口来选择文件  …


01-08-显示文件数量的小徽章

下面我们再去添加一个可以显示选择的文件数量的小徽章 …  （# … html）
在这个替身按钮的右边，去添加一个小徽章 …   这里我用的是 Bootstrap 的 badge 类 … 它可以让这个 <span> 标签变成小徽章的样式 …  另外还有一个 pull-right …  它可以让这个小徽章靠右显示  … 
<span class="badge pull-right"></span> 
然后我们可以把选择的文件的数量作为这个 <span> 标签里面的内容 …  （# fileapi.js）
在这个 displayFileInfo() 函数里面 … 添加一行代码  ..   先找到小徽章元素 ….    然后设置它的 innerHTML … 元素里面的内容 … 
内容是 file 的 length 属性 …    
          // 显示文件数的小徽章
          document.querySelector(".badge").innerHTML = file.length; 
保存 … 回到浏览器 .  刷新 ..
选择文件  … 找到一些文件  …  打开 … 
现在，使用 选择文件 这个替身按钮可以选择文件 …   所选的文件的数量会显示在这个小徽章里面  …


02-01-文件的地址

我们可以给所选择的文件去创建一个文件的URL，也就是文件的地址 …   这个地址可以指向对应的文件  … 有了个地址你可以对文件做一些操作 …
比如为图像文件创建一个地址，这样在页面上，可以使用这个地址把图像显示出来。
为文件创建地址，我们要用到的是 createObjectURL … 它可以创建 blob 类型的地址  … blob 就是数据块 …  文件其实就是带名字的 blob … 
blob 类型的地址跟 data 类型的地址，还有 file 类型的地址不太一样 … 
data 类型的地址是会对数据进行编码处理  …  file 类型的地址可以直接引用在本地电脑上的文件  …  在应用里面直接使用 file 类型的地址会引发一些安全的问题 … 
blob 类型的地址更像是 http 类型的地址 ..


02-02-创建与吊销指向文件的地址

下面，我们来看一下使用 createObjectURL() 给文件创建地址的方法 ….  
先去选择一个图像文件 ...    然后在控制台上，先获取到这个选择的文件  …  给它个名字 …  var file = 
var file = document.forms["upload"]["fileselect"].files[0]; 
下面，我们可以把这个 file 作为 createObjectURL() 的一个参数  …   createObjectURL()  这个方法属于 windows 对象下面的 URL 这个对象  … 
这样就会为这个文件生成一个 URL … 我们可以给这个 URL 也起个名字 …  
var url = window.URL.createObjectURL(file); 
输入 url  …  在控制台上会显示创建的这个地址  … 
复制这个地址 … 然后新建一个浏览标签  … 把地址粘贴到地址栏上 … 
浏览器会打开这个地址引用的文件  …  也就是我们刚才选择的图片文件  … 
每次使用 createObjectURL() 这个方法都会为文件生成不同的地址 … 
下面我们再去为同样的文件创建一个地址 …   给它起个不一样的名字 … 
var url1 = window.URL.createObjectURL(file);  
输入 url1 .. 再复制一下这个地址 ..    新建浏览器标签  …  粘贴复制的地址 … 
你会看到，这两个地址会指向同一个文件   ….   打开之前的标签 .. 刷新 …   之前生成的地址仍然会指向同一个文件  … 
吊销地址
如果现在我们关掉这个页面的话 …  刚才创建的这两个地址都会被吊销 ..  另外还有一个手工吊销生成的地址的方法 …  可以使用 …  revokeObjectURL()  … 
比如我们想要吊销 url 这个地址 …  
revokeObjectURL()  同样属于 window 对象里面的 URL 对象 …   然后在括号里指定要吊销的地址  … 
window.URL.revokeObjectURL(url)
手工的去吊销生成的地址可以防止一些内存管理的问题 … 
这样 url 这个地址就不会有效了 …   打开用 url  这个浏览器标签 …   刷新 … 
这个地址已经不再指向文件 了 … 因为我们手工的吊销了这个地址  … 
再打开 url1 这个浏览器标签  ….   刷新  …  这个地址仍然有效  …. 
下面我们可以关掉这个可以选择文件的页面 ..   
然后再去刷新一下 url1 这个浏览器标签 … 
现在，这个地址也会自动被吊销了 …


02-03-在页面上显示所选择的图像文件

在页面上循环显示所选择的图片文件，我们可以使用 createObjectURL() 为选择的每一个图像文件创建一个地址… 再把这个地址作为 <img> 标签的 src  属性的值 ..  
在图像完成显示以后，立即吊销创建的指向在这个图像的地址 … 
我们可以直接使用之前在显示文件列表的代码   …  要修改的地方就是循环里面的代码  … 
先去在文档上创建一个用来显示图像的 img 标签   …    var img = document.createElement("img”), 
然后再给所选择的文件创建一个地址 …   url = window.URL.createObjectURL(file[i]); 
再去设置一下<img> 标签的 src 属性 …    把给文件创建的 url 作为 src 属性的值   …   img.src = url;
在页面上载入图像以后，可以吊销创建的 url  .. 
               img.onload = function() {
                    window.URL.revokeObjectURL(this.src);
               }
这里的 this ，表示的就是 img 这个对象  .. 
下面再去给图像添加一个 css 类 …   img.classList.add("thumbnail");      这个类可以给图像添加一些额外的样式 .. 
下面我们再去创建一个图像的容器，再把图像放在这个容器里面  … 
      var imgContainer = document.createElement('div');
      imgContainer.appendChild(img);
最后再把包含图像的容器追加到用来显示图像显示的容器里面  … 
       listGroup.appendChild(thumbnailContainer); 
保存  …   打开浏览器 　…   选择文件  … 找到一些图像 …  打开 …
在页面上，会使用显示出所有选择的图像 …   图像的路径是我们使用 createObjectURL() 临时创建的 …   图像显示出来以后 … 会自动 吊销创建的路径  ..


03-01-FileReader - 文件阅读器

使用文件选择表单或者直接拖放获取到的文件以后，我们可以使用 FileReader 去读取文件的内容，先要新建一个文件阅读器，用这个阅读器的某个方法去读文件，完成以后，结果会包含在阅读器对象里面，或者相应的事件的对象里面。
下面我们还是在控制台上来了解一下这个文件阅读器 …  
先去选择一个文件类型的文件  …. 
打开控制台 …  获取到这个文件   … var file = document.forms["upload"]["fileselect"].files[0];
现在 file 里面就会包含选择的文件 …   然后去新建一个文件阅读器 ..  可以使用 FileReader 的结构函数去做这件事 ..
var reader = new FileReader(); 
这个 reader 就是我们创建的文件阅读器 …    输入 reader  … 看一个它的构造 …
这里的 onloadend ， onerror ，onabort ，onload 这些属性会在对应的事件发生以后去执行 …     
使用这个阅读器去读文件，成功以后 …  结果会包含在 result 里面 …   
阅读器读文件的方法一共有四种 …  read.readAs … （会出现提示）
readAsArrayBuffer  …  readAsBinaryString … readAsDataURL，readAsText … 
不同的方法可以用不同的方式去读文件 …  比如 readAsDataURL  ..  它会把文件编码，用 base 64 的编码形式表示文件  …   如果用它读取图像文件的话 …  读取的结果就是用 base 64 编码的图像 …  也就是会把图像转换成一大串字符 ….  直接把它放在 <img> 标签的 src 属性里面，可以显示这个图像 …  不过如果你读取的图像文件很大的话，编码生成的字符串也会特别长 ..  
下面我们可以使用 readAsText 这个方法，用文本的形式去读文件  …   括号里加上要读的文件 … 
reader.readAsText(file);  
再去看一下 reader  ….
你会发现，readyState … 状态现在是 2，表示已经读完了这个文件   …  这个 readyState 状态如果是 1 的话表示正在读文件  … 0 表示还没有开始读文件 ..
然后在 result 里面 .. 就是读出来的结果  …  这里显示的文字就是选择的文本文件里面的内容 …
reader.result … ﻿
不过通常我们不直接去访问阅读器里的这个 result  … 而是去监听阅读的事件 …  比如读完文件以后，会触发 load 事件 … 
这个事件发生以后，在返回的事件对象里面的 target 下面的 result ，会包含读出来的结果。这样做会更安全一些  ..  因为如果直接去访问阅读器的 result ，很可能还没读完文件  ….


03-02-用文本的形式读取文件

这个视频我们通过一个实例来演示一下使用 readAsText 方法去读文件  … 选择一个文本文件以后，会直接把读取到的内容输出到页面上 … 
这里我用到的代码跟之前介绍文件列表的代码差不多，你可以课程的资料包里找到。如果你看到之前的视频，你应该知道它们都是做啥用的。
displayFileInfo() 
在这个用来显示文件信息的 displayFileInfo() 函数里面，我们先去新建一个文件阅读器 …   可以在循环之外去创建 …  这样在循环的里面，可以一直使用这个阅读器去读取用户选择的文件 …
// 新建文件阅读器
 var reader = new FileReader(); 
在循环里面，使用这个 reader 去读文件  …  reader.readAsText(file[i]);
下面我们可以去监听阅读器的 load 事件 … 这个事件在读完文件以后发生 …    发生以后，会执行阅读器的 onload …  我们可以直接设置 onload 做的事 …  
reader.onload = function(event) {} 
这里我用了一个匿名函数 …  把事件返回的对象交给这个函数 …     这个事件对象的 target 里的 result 里面，会包含读取的文件内容 … 
在列表内容的 createTextNode 里面，直接使用读取到的文件内容 … 
var content = document.createTextNode(event.target.result); 
保存 …  
回到浏览器，刷新 …  然后 浏览文件 … 找到一个文本类型的文件 …  打开 … 
在页面上，会直接输出读取到的文件里面的内容 …


03-03-FileReader 事件

用 FileReader 在读取文件的一开始会触发一个 loadstart 事件 ..  读取文件进行的时候，会触发 progress 事件 …   下面我们学习一下使用文件阅读器的这些事件 … 
progress 这个事件会重复的发生 … 每次发生这个事件，事件返回的对象里面会包含一些有用的信息 .. 比如文件的数据是多少，已经读取的数据是多少 .. 
根据这些数据 ，我们可以在页面上显示一个文件读取的进度条 …   不过在这之前，我们还是先来了解一下这个事件 .. 
这里我们可以使用 progress 事件的事件处理器 onprogress  …
reader.onprogress = function(event){}  
把事件返回的对象交给这个函数去处理一下 …     下面再去定义一下这个事件发生的时候去做的事 …   我们可以先把这个事件对象输出到控制台上看看 …
console.log(event)
保存 …   回到浏览器  … 刷新 …    打开控制台 ..  然后选择文件 …  找一个大一些的文件 …   打开 … 
在控制台上，你会看到，progress 事件发生了很多次 … 
这个事件对象里的 total 属性是选择的文件的大小 ..   loaded 属性里面是当前这个 progress 事件发生的时候，所读取的数据 … 
使用这些数据，通过简单的算术可以得到当前的读取的进度的百分比 … 
可以使用 loaded 除以 total，再乘以 100  …  
Math.round( event.loaded / event.total * 100 )
算出的结果可以四舍五入一下，只保留整数  …    把最终算出来的结果起个名字  … 
var progressStatus =  
后面可以再加上一个百分号 … 
var progressStatus =  Math.round(evt.loaded / evt.total * 100) + "%" ; 
然后把这个 progressStatus 输出到控制台上  …    保存 ..
回到浏览器 … 刷新 … 浏览文件  …  打开 … 
会显示出每次发生 progress 事件的时候，文件读取进度的百分比  …  使用这个百分比再加上点 HTML 和 CSS ，我们可以在页面上显示一个友好的进度条 …
在下面视频里我们再去看一下创建一个真正实用的进度条 …


03-04-Bootstrap 的进度条

前一个视频我们算出了每次发生 progress 事件的时候，文件读取进度的百分比，这个视频我们利用这个百分比去创建一个真正的进度条  …  我们可以使用 Bootstrap 的 Progress bars 这个组件   … 
你可以选择进度条的 颜色  ..  样式 …  这里我们要用到的是有动画效果的进度条 …   想在页面上显示这个进度条，首先要确定页面已经嵌入了 Bootstrap 的样式表 … 
这个进度条需要一些 HTML 的标签，最外面是一个 <div> 标签 ，上面要添加一些 css 类 … progress 是基本的样式 … progress-striped 可以加点条纹在进度条上 … 最后这个 active 可以让进度条动起来 … 
在这个 <div> 标签的里面，还需要一个 <div> 标签 … 并且上面需要添加一个 progress-bar 这个 css 类 …   这个 progress-bar 就是显示进度的地方 …
控制进度显示的是 style 属性里面的这个 width 的值  …   修改它的值可以改变进度条显示的进度 … 
在我们的代码里，首先我们可以在文档上创建这些需要的元素 …  也就是这个 Progress bar 组件需要的代码  … 然后在 FileReader 的 loadstart 事件发生的时候 …
可以把这个进度条显示到页面上指定的位置上  … 
每次发生 progress 事件的时候 …  可以去设置 progress-bar 这个元素的 style 属性  …  这个属性的值就是我们通过计算，算出来的文件读取的进度....


03-05-用进度条显示文件读取进度

在这个文档里，我添加了一个 <div> 标签 .. 上面定义了一个 ID 是 eventstatus …  我们可以把进度条放在这个容器里面 … 先找到用来显示进度条的容器  …    
          // 找到显示事件状态的容器
          var eventStatus = document.getElementById("eventstatus");
然后再去创建进度条需要的元素 …   先创建一个 <div> 标签  … 叫它 progress   …  给它添加一些 css 类  …   然后再去创建一个 <div> 标签  ，它的名字是 progressBar …  再给它添加一个 progress-bar 的 css 类 … 
再把这个 <div> 标签添加到之前创建的 <div> 标签里面 … 
          // 进度显示器需要的元素
          var progress = document.createElement("div");
             progress.classList.add("progress", "progress-striped", "active");
             var progressBar = document.createElement("div");
             progressBar.classList.add("progress-bar");
             progress.appendChild(progressBar); 
下面再去创建事件处理器 …  
loadstart  事件发生以后，会去执行 onloadstart 这个事件处理器 … 
reader.onloadstart = function(){
                      eventStatus.appendChild(progress);
                  }; 
loadstart 事件发生以后，也就是开始开始读文件的时候 …    我们把刚才创建的 progress 这个元素添加到 eventStatus 这个容器里面 …. 
然后再去处理一下 onprogress 这个事件处理器 … 每次发生 progress 事件的时候，会调用它 … 
调用的时候，我们让它去设置一下 progressBar 的 style 属性  …  设置元素的属性，可以使用 setAttribute()   ..    第一个参数是属性的名称  … 第二个参数是属性的值  .. 属性的值，我们使用之前计算出来的文件读取进度的百分比 … 
progressBar.setAttribute("style", progressStatus); 
再修改一下这个 progressStatus  ..  在百分比的前面，再加上一个 widh:  ...
var progressStatus = "width:" + Math.round(evt.loaded / evt.total * 100) + "%" ; 
最后我们需要再判断一下文件读取的状态 . … 如果读取完成了　… 就用不到这个进度条了 … 所以可以把 eventStatus 里面的内容设置成空白的 … 
判断一下 readyState 的值是否等于 2  ….  如果等于 2，表示已经完成了读取  ….
if(evt.target.readyState === 2){
    eventStatus.innerHTML = "";
 } 
保存  …  再去浏览器里预览一下 … 
选择文件   …  找一个大一些的文件   …   打开  …  
你会看到 … 在页面上，会使用一个进度条 … 实时的显示文件当前的读取进度 ….


