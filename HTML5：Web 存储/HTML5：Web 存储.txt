00-00-课程介绍

在这个课程里，我们一起学一下 Web Storage
Web Storage 可以在客户的浏览器上存储一些内容，比如用户的设置，最近浏览网站的时间，没有写完的文章等等 … 然后在我们的应用里面，可以利用这些内容 … 
首先我们介绍一下怎么样在客户的浏览器上，去设置并且存储 Web Storage 的内容 …   获取，还有移除这些内容的方法 … 
再去了解一下 Storage 事件 …  还有存储数据的类型的转换。


00-01-Web Storage

Web Storage 可以让应用在用户的本地上存储一些内容，这些内容是成对出现的，内容的名称，还有内容的具体的值 … 使用 setItem ，可以去设置存储的内容，然后用 getItem 可以获取到存储的具体的内容 … 
Web Storage 分成两个部分 …  Local Storage ，还有 Session Storage ，他们的用法基本上是一样的，有点不同的是，Local Storage  存储的东西在关掉浏览器的时候不会消失 … 
Session Storage 的数据在关掉浏览器的时候，会自动清除掉 …


01-01-Local Storage - 在浏览器中存储数据

在这个视频里我们一起来看一下怎么样在应用去设置 Local Storage ，
这里我们在控制台会上去测试一下 Local Storage ...  我们可以先去创建一个空白的网页 ... 然后把它放在 Web 服务器里面，你可以把它放在本地搭建的服务器环境里。 然后再用浏览器打开这个空白的网页 ... 
设置 Local Storage
打开控制台 ... 在这里我们可以直接输入代码  …  
设置 Local Storage 的数据可以使用 key-value Pair 的形式 ..  也就是设置一个数据的代号或者叫名称 … 然后再去设置对应的这个数据的值 …  这个名称和值是成对出现的 …
这里用到的方法是 setItem() ... 
输入 localStorage 这个对象 .... 再去调用它的 setItem 方法 …  这个方法有两个参数 …  第一个参数是数据的名称 … 第二个参数是数据的值 ...
localStorage.setItem("name", "王皓");
这样我们就设置了一条数据 ... 数据的 key，也就是数据的名字叫做 name ，跟它对应的值是 王皓  …   这个数据项目会存储在客户端的浏览器上 …  
查看
想要查看这些在本地存储的数据项目 … 也可以使用浏览器的这个开发者工具 …   打开 Resources 选项卡 …
然后打开 Local Storage ..  
，你会看到一个 xx   它就是存储这些数据的区域  …. 打开它 ..
在这里，会显示出存储的数据 …   key 是数据的名称  … 这里你可以看到我们刚才设置的 name 这个 key …  
对应的值是 王皓 …
继续设置
回到 Console …   
如果使用 setItem 重新去设置 name 这个 key 的值 …  如果值跟之前设置的不一样 …  会覆盖掉之前的设置 …  
按一下向上箭头 .. 可以调出之前在控制台上输入的东西 …   修改一下 name 这个 key 的值  …   改成 小雪 ..  回车 …
再打开 Resources ….  你会发现 .. name 这个 key 的值现在就会变成 小雪了 …


01-02-获取存储在浏览器中的 Local Storage 数据

设置存储的数据，用的是 setItem 方法 ...   想要获取到设置的这些数据项目的值  … 可以使用 getItem 这个方法…   给它指定一个想要获取的数据值的 key 就行了…  这个 key ，就是数据的名称 .. 
比如我们想要得到之前设置的 name 这个数据的值 ... 
localStorage.getItem("name");
在控制台上会直接输出 name 的值  …  
其它
使用 localStorage 的 length 属性 … 可以得到设置的数据项目的数量 …   localStorage.length;
目前在这里我们只设置了一条数据，就是 name 这个数据  …  所以显示的项目的数量是 1…
我们可以再设置一条 …
localStorage.setItem("gender", "女"); 
然后再用 localStorage.length     ...    现在输出的数据条目就会变成 2  …


01-03-删除存储在浏览器中的 Local Storage 数据

设置数据用的是 setItem ，获取到设置的数据用的是 getItem ....   如果想要去移除设置的数据 ..  可以使用 localStorage 的 removeItem() 这个方法 …
比如移除掉之前设置的 name …    localStorage.removeItem  … 括号里面加上要移除的数据的名称  … 
localStorage.removeItem("name") 
下面可以再用 getItem 去试一下 ..  localStorage.getItem("name");
返回的值是 null  …   再打开 Resources … Local Storage  …    这里，已经不会再显示 name 这个数据了 ..
清空
（#回到 console）
localStorage 这个对象里面还有一个 clear() 方法 ..  它的功能就是，可以去清空设置的所有的数据  …
localStorage.clear();
回到 Resources  …  现在 …  我们设置的所有的数据项目都被清除掉了 ….


01-04-Storage 事件

当存储区域发生变化的时候，会触发一个 storage 事件 …  比如设置新的数据，移除或者清除数据的时候 .. 都会触发这个 storage 事件 ….  我们可以根据这个事件去做一些事情 …   
要注意的是，这个 storage 事件会在其它的窗口或者标签里面发生 … 
也就是，数据发生改变的这个窗口，不会触发 storage 事件 … 但是在其它的窗口可以接收到这个事件 …  前提是这些窗口或者标签可以访问到发生变化的 storage 数据 …


01-05-实践 Storage 事件

这个视频我们可以来看一下使用这个 storage 事件 ..
准备
先打开这个 index.html  你可以在这个课程的资源包里找到这个文档 …  在这个网页里，我事先添加了两个按钮 .. 设置数据项目 … 在上面定义了一个 set-storage ID …  一会儿我们要用到这个 ID 去监听这个按钮的点击事件 ..
另外还有一个 清除数据项目 这个按钮 …  上面的 ID 是 clear-storage ..
再打开 script.js … 
先定义了一个函数  … 它做的事儿就是去设置 localStorage …
// 设置数据
function setStorage() {
    localStorage.setItem('name', '王皓');
}
再定义一个函数 … 让它可以去清空设置的 localStorage …
// 清空数据
function clearStorage() {
    localStorage.clear();
}
下面我们去监听 index.html 的那两个按钮 …  点击 设置数据项目 按钮的时候，去执行 setStorage()  … 点击 清除数据项目 按钮的时候 .. 执行 clearStorage() …
// 监听 设置数据项目 按钮
var setStorageBtn = document.getElementById("set-storage");
setStorageBtn.addEventListener("click", setStorage, false);
// 监听 清除数据项目 按钮
var clearStorageBtn = document.getElementById("clear-storage");
clearStorageBtn.addEventListener("click", clearStorage, false);
storage 事件
然后我们可以去监听 storage 事件 …  点击 设置数据项目 或者 清除数据项目 按钮的时候，可能会导致存储区域发生改变 … 这样就会触发 storage 事件 …
// 监听存储区域变化事件
window.addEventListener("storage", storageEventHandle, false);
当 storage 事件发生的时候，让它去执行 storageEventHandle 这个函数 … 在它的上面 … 我们可以再去定义这个函数 …
function storageEventHandle() {} ..  storage 发生的时候，会收到一个有用的信息 .. 比如，被改变的数据值的名称 … 这个数据之前的值是什么 … 还有改变以后的值是什么 ..  这个更改来自哪个地址等等 … 
这些东西会放在一个对象里面 .. 我们可以把这个对象交给处理 storage 事件的这个函数 …   这里我们可以叫它 event … 这样在函数里面 … 用 event 点 的形式 ..  比如 event.key 可以输出发生改变的数据值的名称 …  event.oldValue 可以输出改变以前的值  … 
event.newValue … 可以输出改变之后的值  … 
// 处理 storage 事件
function storageEventHandle(event) {
   console.log(
        "数据名称： " + event.key + "\n" +
        "以前的值： " + event.oldValue + "\n" +
        "新的值： "   + event.newValue + "\n" +
        "链接： "    + event.url +  "\n" +
        "存储： "    + event.storageArea
    );
}
在这个函数里 … 用一个 console.log … 把这些信息输出到控制台上 ..  
测试
下面我们可以去测试一下 ….
想要测试 storage 事件 … 我们需要把网页放在一个 web 服务器上 … 你可以在本地搭建一个 web 服务器的环境  … windows 用户可以使用 WAMP .. Mac 用户可以使用 MAMP  …
把网页放在服务器的发布目录里面 …   这样我们可以直接在浏览器上，使用 localhost … 访问到这个网页 …
http://localhost/Storage-Course/index.html
因为 storage 会在其它的窗口或者标签里面触发  .. 所以，我们可以新建一个标签  …   打开同样的文档 ..   也可以是不同的文档 … 只要他们在同一个存储范围内就行…  （左，右窗口） 
这样如果在左边这个窗口里面改变存储数据  … 右边这个窗口会接收到 storage 事件 ..   然后执行 storageEventHandle 函数  .. 在控制台上显示一些内容 ….
打开这两个标签的控制台 …  
现在我们还没有设置 storage ..   所以 … 点击 清除数据项目 这个按钮 … 不会有什么反应 … 因为还没有可以清除掉的数据  ..
点击 设置数据项目 … 会设置一条 localStorage 数据  … 
这个数据是在左边窗口更改的 .. 所以 … 右边这个窗口会接收到 storage 事件 …  也就会在控制台上输出一些我们事先设计好的内容 …
你会看到 … 发生改变的数据值的名称是 name …  这个数据以前没有值  … 所以，以前的值这里，会显示 null …
新设置的值是 王皓 …  链接是 ….
下面可以点击右边的这个窗口的 设置数据项目 … 
左边窗口没有反应 …  因为我们设置的数据是一样的 … 所以不会触发  storage 事件 ..
再点一下 清除数据项目 …  
在左边窗口的控制台上 … 会显示一些内容 ..
使用这个 storage 事件 ..  我们可以让不同窗口或者标签之间相互沟通 .. 
另外，要注意是 …  sessionStorage  … 只有在同一个窗口里的框架发生变化的时候 … 才会触发这个 storage 事件 …


01-06-localStorage 作用域

localStorage 的作用域，也就是它的有效的应用范围 ..  取决于文档的来源 ….  同一来源的文档可以互相使用定义的 localStorage 数据  … 
这个文档的来源是根据他们的主机名 … 端口号，还有协议来定义的  … 
比如这几个例子  … 
http://www.ninghao.net
https://www.ninghao.net
http://blog.ninghao.net
http://ninghao.net:8080
他们都是不同的来源  ..    第一个地址使用的是 http 协议 ..  主机名是 www.ninghao.net 
第二个地址使用了 https 协议 …  第三个地址的主机名是不一样的 .. 
第四个地址使用了不同的端口号 ..  默认 http 的端口号是 80 … 这个地址使用的端口号是 8080 …
所以，这四个地址里的文档都不能相互使用 localStorage 数据  …  因为在这些地址上的文档的来源是不一样的 …
另外 localStorage 的作用域还跟浏览器有关 …   也就是你在 chrome 浏览器上设置的 localStorage 数据  … 在 firefox 浏览器上是访问不到的 …


01-07-实践 Local Storage 作用域

下面我们通过几个简单的演示再来理解一下 localStorage 的作用域 …
现在你看到的这两个浏览器窗口，打开的是同一个文件  ... 区别是，左边这个窗口我们是 web 服务器里打开的 ...   右边这个窗口，是直接在文件系统里打开的这个文档 ... 
你会发现，在地址栏上显示的地址是不一样的 ... 
下面，我们可以先点击左边窗口上的这个 设置数据项目 ..  按钮 …  打开开发者工具 ... Resources  ...  Local Storage .. 
在这里，你会看到刚才设置的数据  ...  这个数据存储在了 http://localhost 这个区域里面  ... 
再回到右边这个使用文件系统打开的这个文档  … 
刷新一下 …    
打开控制台 ...  Resources 选项卡 ... Local Storage  ... 在这个页面上的 Local Storage ，存储的区域是 file://  ... 意思就是，在文件系统这个区域里设置的 Local Storage  ...   现在这里仍然是空白的 ... 
虽然这两个窗口打开的是同一个文档   … 使用的也是同一个脚本文件  … 
但是文档的来源是不一样的 … 一个来自 http://localhost …   另一个来自 file://  
同一来源的不同文档
下面我们再打开这个文档所在的目录  …  复制一份这个 index.html … 把它命名为 index-1.html ..
回到浏览器 …  使用 http://localhost 的形式打开刚才创建的 index-1.html …
打开 localStorage ，在这个文档上，同样可以访问到之前设置的 Local Storage 数据 …   虽然 index.html 和 index-1.html 是不同的文档  … 但是他们属性同一个来源  … 也就是 http://localhost …
所以他们之间可以共享 localStorage 数据  … 
不同的浏览器
下面再用 safari 浏览器打开这个文档  …   http://localhost/storage/index.html …
页面上，也不会显示 localStorage …  
因为之前我们设置的 localStorage 是在 chrome 浏览器上 …   所以在 safari 浏览器上，不能读取在 chrome 浏览器上设置的 localStorage 数据 ..


02-01-数据转换 - 转换成数字类型

Web Storage 存储的都是字符串类型的数据   …  目前浏览器还不支持去存储其它类型的数据  …  不过我们可以自己手工的去编码还有解码这些数据  …  把它们转换成自己想的数据类型。
使用 localStorage 的 setItem 可以去设置要存储的数据  .. . 或者我们也可以使用  localStorage 点的形式去设置 …  比如像这样 …
localStorage.age = 30;
这个 age 就是设置的数据的名称，把它作为 localStorage 这个对象的一个属性   …  在等号后面是要设置的，跟这个属性对应的值  …  
打开 Resources  …  Local Storage … 你会看到设置的 age  这个数据  … 
回到 Console …  在设置这个 age 的时候  …  它的数据类型是 number … 也就是数字  … 
下面我们可以再去查看一下 localStorage 的 age 这个数据的类型… 可以使用 JavaScript 的 typeof()  … 
typeof(localStorage.age);
返回来的结果是 string ... 也就是存储在 age 里面的数据的类型是字符串。
如果你想把 localStorage 的 age 作为数字类型的数据来使用的话 …  我们可以使用
数字
parseInt  …  或者 parseFloat  … 把它转换成数字类型 …    
parseInt 可以把数据转换成 整数 …  parseFloat 可以转换成 浮点小数 …  下面我们可以去试一下 …
parseInt() …    在括号里输入要转换的东西 …  获取到 localStorage 的 age 的 值 … 可以使用 getItem …  或者 .. 也可以使用点的形式 … localStorage.age … 
再把转换以后的数据值交给一个变量  … var age =  …    
然后再用一个 typeof 去测试一下 age 这个变量的值的类型 …   typeof(age)  … 
返回的类型是 number …   下面我们就可以使用数字相关的运算或者操作去处理这个数据值了 …   如果你想在转换的时候，保留小数 .. 可以使用 parsaFloat …


02-02-数据转换 - 转换成日期

如果你想在 Web Storage 里面存储日期和时间数据  …  我们需要先把日期和时间转换成标准时间的字符串 …   如果以后想作为日期类型的数据使用它们的话 … 可以使用 Date.parse()  … 把这个表示日期和时间的字符串解析成用毫秒为单位的时间  … 
基于这个时间  … 可以再去创建一个日期对象  …   
    localStorage.lastVisitTime =
去添加一个叫做 lastVisitTime 的 localStorage 数据  …  它的值就是我们当前的时间  …  可以使用 new Date() … 
不去为 new Date() 指定参数的话 … 它会创建一个表示当前日期和时间的对象  …   
下面我们需要把它转换成标准时间的字符串  …  先把这个 new Date() 用括号括起来 … 
后面加上一个 点 … 然后使用 toUTCString()  这个方法 … 
    localStorage.lastVisitTime = (new Date()).toUTCString();
下次想再把 localStorage 的 lastVisitTime 里的数据作为日期类型的数据去使用 ..  需要基于这个标准时间字符串去创建一个日期对象 …
    new Date(Date.parse(localStorage.lastVisitTime));
Date.parse 可以把表示日期的字符串解析成以毫秒为单位的时间  ..   然后用 JavaScript 的 Date 去创建一个日期对象  …
我们可以再去命名一个这个对象  …   var lastVisitTime = new Date(Date.parse(localStorage.lastVisitTime));
这样这个 lastVisitTime 就可以使用日期相关的方法和运算了 …
比如想获取到这个日期里的月份 … 可以使用 getMonth();   …  lastVisitTime.getMonth();
注意返回的数字是 X … 因为 JavaScript 里面表示月份的数字会比实际的月份小 1  …   也就是表示 1 月份的数字是 0  … 
再试一下 … lastVisitTime.getFullYear();  …  会返回日期对象里的年 …


02-03-数据转换 - 转换成对象

我们可以把对象作为 localStorage 的值来存储  …  不过同样需要编码和解码 … 我们要做的就是，把对象先转换成 JSON 的形式 ...  然后存储在 Local Storage 里面 ... 
以后用的时候，可以再把这个 JSON 形式的数据转换成 JavaScript 的对象。
清空一下存储的数据 ..  localStorage.clear();   …  command + k  可以清理一下控制台上的信息 … 
然后我们先去定义一个对象  …  var people = {}  … 在控制台上换行 .. 可以使用 ctrl + 回车 …  然后再去定义对象里的属性 ...
var people = {
     name: "王皓",
     gender: "男"
}
把这个对象存储在 localStorage 或者 sesstionStorage 里面 …  我们需要先用  JSON.stringify()  …   把这个对象转换成 JSON 格式的数据  …
再把这个数据交给 localStorage 里面去存储 …  
localStorage.peopleObj = JSON.stringify(people)
然后想把 localStorage 里面的这个数据作为对象去使用的话 … 需要去解码一下 … 就是把这个 JSON 格式的数据再转换成 JavaScript 的对象 …  这个步骤可以使用 JSON.parse()
var peopleObj = JSON.parse(localStorage.peopleObj)
这样这个 peopleObj 就是一个跟 people 对象一样的对象  …    比如想获取到它的 name 属性的值  …  可以输入 peopleObj.name …
想得到 gender 的值  …   输入 peopleObj.gender


03-01-length 与 key()

我们可以使用 localStorage 的 key ，还有 length 属性 …   … 循环去处理存储的数据项目 .. 比如可以在页面上显示出这些数据  …
key 可以根据数据的序号返回数据的名称   ..  length 属性可以返回数据项目的数量 …
准备
先打开 index.html … 在这个页面上 … 我添加了一个用来显示 localStorage 数据的容器 … 上面定义了一个 storage-data 的 ID ..
默认这个容器里面，会显示一条提醒的信息 …  还没有设置 localStorage 数据 !
另外还有在前面视频里用来设置和清空数据的按钮 ...
script.js
再打开这个页面使用的 script.js ..
跟上一个视频类似  …  现在这个 script.js 做的事情就是，点击 设置数据项目 按钮的时候，执行 setStorage() 去添加几个数据项目 ..
点击 清除数据项目 按钮的时候 ，会执行 clearStorage() … 清空设置的所有的数据项目 ..
在这个 setStorage() 里面设置了三条数据  ..  name , gender , 还有 job … 
浏览器
回到浏览器上 ... 打开这个文档 ...   再打开 Local Storage ...  点击页面上的 设置数据项目 这个按钮 ... 
在本地存储这里，你会看到设置的这三条数据  ...
下面，我们可以打开控制台 ..   可以点击 console 选项卡 ... 如果想在当前这个选项卡里打开控制台 ... 可以点击左下角的这个按钮 ...  就是这个大于号，加上三条横线的这个按钮 ...
先看一下在本地存储里存储的项目的数量  ...  可以访问它的 length 属性 ... 现在一共有三条存储的数据  ...  
使用 key 加上数据的序号 ... 可以得到指定位置上的数据的名称 ... 
这个序号是从 0 开始的 .. 也就是第一条数据的序号是 0 … 第二条数据的序号是 1 …
localStorage.length(0)  ...  得到的是第一条数据的名称 ...   也就是 gender  ... 
再试一下 localStorage.length(1) ... 得到的是第二条数据的名称 ... 是这个 job ...


03-02-在页面上显示存储数据项目

下面我们可以在页面上输出所有设置的 localStorage 数据项目 …  我们要做的就是使用一个 for 循环 … 配合 localStorage 的 length 和 key() … 把找到的数据项目的名称，还有值  … 输出到页面上用来显示 localStorage 数据的容器里面 ..
也就是这个 id 是 storage-data 的 <dl> 标签里面 ..
（#script.js）
先在页面上找到这个容器 … 
// 找到显示存储数据内容的容器 
document.getElementById("storage-data");
然后给它个名字 …   var storageData =    …    var storageData = document.getElementById("storage-data");
下面再去新建一个函数 … 用来显示存储数据  …  
// 显示数据
function displayStorageData() {} 
在这个函数里，可以使用 for 循环 …  
for(var i = 0; i < localStorage.length; i++) {}
在括号里，先定义一个变量，就是这个小 i …  i 一般用来表示 index  索引 …  然后给它一个初始的值是 0 …  每一次循环，都会去去判断一个这个小 i 是不是小于 存储数据项目的数量 …  
如果小于的话 .. 这个循环就会结束  …   
然后每次循环 .. 这个小 i 都会去加 1 … 
下面再去定义一下每次循环要做的事儿 …  用一个 localStorage.key(i);  .. 去得到本次循环的数据值的名称  … 
可以再命名一下它 …  var name = 
var name = localStorage.key(i); 
然后再用一个 localStorage.getItem(name);   得到本次循环的数据项目的值  …  再给它命名一下 …
var value = localStorage.getItem(name);  
下面再把本次循环得到的数据名称还有数据值  …  添加到 storage-data 这个容器里面 … 
storageData.innerHTML += name + value;  
再去给数据名称还有数据值的周围添加一些标签  ..  
storageData.innerHTML += "<dt>" + name + "</dt>" + "<dd>" + value + "</dd>";  
注意这种把 html 标签直接添加到程序代码里并不是一个好的方法 …   这样不容易管理  ..  复杂的应用可以考虑使用 mustache 或者 handlebars … 去创建显示的模板 … 
在循环开始之前 .. 可以把 storage-data 里的内容设置成空白的 …
storageData.innerHTML = ""; 
然后再去判断一下 ..  是不是有可用的存储数据  … 如果有的话 .. 才去执行循环 … 
if ( localStorage.length ) {} 
下面我们可以在一开始 .. 去调用这个 displayStorageData() 函数 ..  
然后再设置存储数据的时候 .. 再去调用一下这个函数 …   displayStorageData(); 
清空数据
最后再设置一下清空存储数据以后 …  在页面上显示一个提示内容 … 
// 清空数据
function clearStorage() {
    localStorage.clear();
    storageData.innerHTML = "<div class='alert alert-success'> 清空了 localStorage 数据！ </div>";
}
测试
下面回到浏览器 …   当前还没有设置可以使用的存储数据  .. 
点击 设置数据项目 …   
这会去执行设置数据的项目的函数 … 还有 显示数据项目的函数  .. 
在页面上，会输出所有的存储数据项目 … 
点击 清除数据项目 … 会清空所有的数据项目 … 
页面上会出现提示 ..    清空了 localStorage 数据！


04-01-Session Storage

Session Storage 和 Local Storage 的用法差不多 …  使用 setItem() 去设置存储的数据  … 用 getItem() 去获取存储的数据 … removeItem() 移除数据项目 … 用 clear() 清空数据项目 ..
不过他们之间还是有一些区别的 … 比如 Local Storage 的数据会一直保留 … 除非通过应用清除掉他们 … 或者用户手工去清除他们 … 
而 Session Storage 的数据在用户关掉浏览器标签或者窗口的时候就会被清除掉 …
另外 Session Storage 可以单独为每一个窗口或者标签去设置存储数据  …  即使文档的来源是一样的 … 不同窗口之间也不能互相访问彼此的 Session Storage 数据  … 
下面我们还是通过几个演示再来理解一下 Session Storage ..
准备
先去准备一下 .. 打开 index.html …  这里我把页面分成了两部分 .. 左边可以显示存储数据  ..  右边可以通过一个表单去设置存储数据  …
这个表单上面定义了一个 set-form 的 ID　.. 它的里面有两个 input 元素 ..  一个叫 name … 一个是 gender …
用户可以在这两个文本框里输入内容  …  然后点击 设置数据项目 … 可以把输入的内容设置成 sessionStorage 数据  … 
同时设置的数据会显示在页面的左边 ..
script.js 
打开 script.js …  这是在之前的视频里我们用到的代码  …  我们可以直接把这里的所有的 localStorage   … 替换成 sessionStorage …
这里我用的是 brackets 编辑器 …   alt + command + f  ..  可以去查找并替换 …    或者可以点击 编辑 菜单  ... 找到 替换  ... 
先输入想要查找的内容  … localStorage …   再输入要替换成的那个内容 ...
再输入想要替换成的内容 …  sessionStorage  … 这里要注意大小写 ..
回车 …    点击 所有 …  再点一下 Replace .. 替换  ..
修改
下面我们还得修改几个地方 …  之前点击 设置数据项目 按钮以后 ，执行 setStorage … 会设置固定的数据值  …   这里我们需要根据用户在 name 还有 gender 这两个文本框里输入的内容  … 动态的去设置存储数据  …
在这个 setItem 这里 …   修改一下要设置的值  ..
我们先去获取到表单元素 …   给它命名一下 … 
var setForm = document.getElementById("set-form"); 
表单里的所有的元素会在 emements 里面 ….    使用元素的索引值 … 或者元素的名称可以访问表单里的元素 …
这个 name 数据的值 .. 可以设置成  setForm.elements["name"].value
它的意思就是 ..  得到 setForm 表单里的 name 这个元素里的值  … 也就是用户通过这个文本框 .. 输入的内容  …
同样的方法再设置一下 gender 数据的值  …
setForm.elements["gender"].value 
其它的我们先不用动 …. 
测试
在浏览器里打开这个文档  …    输入姓名 … 王皓 …   性别  … 男 ...  然后点击 设置数据项目 …
在页面的左边 … 会显示设置的 sessionStorage 数据  …   再打开开发者工具 …
Resources … Session Storage …
在这里同样可以找到设置的 sessionStorage ….
下面我们关闭这个浏览器标签  …  
然后再打开这个文档  …  
在页面的左边 …  就不会再显示刚才设置的 sessionStorage 数据了 … 因为 sessionStorage 数据在关掉浏览器标签或者窗口的时候，会自动清除掉 ….
不过有一种情况是个例外  ..  有些浏览器可以自动恢复关闭以前打开的标签  …   恢复以后 sessionStorage 数据仍然会存在 … 
Chrome 浏览器就有这个功能 …  打开这个自定义和控制按钮 …  选择 设置 …
在 启动时 这个区域里面 … 选择 继续浏览上次关闭浏览器时在看的网页 …
下面再去设置一下 sessionStorage …   姓名 … 王皓 … 性别  … 男  … 点击 设置 …
然后我们可以关掉浏览器 …
可以使用快捷键 command + q  …  windows 有户可按一下 ctrl + q …
再打开 chrome 浏览器 …
页面左边仍然会显示之前设置的 sessionStorage 数据  …
不同标签
sessionStorage 还可以让我们在不同标签上设置不同的数据  …  新建一个标签  … 
输入姓名 … 小雪 …  性别  … 女 …  点击  设置 … 
页面左边会显示出设置的 sessionStorage … 姓名 小雪 …  性别 女 ...
回到之前的标签  … 刷新 …
仍然会显示之前设置的 sessionStorage 数据的内容  …


