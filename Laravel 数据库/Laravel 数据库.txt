01-01-Migrations

Migrations 是 Laravel 为数据库提供的一种版本控制的功能。比如我们可以去创建一个 migration，在里面，我们可以去给应用创建数据表，为数据表添加字段，或者去更改数据表的结构等等，同时，我们也需要去设计一下这些操作的反向操作。
比如你创建了一个 migration 是去给应用添加一个 users 数据表，那么在这个 migration 里面，你同时也要在指定一个创建 users 数据表的反向操作，也就是移除这个数据表 ... 
这样，通过一条命令，去执行 migration，就可以去创建一个 users 数据表 ...  如果想移除这个 users 数据表，可以执行一个 rollback 的 migration 动作。
我们可以先去给 laravel 创建一个数据库 ...  打开命令行工具 ...   先登录一下 mysql  ...  然后用 create database ... 后面加上要创建的数据库有名字  ...  这里我们去创建一个叫 ninghao  的数据库 ...  
完成以后，可以查看一下系统里面的数据库 ...  show databases; 
你会看到刚才我们创建的 ninghao 这个数据库  ...   下面，再去修改一下 laravel 数据库相关的配置 ...   
在 app  .... config 这个目录下面，找到 database.php  ...   在这里，我们可以修改 laravel 使用的数据库的类型 ...  默认是 mysql ...
再往下 ...  找到 mysql 的配置的区域  ...   修改一下 database  ...  这里设置成刚才我们创建的 ninghao 这个数据库 ... 
username 是数据库系统里的用户名 ...  这个用户需要有管理这个 ninghao 数据库的权限  ..  这里我直接使用系统的超级管理员 ... 也就是 root 这个用户 ... 在真正的应用里面，你可以需要单独去为 ninghao 这个数据库创建一个用户  ... 
password   ... 密码是 root  ...     在你的系统里 ...  root 用户的密码有可能是空白的 ...  所以你可以不用填写这个密码 ...  
保存一下 ... 这样我们就配置好了 Laravel 需要的数据库  ...


01-02-创建一个 migration - migration:make

打开命令行工具 .. 进入到项目所在的目录  ...  然后 Laravel 的 artisan 命令行工具，先去创建一个 migration  .. .  php artisan .. 使用 migrate 命令的 make 方法 ... 去创建一个 migration ... 后面加上这个 migration 的名字 ...  这个名字可以描述这个 migration 是做什么用的。 我们可以创建一个 migration ，在里面去给应用添加一个 movies 数据表 ...  所在这个 migration 可以叫做 create_movies_table
php artisan migrate:make create_movies_table
提示成功以后，会给我们创建一个 migration 文件 ...  默认这个文件是在 app  ...  database  ... migrations 这个目录里面 ... 
在这里，你可以找到刚才我们创建的 migration 文件 ..  文件名的开始部分是创建的时间 ... 后面是我们给这个 migration 起的名字 .... 
打开这个文件 ... 
里面，有一个基本的结构  ...  创建了一个叫做 CreateMoviesTable 的类 ...   这个类继承了 Migration  ... 
在这个类里面，有两个方法  ...  up  ... 还有 down  ...   在 up 方法里，我们可以去设计执行这个 migration 要做的事  ... 比如去创建一个数据表 ... 
在 down 这个方法里，去设计这个 migration 的反向操作 ... 也就是，如果这个 migration 创建了一个数据表 ... 这个反向操作就是，移除掉这个数据表 ... 如果是给数据表添加了一个新的字段 ...  反向操作就是移除这个新的字段  ...


01-03-创建数据表结构 - Schema

Laravel 的 Schema 类提供了一种简单的操纵数据表的方法 ...  下面，在这个 up 方法里，我们可以使用 Schema 的 create 方法，去创建一个新的数据表 ... 这个方法有两个参数，第一个参数是要创建的数据表的名称  ... 这里就是 movies  ...  第二个参数是一个匿名函数 ... 在这里面，可以去设计这个表的结构 ... 这个函数需要一个参数  .. $table  ...  用它来代表我们要创建的数据表 ... 
在函数里面，可以使用一个 increments 方法 ... 去创建一个叫 movie_id 的字段 ...  这个方法会自动把 movie_id 这个字段设置成主键，并且自动增加 ....  另起一行，可以继续去给 movies 这个表添加其它的字段  ... 不过这里为了演示，我们先这样 .. 
Schema::create('movies', function($table){
     $table->increments('movie_id');
});
down
下面，我们需要去设计一个这个 migration 的 down 方法 ...   在 up 方法里，去创建了一个数据表 ... 所以在这个 down 方法里，要移除这个数据表 .. 
同样可以使用 Schema 类，这里要用到它的 drop 方法  ...  它可以移除指定的数据表 ...   把要移除的数据表作为它的一个参数  ...  movies ..
Schema::drop('movies');


01-04-migrate 与 migrate:rollback

下面，我们再去执行一个刚才设计好的这个 migration  ，可以使用 artisan 命令行工具 ...    输入 php artisan migrate  ... 
第一次运行 migrate 命令的时候， 会自动在应用的数据库里面创建一个叫 migration 的数据表 ...  这里提示 Migration table created successfully.
然后成功 migrate 了我们创建的 create_movies_table  这个 migration .. 
下面，我们可以打开应用的数据库看一下 ...  你可以使用一些图形工具，比如 phpmyadmin 或者 Sequel Pro ，MySQLWorkbench 等等 ... 
或者也可以使用命令行工具 .. 这里我用的是 Sequel Pro ..  
打开应用的数据库 ...  你会看到这里面有两个表 ...  migrations ，还有 movies  ...  再打开 movies 这个表看一下 ... 这里面只一个字段  ...  movie_id  ... 
回滚
下面，我们再去 rollback 这个 migrate  ...  回滚到执行这个 migrate 之前 ...  也可以说滚回到这个 migrate 之前 ... 
回到命令行工具 ... 输入 php artisan migrate:rollback  ...  使用 migrate 命令的 rollback 方法 ...  这行命令可以让我们回滚最近的一次 migration 操作。
成功以后，会提示 Rolled back ，滚回到了这个 create_movies_table 之前 ... 
再去看一下应用的数据库 ... 
之前创建的 movies 这个数据表，就会被删除掉了。不过这个 migrations 数据表仍然会存在 .. 因为以后在执行 migrate 的时候，还会用到这个表 ...


01-05-Laravel 的运行环境

Laravel 默认的运行环境是生产环境，也就是正式运行应用的环境。我们可以创建其它的环境，比如本地开发的环境，不同的环境可以拥有不同的配置。
下面，我们可以去配置一个本地的环境。
先打开命令行工具 ...   进入到项目所在的目录  ...  然后用命令查看一下 Laravel 当前的环境  ...  输入 php artisan env  ... 
返回  Current application environment ，当前应用的环境是 production  ...   表示生产环境  ... 
下面，我们可以查看一下电脑的主机名  ...   OS X 或者 Linux 系统，可以使用 hostname 这个命令查看主机名 ... 
输入 hostname  ... 我这里返回的是 Macbook
再回到项目 ...    在项目的根目录下面 ... 找到  bootstrap ...   打开 start.php ...  在这里找到 $env 这个变量  ... 
这里就是检测环境用的 ...     我们可以把 local 后面的这个东西，改成自己电脑的主机名 ...   我这里就是 Macbook  ... 
这样当 Laravel 运行在这个主机名的电脑上的时候，就会被认为是 Local 环境  ... 
不同的环境可以有不同的配置 ...  下面，我们还需要去为 Local 环境简单的配置一下 ... 
打开 app  ...  config  ... 找到 local 这个目录  ... 
打开这个目录下面的 database.php  ...  去为 local 环境配置一下数据库 ... 
找到 mysql 的配置的区域  ..   修改一下数据库的名字 ..      用户名 ...  还有密码 ...  
保存一下  ... 
再回到命令行工具 ...   重新再看一下当前的环境 .. 
php artisan env  ....   这次，会提示我们当前应用的环境是 Local   ...


01-06-创建新的数据表 - create 选项

在创建 migration 的时候，可以使用 create 还有 table 选项 ...   比如我们要创建一个 migration ，去给数据库添加一个数据表 ... 这样可以使用一个 create 选项，然后指定一下要创建的数据表的名称 ... 创建好以后，在 migration 里面，会包含一个默认的 Schema  ... 
要是想创建一个 migration 去修改一个数据表，可以加上一个 table 选项，指定一下要修改的数据表的名字 ...  
下面，我们再去创建一个 migration ...  去添加一个 reviews 数据表 ..  php artisan migrate ... 可以叫它 create_reviews_talbe .. 在后面再去使用一个 create 选项...  等于 ... 指定一下要创建的这个数据表的名字  ... reviews  .. 
php artisan migrate:make create_reviews_table --create=reviews
再去找到这个 migration  ... app ... database .. migrations  ...  create_reviews_table  ... 
在这个 migration 里面，你会看到  ... up 还有 down 的方法里面，已经有了一个基本的 Schema  ...  在 up 方法里，使用了 create 方法 ... 指定了要创建的数据表的名称  ...  reviews  ... 
同时，还包含两个默认的字段 ..  一个是数据表的主键 ... id  ... 还有一个 timestamps()  方法，这个方法可以在数据表里创建两个字段  ...  created_at  ... 还有 updated_at ... 分别会存储创建记录的时间，还有更新记录的时间。
在 down 的方法里，已经设置好了，使用 drop 方法，去移除掉 reviews  数据表 ... 
migrate
下面我们再去 migrate 一下 ...  回到命令行工具  ...  php artisan migrate  ...    这条命令会去执行所有的 migration  .. 
再去看一下应用的数据库 ... 
这里面有之前创建的 migration 里面要创建的 movies 数据表 ... 
还有就是刚才我们新添加的 migration 里面要创建的 reviews 数据表 ... 
打开这个数据表 ... 里面有几个字段  ...  id  ..  created_at ，还有 updated_at  ...


01-07-修改数据表里的字段 - table 选项

下面，我们再去创建一个可以修改数据表的 migration  ..  比如我们要给 movies 数据表添加一个 movie_title 字段  ...   php artisan migrate:make  ... add_movie_title_to_movies_table  ... 在后面用一个 table 选项指定一个数据表 ...  等于 ... 再加上要修改的数据表的名称 .. 
php artisan migrate:make add_movie_title_to_movies_table --table=movies
再去找到这个 migration 看一下 ...
同样，会在 up 和 down 的方法里，设置了一个基本的 Schema  ... 
在 up 这里，我们用 string 这个方法，去添加一个字符串类型的字段，也就是 VARCHAR 类型的字段    ... 叫做 movie_title  ... 
$table->string('movie_title');
在这个 migration 的 down 方法里，我们要去移除这个新添加的字段  ... 可以使用 dropColumn 这个方法 ...  在这个方法里指定一下要移除的字段  ...  movie_title  .. 如果要同时移除数据表里面的多个字段，可以在这里使用逗号分隔一下 ... 
$table->dropColumn('movie_title');
migrate
保存  ... 下面我们再去执行一下 migrate  ...  
php artisan migrate
再去看一下数据库 ...  刷新一下 ... 打开 movies 数据表 ...  在这个数据表里，会多出一个 movie_title 字段   ...


01-08-回滚，重置，刷新

想把数据库回滚到上一次执行 migrate 之前的状态，可以使用 migrate:rollback 命令 ... 
php artisan migrate:rollback  
提示，回滚了 add_movie_title_to_movies_table 这个 migration  ... 打开数据库 ... 
movies 数据表 ...  添加的 movie_title 这个字段就会被移除掉了 ... 
reset 
如果我们想恢复所有的 migrate ，可以使用 migrate:reset 命令  ... 
php artisan migrate:reset  
回到数据库 ...  添加的 movies 还有 reviews 这两个数据表已经被删除掉了 ..  因为我们执行了 migrate:reset 命令 ...  也就是会去执行在所有的 migration 里面设置的 down 方法里的东西。
要把数据库恢复过来的话，再去运行一下 migrate 命令 ..
php artisan migrate
因为我们上次重置了所有的 migration  ... 所以这次会执行所有的 migration  ...  
注意如果现在再去执行 migrate:rollback  命令 ...  会回滚所有这次 migrate 执行的 migration  ...  
refresh
migrate:refresh 这个命令会刷新 migration  ...   也就是它会先回滚所有的 migration  ...  然后再去 migrate 一下 ... 
我们先去修改一下地方 ... 打开 add_movie_title_to_movies_table 这个 migration  ...  在添加 movie_title 的时候，使用了 string 方法...   在这里，可以去指定一下字段的长度 ... 
比如我们要让电影标题的长度不能超过 150 个字符  ...   输入一个逗号 ... 然后再指定它的长度 ... 
$table->string('movie_title', 150);
回到命令行 ...  用 migrate:refresh ，去刷新一下 ...
php artisan migrate:refresh
你会看到，这条命令会先去 rollback 所有的 migration  ...  然后重新再 migrate 一下  .. 
打开数据库 ...  movies 数据表 ...
你会发现， movie_title 的长度，会变成 150 ..


01-09-给数据库添加点演示数据 - Seed

在测试应用的时候，你可能希望在数据库里面添加点演示数据。Laravel 提供了一个简单的方法，可以使用 Seed 类。我们可以去创建 Seed 类，在类里，添加要插入到某个数据表里的数据 ..   然后执行一条简单的命令，就可以把指定的数据全部要插入到对应的数据表里面。
下面，我们去创建一个 Seed，给我们应用的 movies 表里添加点演示数据。
Seed 类是在 app 目录下面，database ..  seeds 这个目录里面。
Laravel 给我们准备了一个 DatabaseSeeder 这个 seed 类。 在这个类里，可以去指定要调用的 seed 类 ...  这样我们可以控制 seed 的顺序 ... 
下面，去创建一个 seed 类 ...  在这个目录里面，新建一个文件 ... 
命名为 MovieTableSeeder.php  ..  seed 类的名字你可以顺便起 ...   不过最好让它有更有意义一些 .. 
在这个文件里，创建一个 seed 类  ..  命名为 MovieTableSeeder  ... 跟这个文件名字是一样的 ...  让这个类去继承 Seeder 类 ... 
在这个类里，创建一个公开的方法 ...  叫做 run  ... 在它里面，可以去把数据插入到指定的表里 ... 
<?php
class MovieTableSeeder extends seeder
{
    public function run()
    {
    }
}
Laravel 提供了好几种处理数据库的方法 ...  在后面的视频里我们会详细去介绍一下 ...  在这里，可以先使用比较简单的 DB 类 ... 
先去定义一个要插入的数据数组 ....  命名为 $data   ...  等于 array  ...  在这个数组里，要往数据表里面插入的每一行记录都要放在一个数组里 ...
array  ...   然后指定一下字段的名称  ...  movie_title  ...  再设置一下对应的值 ... 
复制一下这行代码  ...  粘贴到它的下面 ...  再修改一下 ...  
这样，我们就准备好了三行内容 ...  下面，可以使用 DB 类，去把这几行数据插入到 movies 表里面。
        $data = array(
            array('movie_title' => '冰血暴'),
            array('movie_title' => '盗梦空间'),
            array('movie_title' => '机器人总动员')
        );
DB 冒号冒号 ... 使用它的 table 方法，去指定一下要操作的数据表的名字 ... 这里就是 movies  ...  然后再用 insert 方法 ... 去插入数据  ... 要插入的数据就是在上面定义的这个 $data  ... 
     DB::table('movies')->insert($data);
调用
下面，我们再打开 DatabaseSeeder 这个类 ... 在这里，要指定一下需要调用的 seed  ... 这样在执行 db:seed 命令的时候，laravel 会知道要去使用哪些 seed  ... 
去掉 run 方法里面的这行代码的注释 ...   然后在 call 方法里，指定一下刚才我们定义的 seed  的名字 ...
$this->call('MovieTableSeeder');
如果有其它的 seed  ...  可以复制一下这行代码，然后另起一行，再去指定其它  seed 的名字 ... 
db:seed
回到命令行工具 ...   输入 php artisan db:seed ...  这行命令会去执行所有在 DatabaseSeeder 里面调用的 seed  ...  如果只想去执行某个 seeder ，可以在这里加上一个 --class 选项 ...  然后指定 seeder 类的名字 ... 
按下回车 .. 这样会把数据插入到数据表里面 ...   打开数据库 ...  movies 这个表 ..
你会看到这个表里已经有了一些演示数据 ... 
要注意的是，每次执行这行命令的时候，都会重复把数据插入到数据库里面。
在 migrate 的时候，我们可以同时去 seed 数据  ...  可以使用 migrate 的 refresh 方法 ... 后面加上一个 --seed 选项 ...
这条命令，会先 rollback 所有的 migration ... 然后再执行所有的 migration  ... 最后会去 seed 数据  ...


02-01-创建数据表结构 - Schema

在前面学习 Migration 的时候，我们已经用到了 Schema 去创建数据表。这个视频我们再来看一下 Schema ... 
create
使用它的 create 方法，可以去创建数据表 ... 在方法里面指定要创建的数据表的名称 ..  在它的第二个参数里，可以去设计这个数据表里面的具体的字段 .. 
rename
重命名数据表，用的是 Schema 的 rename 方法 ...  在这个方法里，指定一下要重命名的数据表 ...  还有重命名以后的名字 ... 
drop
想要删除数据表，可以使用 Schema 的 drop 方法，直接在这个方法里，指定一下要删除的数据表的名称就可以了。
添加字段
在使用 create 方法创建这些字段的时候，可以根据字段的类型，使用不同的方法去创建  ....   基本上你想创建的字段类型都会有一个对应的方法 ...  比如 string() 方法可以去创建字符串类型的字段 ...  text() 方法可以创建文本类型的字段 ... 像电影的介绍，评论的内容这些字段都可以使用 text() 方法去创建。
创建日期和时间类型的字段也有一些方法 ... date() 可以创建日期类型的字段，还有 dataTime() 方法 ...  创建时间类型的字段，可以使用 time() 还有 timestamp  ...
创建数字类型的字段，可以根据你想要的数据类型，使用对应的方法 ...  decimal()  ... double() ... float() ... integer() 等等 ... 
其它方法
如果创建的字段可以为空，在它的后面，我们可以再应用一个 nullable() 方法 ...   想给字段设置一个默认的值 ... 可以使用 default() 方法去设置一下 ...   要想保证整数类型的字段里面的数据是正数 ...  可以加上一个 unsigned() 方法。 
重命名字段
我们也可以去重命名字段 ...  用的是 renameColumn 方法 ...  不过它需要 doctrine/dbal ...  可以把它添加到 composer.json 里面，再运行一下 composer install ...  会去自动安装这个依赖 ... 
删除字段
删除字段用的是 dropColumn()  ...  在里面指定要删除的字段名称就行了。


02-02-为数据表添加字段

这个视频我们可以编辑一下之前创建的 create_movies_table 这个 migration 。在它的里面，已经用到了 Schema 的 create 方法去创建了一个叫做 movies 的数据表 ...
下面我们再去给这个数据表添加一些字段 ... 
另起一行 ...  创建一个电影标题字段  ...  $table  ...  可以使用 string 方法去创建一下这个字符串的字段 ...  
$table->string('movie_title');
再去添加一个电影内容字段 ... 这个字段可以使用文本类型 ...  所以用的是 text 方法 ...
$table->text('movie_content');
然后再添加一个存储电影制作成本的字段 ...  可以把它设置成整数类型的字段 ... 添加整数类型的字段用的是 integer 方法 ... 
这个字段里的整数必须是正数  ... 所以可以加上一个 unsigned() 方法 ..
$table->integer('movie_budget')->unsigned();
再添加一个日期类型的字段，存储电影的发布日期 ...  这里可以使用 date 方法去添加日期类型的字段 ..   可以给它设置一下默认的值  ... 用 default 这个方法 ... 
$table->date('movie_date')->default('0000-00-00');
在这个 movies 数据表里，主键是用 increments 方法添加的 movie_id 这个字段  ...  也可以使用 primary 方法手工去设置一下主键。
$table->primary('movie_id');
最后再使用 timestamps() 这个方法，去添加两个字段 ... created_at 还有 updated_at  ... 可以记录一下电影内容的创建还有更新的时间。
$table->timestamps();
reviews
下面，我们再去改造一下 reviews 这个数据表 ... 打开创建这个数据表用到的 migration  ...  create_reviews_table ...
这里已经添加了几个字段  ..  id 是这个表的主键 ...  我们把它改成 review_id  ... 
timestamps 这个方法会自动添加两个 TIMESTAMP 类型的字段，created_at 还有 updated_at ，可以用它们存储创建电影评论的日期，还有更新的日期 ...
再去添加两个字段 ... 
先添加一个可以存储电影评分的整数类型的字段  .. 这个字段的值也应该是正数 .. 所以应用一个 unsigned 方法 ... 
$table->integer('review_rate')->unsigned();
评论的内容可以放在一个文本类型的字段里面。
$table->text('review_content');
我们要在 reviews 还有 movies 表之间创建一个关联  ... 可以在 reviews 表里面添加一个 movie_id 字段  ... 在发布电影评论的时候，可以指定跟这条评论对应的电影的 id 号。
这个在 reviews 表里面的 movie_id 字段，可以作为 reviews 表，还有 movies 表之间的关联。
这个字段的类型是整数 ... 并且是正数 ... 
$table->integer('movie_id')->unsigned();
保存 ... 
migrate
准备好要创建的数据表以后，我们可以去运行 migrate  ...  不过在这之前，可以先去重置一下 ...
php artisan migrate:reset 
这样会重置所有之前执行的 migrate .... 
再回到项目 ...  这里只保留创建 movies 表，还有 reviews 表的 migration ... 把其它的都删除掉 ... 
再回到命令行 ... 重新去执行一下 migrate 命令 
php artisan migrate 
预览
打开应用的数据库 ...  在这里，你会看到 movies 表，还有 reviews 表 ..
表里面，会包含我们给它们添加的字段。


03-01-数据查询 - DB:select

连接好数据库以后，我们就可以使用 DB 这个类去执行数据查询了，这个视频我们先看一下从数据库里面选择数据的方法 ...  然后再把查询出来的数据交给视图去处理。
选择数据可以使用 DB 类的 select 方法 ...  
下面，我们可以先去在数据库里添加点演示的数据  ...    打开 app  ...  databases   .. seeds  ....  找到我们之前创建的这个 MovieTableSeeder.php  ... 
重新去定义一下这个 seeder  .... 
再去执行一下 ...   打开命令行工具 ...    php artisan db:seed   ...   完成以后，在 movies 这个数据表里，应该会有一些演示的数据  ... 
再打开 MovieController 这个控制器 ...  在宁皓网的 Laravel 的基础教程里，介绍过怎么样去创建控制器 ... 
在这个 MovieController 的 index 方法里面。输入 DB 冒号冒号 ... select  ... 在这个方法里，可以直接输入 SQL 查询语句  ...   比如我们要找出 movies 数据表里面的所有的东西 ..  SELECT 星号 FROM movies  .. 
给查询出来的数据起个名字 ...  叫它 $movies  ... 
下面，我们可以去看一下这里的东西 ..   print_r  ...  $movies ..
$movies = DB::select('SELECT * FROM movies');
print_r($movies);
你会看到返回的是一个数组 ... 数组里面的每个项目都是一个对象 ...   如果你想输出第一个项目里面的 movie_title 这个属性的值 ... 可以这样 ...
print_r($movies[0]->movie_title);
保存，回到浏览器 ... 会显示第一个项目里的 movie_title 属性的值  ... 阿甘正传  ...


03-02-把查询的数据交给视图

下面，我们去给这个 movie 页面指定一个视图  ..  然后把这个查询出来的结果传递给这个视图 ... 然后在视图里面，去把结果里的所有电影标题输出到页面上 ... 
return  .. 使用 View 类的 make 方法 ... 视图是 movies.index  ...  在 movies 目录下面的 index.blade.php  ...  在后面再调用 with 方法，去把这个 $movies ，也就是查询出来的结果，传递给这个视图 ...   传递过去叫做 movies  ...  对应的数据是 $movies  ... 
return View::make('movie.index')->with('movies', $movies);
打开 views 目录  ... movies  ....  找到 index.blade.php  ... 
循环输出数组里的东西，可以使用 foreach  语句  ...  这里我们使用 blade 模板引擎提供的 foreach ..  @foreach 括号 ...  $movies  as $movie ...
这样可以使用这个 $movie ，去输出指定属性的值 ...  把这个值放在一组 li 标签里面 ...   两层花括号 ...  $movie->movie_title  ... 
结束 foreach ...  用一个 @endforeach ..
    <h1 class="page-header">电影列表</h1>
    <ul>
    @foreach ($movies as $movie)
        <li>{{ $movie->movie_title }}</li>
    @endforeach
    </ul>
保存 .. 回到浏览器 ... 
在页面上，会显示这个电影标题的列表 ...


03-03-插入数据 - 准备表单

先去设计一个创建电影内容的表单，用户可以使用这个表单，往 movies 表里插入内容。
打开 MovieController ...  在这个 create 方法里面，去指定一个视图 ...   这个方法是处理 movie 斜线 create 用的 ... 也就是创建资源用的表单  ... 
return View::make('movie.form');
打开 views 目录 ... movie ... 新建一个 form.blade.php 文件... 
表单
在这个视图文件里面，可以使用 laravel 的 Form 类，去创建一个表单，在 Laravel 的基础课程里，我们已经介绍过了怎么样使用它来创建一个表单 ... 
在课程的资料包里，我事先准备好了一个表单 ...  复制一下 .. 粘贴到这个文件里面 ... 
表单的一开始用了 Form 类的 open 方法 ..  指定了这个表单要提交到的地址 ... 就是这个 movies 地址 ... 默认用的方法是 post ...  后面又给这个表单添加了一个 css 类  .. 
接着是表单里面的每个项目 ...  有电影标题，制作成本，发行日期，注意这些元素上面都有名字 ... 一会儿我们要用到这些表单元素的名字来获取到用户在这个表单元素里面输入的内容  ... 
表单里面还有一个提交按钮 ..  
表单的结束，用了一个 Form 类的 close 方法 ... 
预览
再去浏览器上预览一下  ...  打开 movies/create  ...   在页面上会显示一个表单 ...  用户在这上面输入内容，点击发布，会用 post 的方法，发布到 movies 这个地址 ... 
我们可以在处理这个请求的控制器方法里面，接收到发过来的表单里面的数据 ...  然后再想办法把这些数据存储到对应的数据表里面。
控制器
打开 MovieController 这个控制器 ...  因为我们用的是 Resource 类型的路由 ..  所以，在这个控制器里 ...  store 这个方法就是处理用 post 方法发送过来的请求。
在这个方法里面，我们可以使用 Laravel 的 Input 类的 get 方法，去获取到发过来的表单里面的数据 ...    比如要获得 movie_title 电影标题这个表单元素里面的值  ...  输入 Input 冒号冒号 ... get ... 使用 Input 类的 get 方法 ... 在这个方法里，指定一个要获取数据的表单元素的名字 ...  movie_title ...   可以再给得到的数据起个名字 ...   $movie_title 等 于 ... 
$movie_title     = Input::get('movie_title');
用同样的方法，我们再去得到制作成本，还有发布日期这两个表单元素里的内容 ...   复制一下 ...  粘贴两行 ...   制作成本这个表单元素叫 movie_budget  ...  发布日期表单元素叫做 movie_date ... 
$movie_date      = Input::get('movie_date');
$movie_budget    = Input::get('movie_budget');


03-04-插入数据 - DB::insert

insert 方法
下面，我们可以使用 DB 类的 insert 方法，去把获取到的用户在表单里面填写的内容，插入到 movies 这个数据表里 .. 
DB 冒号冒号 ...  insert .. 用它来执行插入数据的动作 ...  在这个方法里，可以去设计要执行的 SQL 语句 .. 插入数据用的是 INSERT INTO ... 后面是数据表的名称 movies .. 在括号里，指定一下要插入的数据的字段 ..  movie_title, movie_date, movie_budget ...  再输入一个 VALUES ... 指定一下具体的值 ... 
这里我们需要先用代号来表示这些数据 ..  然后在 insert 方法的第二个参数里，可以去指定这些代码的具体的值 ... 这样做会更安全一些 ... 
代号可以使用问号 ...   ?, ?, ? 
再去设置一下 insert 方法的第二个参数  ...  是一个数组  ...  array ... 数组里面的项目就是跟前面用代号相匹配的数据  ... 这里要注意顺序 ... 
首先是 $movie_title ... 它的值就是从电影标题表单元素里面获取到的 ..  然后是 $movie_date ... 最后是 $movie_budget ...
完成以后，我们可以把用户重定向到一个指定的页面 .. .
return ...  Redirect 冒号冒号 ... to ... 在括号里指定一下重定向到的那个页面的地址 ...  这里输入 movies .. .
演示
下面，我们去演示一下 ...  打开浏览器 ...  地址是 movies/create ... 这个请求会打开发布电影的表单 ... 
输入点内容 ...  角斗士 ... 制作成本 ..  1 亿 ...  发布日期 ... 2010-05-01 .. 
然后点击 发布 ... 
点击发布，会用 post 方法，去请求 movies 地址 .. 处理这个路由的控制器会获取到在表单里面的数据 ...  然后把它们插入到数据库里  ... 完成以后，会把用户重定向到 movies 这个页面上... 
在这里，你会看到，刚刚我们发布的 角斗士 这个电影内容  ...


03-05-更新数据 - 准备表单

想更新电影内容，我们需要先把要更新的电影内容从数据库里面查询出来，然后把相应的数据恢复到一个更新内容的表单上 ..  用户在表单上去修改内容，提交以后，会把更新之后的内容再放到数据库里面。
先打开 MovieController 这个控制器 ... 在 Resource 类型的控制器里面， edit 方法就是去为更新内容准备一个表单。编辑内容的请求的地址是这样的 ... 基本的地址，加上要更新的内容的 id 号，然后是 edit ...  比如更新 id 是 1 的电影内容 .. 地址应该是 movies 斜线 1 斜线  edit ... 
在这个方法里面，我们先根据这个请求里面的 id 号，去把数据从数据库里面查询出来 .. 
可以使用 DB 类的 select 方法 ...  SELECT 星号 ... FROM movies ... 从 movies 表里查询数据  ...  再设置一个条件 WHERE movie_id 等于问号 .. 根据请求的电影 id 号去查询数据 ..  在后面，去设置一下数组，用数组里面的项目，去匹配在这里的问号 ...   array($id) ...  $id 就是请求的时候发送过来的 id 号 ...  比如 movies/1/edit ... 这个 id 号就会是 1 。再去给这个查询出来的结果起个名字 ...   $movie  ... 
另起一行 ... 可以给这个请求指定一个视图 ... 这个视图应该是一个用来更新内容的表单  ... 我们可以去重新创建一个这样的表单 ... 也可以使用之前用来发布电影内容的表单 ...  不过我们需要再去改进一个这个表单 ...
return View 冒号冒号 .. make ...  这个视图是在 movie 目录下面 ...  叫做的 form.blade.php  ...   然后再把查询出来的结果传递给这个视图，这样在这个视图里面就可以使用这个结果里面的数据了 ...  因为我们需要把对应的电影内容恢复到表单的元素上面 ..  使用一个 with 方法 .. 传递过去以后叫它 movie ..  跟它对应的数据就是这个 $movie ... 
     public function edit($id)
     {
          $movie = DB::select('SELECT * FROM movies WHERE movie_id = ?', array($id));
          return View::make('movie.form')->with('movie', $movie);
     } 
更新表单
再去编辑一下这个表单视图 ...   views ... movie ... form.blade.php .. 
现在，这里面的表单元素的值都是空白的 ...   这里我们需要去判断一下 ... 如果是要编辑电影内容的话 .... 表单元素的值应该是对应的要编辑的电影内容 ..   
我们可以判断一下，是不是有 $movie 这个数据 ...  如果有的话，就说明是要编辑电影内容 ...  先修改一下电影标题这个字段的值 ... 
可以使用 isset 来做判断 ..   判断的的东西就是 $movie ...  后面输入一个问号 ...  接着是如果条件是真的要显示的东西 ...  $movie[0]->movie_title ... 去把 movie 里面的第一个项目里的 movie_title 里面的内容显示出来...  这里的内容就是要编辑的电影内容的电影标题 ... 
再输入一个冒号 ... 去指定一下，如果没有 $movie 的时候，电影标题这个表单元素的值  ...  可以使用一个空白 ... 
isset($movie)? $movie[0]->movie_title : ''
用同样的方法，我们再去编辑一下其它的表单元素的值  ... 
isset($movie)? $movie[0]->movie_budget : ''
isset($movie)? $movie[0]->movie_date : ''
isset($movie)? '更新' : '发布'
页面上的大标题的内容也需要换一下 ..   这样更新电影的时候就显示更新电影这个标题，发布新的电影内容的时候，就显示发布电影  ... 
isset($movie)? '更新电影' : '发布电影'
最后，我们还需要修改一下这个表单的提交的方法还有地址 .. 
发布电影的时候，表单要使用 post 方法，提交到的地址是 movies ...  不过在更新电影的时候 ... 这个表单的提交方法应该是 put ... 并且，提交到的地址应该是对应的资源的地址 .. 比如要更新 movies 斜线 1 这个资源 ...  提交的时候，也要向 movies 斜线 1 这个地址去提交  .. 
    {{ Form::open(
        array(
            'url' => isset($movie)? 'movies/' .$movie[0]->movie_id : 'movies',
            'class' => 'form-horizontal',
            'method' => isset($movie)? 'PUT' : 'POST'
        ))
     }}
预览
下面，我们去预览一下 ...   回到浏览器 ..   比如想要更新一个 movie_id 是 1 的电影内容 ... 它的编辑地址应该就是 movies/1/edit ... 
这里会显示一个编辑电影内容的表单 ...  要编辑的电影内容的字段已经恢复到了对应的表单元素上面 ... 用户可以更改里面的内容 ... 然后点击 更新 .. 去发送更新内容的请求 ..  
在下面的视频里，我们再去使用 DB 类的 update 方法，去把修改之后的内容，放到数据库里面。


03-06-更新数据 - DB::update

这个视频我们去把用户提交过来的要更新的电影内容更新到数据库里面。处理这个请求的控制器的方法是 update  ...  跟插入内容到数据库差不多... 我们先要获取到表单里面的数据  ...  再使用对应的方法，把这些数据放到数据库里。
先获取到 movie_title，movie_date，还有 movie_budget  ... 里面的值  ... 可以复制一下处理插入数据方法里面的这几行代码  ...
        $movie_title     = Input::get('movie_title');
        $movie_date      = Input::get('movie_date');
        $movie_budget    = Input::get('movie_budget');       
然后使用 DB 类的 update 方法，去更新这些数据到数据库里  ...  DB 冒号冒号 .. update ...   要执行的 SQL 语句是 UPDATE ... 后面是数据表的名称 ... movies ..  SET ，去设置一下数据 ...  movie_title 等于问号 ..  逗号分隔一下 ..  movie_date 等于一个占位符号 ...  movie_budget 等于问号 ....    用 WHERE ，再设置一下条件  ...  movie_id 等于，请求的 id ...  这里同样先使用一个问号 ... 
再去设置一下这个 update 方法的第二个参数 ... 也就是一个数组，数组里面的元素跟前面的这些占位符相匹配 ... 
array ...  $movie_title, $movie_date, $movie_budget .. 最后还有一个 $id .. 
        DB::update('UPDATE movies SET movie_title = ?, movie_date = ?, movie_budget = ? WHERE movie_id = ?', array($movie_title, $movie_date, $movie_budget, $id));
最后，更新完成以后，可以把用户重定向到一个地址上 ... 可以是这个显示这个更新内容的页面 ...   这里我们把用户先重定向到电影列表页面 ... 
使用 Redirect 类的 to 方法 ... 
return Redirect::to('movies');
保存 ...  
预览
下面，我们去预览一下...  
比如我们要更新一下 阿甘正传 这部电影的内容 ... 先打开它的编辑内容的页面，这部电影的 id 号是 1  ...  movies/1/edit  ...  修改一下里面的内容 （可以给电影标题加上英文名）...   然后点击更新 ... 
完成以后，会把用户重定向到电影列表页面 ...  这里你会看到更新之后的内容 ....


03-07-删除数据 - 准备表单

删除数据，可以使用 HTTP 的 delete 动作，请求资源的地址就可以了，比如要删除 id 号是 7 的电影，可以用 delete 方法请求 movies/7 这个地址 ...  如果路由用的是 resource 类型的控制器 ... 控制器接收到这个请求，会使用 destroy 这个方法去处理 ... 在这个方法里，可以利用 DB 类的 delete 方法，去把请求的资源从数据库里删除掉 ... 
下面我们先去准备一下 ...   在显示电影列表的页面上 ...  在电影内容的旁边加上一个表单 ... 在里面加上一个 删除 按钮 ..   点击删除按钮 ... 用 delete 方法请求这个资源的地址 ... destory 方法接收到请求，会在数据库里删除掉请求的资源。
打开显示电影列表的视图 ...  views ... movie ... index.blade.php ... 
在列表项目里面，添加一个表单 ... Form::open ...  设置一下这个表单的提交方法 ...  array() ..  method 是 DELETE ... 再设置一下提交的地址 ... 地址应该就是这个资源的地址 ...  url ... movies 斜线  ... 加上电影的 id 号 ...  这个 id 号是在 movie 这个对象里面的 movie_id 这个属性里面 ..
在发送这个删除请求的时候，destory 方法会根据这个 movie_id 的值，去删除掉对应的电影内容 ..  
        {{ Form::open(array(
            'method' => 'DELETE',
            'url' => 'movies/' . $movie->movie_id))
        }}
表单元素 
在这个表单里面去添加一个提交按钮 ...  Form:submit ... 按钮上的文字是 删除  ... 
            {{ Form::submit('删除') }} 
最后再用 Form 类的 close 方法结束这个表单 ..
      {{ Form::close() }}
预览
下面，我们去预览一下 ... 打开电影列表页面 ...  在每个电影内容的旁边，会显示一个 删除按钮 ... 点击这个按钮，会用 delete 方法，请求删除这个资源  ...


03-08-删除数据 - DB::delete

在 Resource 控制器里面，处理删除请求的是 destroy  这个方法。在它里面，可以使用 DB 类的 delete 方法 ... DB 冒号冒号 ... delete ... 在这个方法里面，去设计 SQL 语句来删除掉对应的内容 ... 
DELETE FORM ..  要删除数据的是 movies 这个数据表 ...  然后再用 WHERE 去设置一下条件 ...  movie_id 等于 ...  后面加上一个占位符 ... 问号 ...
再设置一下 delete 方法的第二个参数 ... 一个匹配 SQL 语句里面占位符的数组 ...  array($id)  ...  跟 movie_id 后面的占位符对应的值就是这个 $id ...  这个 id 里面的值是发送删除请求的时候传递过来的 ... 
     public function destroy($id)
     {
          DB::delete('DELETE FROM movies WHERE movie_id = ?', array($id));
     }
删除完成以后，再去把用户重定向到电影列表页面 ... 
     return Redirect::to('movies');
保存 ... 
预览
下面，我们可以去预览一下 ...  比如我们要删除掉 角斗士 这个电影内容 ...  点击它后面的 删除 按钮 ...
删除完成以后，会返回到电影页面上 ...  
在这里，已经不再显示  角斗士 这个电影内容了。


04-01-查询构建器 - Query Builder

之前我们一直使用 DB 类的一些方法，再加上一些原始的 SQL 查询语句去操作数据库，Laravel 提供了一种兼容性更好，更方便，更易用的方法去做这些事，这就是 Query Builder .. 查询构建器 ... 
其实就是使用一些方法去操纵数据库 ... 不用我们再手工输入 SQL 查询语句了 ...   下面，我们去试一下。
打开 MovieController ...   在这个 index 方法里面，我们去试一下使用 Query Builder ...   先注释掉 DB::select 这行代码  ... 还有下面的 return View::make  ... 
比如我们想要找到 movies 这个表里的所有的数据 ... 可以这样 ..  输入 DB 冒号冒号 ...  table ... 在这个方法里，先指定一下数据表的名称  ... movies ... 后面，再应用一个 get() 方法 ... 
这样就可以获取到 movies 这个数据表里面的所有的数据了 ...  再去命名一下这个结果  ...  $data 等于  ...  然后用 print_r 把这个 $data 输出到屏幕上 .. 
$data = DB::table('movies')->get();
（#浏览器）打开浏览器 ... 查看一下源代码 ... 如果出现乱码，可以修改一下页面的编码格式 ...  使用 UTF-8 .. 
你会看到，找出来的结果跟使用 SELECT 星号，FROM movies 这个语句是一样的 ..  一个数组 .. 里面的每个项目都是一个对象  ... 
限制数量与偏移
默认会把所有的结果显示出来，想限制一下输出的结果的数量，可以使用 take 方法 ... 
比如只想要两条结果  ... ->take(2)
（#浏览器）这里只会显示出两条结果 ...   想再设置一下偏移量 ... 可以用 skip 方法去设置一下。
->skip(2)
（#浏览器）会从第三个结果开始显示 ... 一共显示两个 ...  
排序
对这个结果排下顺序 ...  用的是 orderBy ..  （#返回）先注释掉限制还有偏移这两个方法 ...   比如想按照电影的上映日期，降序排列 ...  orderBy  ... 注意这里的 B 是大写的 ... 在方法里，先指定一下字段的名称 ...  movie_date ...  第二个参数是排序的方式 ...  DESC 表示降序 ... ASC 表示升序 ... 
$data = DB::table('movies')->orderBy('movie_date', 'DESC')->get();
（#浏览器）你会看到数据库里最新的电影是 盗梦空间 ... 2010 年，7月16号发布的 ...   最早的电影是 阿甘正传 ... 是 1994 年，6月23 号上映的。
指定字段
现在这里会显示出所有的字段，我们也可以指定一下要输出的字段 .. 
加上一个 select 方法 ...  里面是想要的字段的列表 ..   比如只想要电影标题，还有发布日期这两个字段 ... 
$data = DB::table('movies')->select('movie_title', 'movie_date')->get();
（#浏览器）返回的结果里，只会显示 movie_title 还有 movie_date 这两个字段  ..


04-02-first, pluck, lists

first
查询出来的结果，只想要第一个结果的话，可以把 get 方法，换成 first  ... 
$data = DB::table('movies')->first();
（#浏览器）注意这个结果不是一个数组，而是一个对象 ...  我们可以直接使用这个对象里的属性得到它的值。
pluck
pluck 方法可以让我们直接得到第一个结果里面的某个字段的值 ...  比如要得到第一个结果里的 movie_title 的值  ... 
$data = DB::table('movies')->pluck('movie_title');
（#浏览器）
lists
如果你想直接得到一个某个字段的内容的列表 ...   可以使用 lists 方法去指定一下列表项目的字段 ... 
$data = DB::table('movies')->lists('movie_title');
（#浏览器）得到的结果是一个 movie_title 的数组 ...


04-03-设置条件

现在，我们要找到 movie_id 是 3 的记录。可以用 where 方法设置一下这个条件。条件是 movie_id  ... 后面是它的对应的值 ...  3  ... 最后再用一个 get 方法得到这个数据记录.. 
         ->where('movie_id', 3)
         ->get();
（#浏览器）你会看到，这个结果里面，movie_id 的值是 3  ... 
操作符
下面，我们可以找出制作成本大于 1 亿的所有的电影 ... 同样使用 where 方法 ...   先是条件的名称 ... 中间用一个比较运算符 ... 一个大于号 ... 最后再设置一下它的值 ...  
->where('movie_budget', '>', 100000000)
->get();
（#浏览器）返回的结果里面，所有的 movie_budget 的值都大于 1 亿。
或者
使用 orwhere 方法，可以继续去设置一个条件，比如要找到制作成本大于 1 亿，或者 上映日期 在 97 年 1月1号之前的电影  ...  orwhere ... movie_date  ...  小于 ...  1997-01-01  ... 
->orwhere('movie_date', '<', '1997-01-01')
（#浏览器）虽然阿甘正传的制作成本小于 1 亿，但是它的上映日期在 1997 年 1 月 1 号以前 ... 所以也会把它显示出来 ...
区间
用 whereBetween  ... 可以设置一个区间条件 ... 比如找出九零年到两千年之间上映的电影 ... 
whereBetween ... movie_date ...  这个区间条件的值放在一个数组里面 ... array  ...  第一个项目是开始的值  ...  1990-01-01  ，第二个项目是结束的值  ..  1999-12-31  .... 
（#浏览器）在我们的数据库里，只有阿甘正传，还有海上钢琴师这两部电影是 90  年代制作的 ...  
->whereBetween('movie_date', array('1990-01-01', '1999-12-31'))
否定区间
现在我们又要找出不是 90 年代制作的电影 ...  可以使用 whereNotBetween  ... 
->whereNotBetween('movie_date', array('1990-01-01', '1999-12-31'))
（#浏览器）这里显示的电影，都不是在 90 年代上映的。
在数组里
要想找出个别的几个记录 ...  比如 movie_id 是 1，2，5 的这几个电影 ... 可以使用 whereIn 去设置这个条件 ..   设置的条件是 movie_id  ...  后面再加上一个数组 . ...   里面是 movie_id 的几个值 ...  这样记录里面的 movie_id 的值包含在这个数组里面，就会被选择出来。
->whereIn('movie_id', array(1, 2, 5))
（#浏览器）你会看到，这几个结果，movie_id 的值是，1，2，还有 5 ...   
不在数组里
如果想要找出这几个记录以外的所有的记录　....  可以把 whereIn 这个方法换成 whereNotIn
->whereNotIn('movie_id', array(1, 2, 5))
在这里显示的结果，movie_id 的值都不会是 1，2，还有 5  ...


04-04-Aggregate 方法

Aggregate 方法可以去统计，合计，找出最大，最小，算出平均数等等。
现在我们想要去统计一下查询出来的结果的数量  ... 可以使用 count 方法 .. 
->count()  ;
（#浏览器），得到的是一个数字，表示数据记录的数量。
最大
下面我们可以找到制作成本最大的电影  ...   找出最大值用的是 max 方法 ...  在这个方法里面，指定一个字段 ...
->max('movie_budget');
（#浏览器）最大值是 185000000   ...  
最小 
找出最小值，用的是 min 方法 ..
->min('movie_budget');
（#浏览器）最小值是 9000000 
合计
要合计一下查询结果里面某个字段的值，可以使用 sum 方法 ...  我们去合计一下所有电影的制作成本是多少 ...
->sum('movie_budget');
合计的结果是 639000000 .. 
平均
算一下平均每部电影的成本是多少 ... 要用到 avg 这个方法 ...  它可以算出结果里面某个字段的平均值  ... 
->avg('movie_budget');
（#浏览器）平均值是 91285714.2857...


04-05-关联 - join

设置关联，可以使用 join 方法 ...  在我们的应用里面，现在有两个数据表，一个是 movies ，里面是电影内容，一个是 reviews ，里面是电影相关的评论内容  ...  在发布评论的时候，会存储电影的 id 号 ... 使用这个在 reviews 表里面的 movie_id ，还有 movies 表里面的 movie_id ，我们可以把这两个表关联到一块儿。
下面，我们可以往 reviews 这个表里添加点演示的数据  ...  
这里我提前准备好了一个 seeder  ... 就是这个 ReviewTableSeeder  ...  这些要数据是要放在 reviews 这个表里的 ... 
再打开 seeds 这个目录下面的 DatabaseSeeder  ...  在这里，去调用一个 ReviewTableSeeder  .. 
php artisan migrate:refresh --seed
输入 join ...  在这个方法里面要设置几个参数  ...  首先是要关联的数据表 ...  这里我们要去把 movies 这个表，跟 reviews 表相关联  ... 所在，这里输入 reviews  ...   
接着我们要设置一下关联的条件 ...  这个条件就是 movies 表里面的 movie_id 等于 reviews 表里面的 movie_id ... 
         ->join('reviews', 'movies.movie_id', '=', 'reviews.movie_id')
另起一行，我们再设置一下要返回来的字段 ...  需要 movie 表里面的 movie_title 这个字段  ..  还有 reviews 表里面的 review_rate ，电影评分字段 ..  还有 reviews 表里面的 review_content ，评论内容字段 ...
         ->select('movie_title', 'review_rate', 'review_content')
         ->get(); 
预览
回到浏览器 ... 这里，会把 movies 表还有 reviews 表关联到一块儿 ...   每个结果都有三个字段，电影标题，电影评分，还有电影评论的内容。
Laravel 还提供了一个 leftjoin 方法，可以去设置左关联。


04-06-插入数据

下面我们使用 Query Builder 的方式去改造一下应用里面，插入数据的代码。
打开 MovieController 这个控制器 ... 找到 store() 这个方法 ...  先注释掉 DB::insert 这几行代码 ... 
然后在下面输入 DB 冒号冒号 .. table ... 去指定一个数据表 ...  输入 movies  ...   然后再使用 insert 方法 ... 在这个方法里面是一个数组 ... 数组里包含要插入到数据表里的内容 ...  array  ..  先指定数据表里的字段的名称 ... movie_title  ...  然后是要往这个字段里面插入的对应的值  ... $movie_title ...
这个值是从用户提交的表单里面获取到的 ...  再设置一下其它的两个字段 ..  movie_date  ... 对应的值是 $movie_date ... movie_budget  .. 跟它应用的是 $movie_budget ... 
        DB::table('movies')
        ->insert(array(
            'movie_title'  => $movie_title,
            'movie_date'   => $movie_date,
            'movie_budget' => $movie_budget
        ));
用这种方法， 我们就不再需要手工输入 SQL 语句了 ... 
再去使用查询构建器改造一下电影列表里的查询 ... 
$movies = DB::table('movies')->get();
保存 ...  再去浏览器里试一下 ...  打开创建电影的表单页面 ...  movies/create  ... 输入电影标题 .. 成本 ... 还有上映的日期  ...
然后点击发布 ... 
重定向到电影列表页面 ... 在这里可以显示出刚才插入的数据  ...


04-07-更新数据

这个视频我们再用查询构建器改造一下更新电影内容相关的查询 ... 
先找到 update 这个方法 ...  注释掉  DB::update 这行代码 ...  我们用查询构建器替换掉它 .... 先用 DB 类的 table 方法去设置一下要操作的数据表 ... DB::table('movies') ...  再设置一下更新的条件 ... 使用一个 where 方法 ...  条件是 movie_id 等于这个传递过来的 $id ..
另起一行，再去使用 update 这个方法 ...  跟 insert 方法类似，它里面的参数也是一个数组 ...   array  ... 然后是要更新的数据表里的字段，还有要更新的值  ... 
        DB::table('movies')
        ->where('movie_id', $id)
        ->update(array(
            'movie_title'    => $movie_title,
            'movie_date'     => $movie_date,
            'movie_budget'   => $movie_budget
        ));
再去修改一下编辑表单页面的查询  ... 找到这个 edit 方法 ... 注释掉这行使用原始查询语句的代码 ...   $movie 等于 DB 冒号冒号 table ... 指定一个数据表 .. 然后使用 where 去设置一下条件 .. 条件是表里面的 movie_id 的值，跟传递过来的这个 $id 的值是相等的 ...  
后面再用一个 get 方法去得到这个数据。得到的数据是一个数组 ... 如果我们想直接得到一个对象的话，可以使用 first() 这个方法 ...
$movie = DB::table('movies')->where('movie_id', $id)->first();
form.blade.php
因为得到的是一个对象 ... 所以输出它的属性的方法会有些不一样 ..  我们得去修改一下处理它的视图 ...
打开 form.blade.php  ..  之前我们使用 SELECT 语句，返回来的是一个数组 ...数组里只有一个项目  ... 输出这个项目里面的对象的属性 ... 用的是 movie 方框号 ... 指定一下项目的序号 ... 然后再去访问里面的属性 ..
这次我们用 first 方法，返回来的直接就是一个对象 .... 所以，可以直接访问这个对象里面的属性 ..  去掉这个方框号 0 ... 
然后保存 .... 
预览
再去预览一下 ...   打开一个电影内容的编辑页面 ...  
修改一下内容 ... 点击更新 ... 
在这里，会显示出更新以后的内容 ...


04-08-删除数据

找到想要删除的数据记录，然后调用 delete 方法，就可以把找到的数据记录从数据库里面删除掉。
下面，我们可以去改造一下，这个处理删除数据请求的控制器里的方法，destory ... 
注释掉这个使用原始 SQL 语句删除数据记录的代码 ... 
然后输入 DB 冒号冒号 ...  再 table 方法指定一下要删除数据记录的数据表 ... 这里就是 movies 这个表 .. 
再用 where 方法，去设置一下条件 ...  where ... movie_id  ... 它的值就是删除请求传递过来的这个 id ...  最后再调用 delete 方法 ... 
DB::table('movies')
->where('movie_id', $id)
->delete();
按照删除请求发过来的 id 号，去在 movies 查找数据记录 ... 找到以后，使用 delete 方法删除掉它。
保存 ...  再去浏览器里去看一下 ... 找到一个想要删除的电影 ..  点击 删除 按钮 ...  这样会用发送一个删除请求 ... 请求的的地址就是这个资源的地址 ... 这个请求会用 MovieController 里面的 destory 方法去处理 ...   在这个方法里，按照请求里带的 movie_id 去查找出相应的数据记录 .. 然后调用  delete 方法，把这个数据记录删除掉。


05-01-对象关系映射 - Eloquent

ORM 是 Object Relation Mapping 的简称，意思是对象关系映射。在这里，我们可以把它想像成，在你的应用的数据库里，每个数据表，都有一个跟这个数据表相对应的模型，这个模型可以表示这个数据表里面的数据。使用模型提供的一些方法，我们可以去操纵这个数据表，查询，插入，更新，删除等等。
模型就是 MVC 框架里面的 Model  ...  一般可以用来表示应用里面的数据。
Laravel 框架给 ORM 起了一个更好听的名字 ...  Eloquent  ... 
定义一个 Eloquent 模型
下面我们可以去创建一个 Eloquent 模型 ... 应用的模型一般会放在 app 目录下面的 models 这个目录里面。不过我们也可以通过修改 composer.json 文件，去更改模型的目录。
打开 app .. models  ..  默认 Laravel 给我们准备了一个 User 模型 ... 跟它对应的数据表应该就是 users ... 
下面我们去给应用数据库里面的 movies 这个数据表去创建一个跟它对应的模型 ...  这个模型应该叫做 Movie...  可以使用数据表的名称的单数形式去命名跟它对应的模型。这样 Laravel 会自动匹配模型还有数据表 ...  
新建一个文件 ... 命名为 Movie.php ..
打开这个文件 ... 去定义一个类.. 名字就是这个模型的名字 ...  class Movie ... 让这个类去继承 Eloquent .. extends Eloquent {}
<?php
class Movie extends Eloquent {}
这样我们就可以使用这个 Movie 模型了 ... 它会自动匹配 movies 这个数据表 ...  不过在这个模型里面，我们也可以手工去指定跟这个模型对应的数据表 ...
去设置一下这个类的 $table 属性 ... 
protected $table = 'movies';
Eloquent 会认为每个数据表都有个叫 id 的主键 ... 如果你定义的数据表里面，主键的名称不是 id ... 在这个模型类里，可以设置一下 primaryKey 这个属性，去指定一下主键 ... 
在我的这个 movies 表里面，主键是 movie_id ...
protected $primaryKey = 'movie_id';
现在我们就创建好了一个模型 ...


05-02-数据查询

有了模型以后，我们就可以利用它去操纵数据表了 ...   可以查询，创建，更新，还有删除数据记录 ... 
之前我们在使用 DB 类查询数据表的时候，先要使用 table 方法去指定一个数据表的名称  ...  然后可以利用 Query Builder 的方法去操作。
在 MovieController 里的这个 index 方法里，先注释掉这里面的几行代码  ... 
这回我们直接使用模型去执行查询 ...  比如要找出 movies 表里面的所有的记录 ... 
直接使用模型的名称 ...  Movie ... 然后使用 all 这个方法，可以得到所有的记录 ..   给这个结果起个名字 ... 再使用 print_r 或者 var_dump ，把它输出到屏幕上看一下 ...
$data = Movie::all();
print_r($data);
回到浏览器 ...   这里会显示出所有在 movies 表里面的记录。
find
如果想查询出个别记录，可以使用 find 方法  ...  比如找出 movie_id 是 1 的数据记录 ...  使用 Movie 模型的 find 方法 .. 在方法里，可以指定一个 id 参数  ...   这里应该就是 moives 表里面的 movie_id 这个字段的值。因为在创建这个模型的时候，我们的设置了一下它的 $primaryKey 属性的值就是 movie_id  ... 
$data = Movie::find(1);
（#浏览器）这里会显示一个 movie_id 是 1 的数据记录。（#返回）再去查询出 movie_id 是 3 的电影内容   ... （#浏览器）这次给我们的结果就是 movie_id 是 3 的数据记录。
QueryBuilder
我们同样可以使用上一章里介绍的 QueryBuilder 去创建查询 ..  比如选择要显示的字段，可以使用一个 select 方法 ...   我们想在结果里只包含 电影标题，还有制作成本这两个字段  ...  movie_title .. movie_budget ...  最后再使用一个 get 方法，去得到数据。
$data = Movie::select('movie_title', 'movie_budget')->get();
（#浏览器）你会看到，所有结果里面，只包含 movie_title 还有 movie_budget 字段  ... 
你也可以试一下其它的方法，比如用 where 去设置条件，用 take 去限制结果数量等等 ... 
改造
（#切换）如果用模型的方法改造一下这个显示电影内容的方法 ...  $movies 等于 .. 直接使用 Movie 这个模型 ... 再使用它的 all 方法，这样可以得到所有的数据 .. 
再把这个 $movies 传递给视图 .. 视图里面用来列出内容的循环可以不用改 ...  
注释掉这里的测试模型的代码  ... 
保存 ... 回到浏览器 ... 打开 /movies 这个地址 ... 
在这里，同样可以显示出电影列表 ...


05-03-插入数据

有了模型以后，再插入新的数据记录到数据表里面，可以先去创建一个模型的实例，然后去设置这个实例的属性还有跟它对应的值，这个属性就是数据表里面的字段，它的值就是要往这个字段里面存储的内容。最后，再调用模型的 save 方法，去保存一下。
先打开 MovieController ，找到处理存储请求的这个 store 方法 ... 
在这个方法里，先去获得用户填写的表单里面的内容，然后使用 DB 类的 table 方法指定数据表，再用 insert 方法把这些内容插入到数据库里。我们可以先注释掉 DB::table 这几行代码 ，...  然后使用模型的方法去改造一下它。
首先要去创建一个模型的实例，这里我们要创建实例的模型是 Movie  ...  $movie 等于 new Movie; 
这个 $movie 就是基于 Movie 模型创建的一个对象 ... 里面会包含一些属性 ...  这些属性就是跟 movies 数据表里面的字段对应的 ...  然后我们要去根据用户在表单里填写的内容去设置一下这些属性的值  ...  
$movie 一个箭头符号 ... 接着是属性的名称 .. . movie_title ... 电影的标题...  跟它对应的值，在上面已经使用 Input 类的 get 方法获取到了 ...   在这个 $movie_title 变量里面 ... 
再去设置一下 movie_date  ... 还有 movie_budget 属性里面的值 ... 
$movie->movie_title = $movie_title;
$movie->movie_date = $movie_date;
$movie->movie_budget = $movie_budget;
最后，再去调用一下 save 方法，去把这些内容存储到数据表里面 .. 
$movie->save();
测试
下面，我们去测试一下 ..  打开创建电影的页面 ...  movies/create 
输入电影标题 ...  制作成本 ...  还有上映日期  ...
然后点击 发布 ... 
返回到电影内容列表页面 ....  在这里，可以找到刚才我们新添加的电影 ... 
下面，我们打开数据库管理软件，去看一下刚才插入的这行数据  ...  这里我用的是 Sequel Pro ...   你也可以使用 phpmyadmin  ... 
找到应用的数据库 ...  movies 表  .... 
时间戳
这个 movie_id 是 xx 的记录就是刚才我们使用模型的方法插入的一条记录 ...  注意，它的 created_at 还有 updated_at 字段里面自动加上了时间 戳 ... 
Eloquent 会认为在我们的数据表里，有这两个字段  ...  然后自动去设置它的值  ... 
如果不想使用自动时间戳的功能 ... 可以在模型里面，把 timestamps 这个属性的值 ... 设置成 false ... 
public $timestamps = false;


05-04-更新数据

更新模型数据，可以先找到要更新数据的模型，然后重新设置它的属性的值 ...   下面，我们再去改造一下这个处理更新请求的方法 ...  就是 MovieController 控制器的这个 update 方法 ... 
现在的做法是，使用 DB 类的 table 方法指定要更新数据的表的名称 ... 再用 where 方法去设置条件找到对应要更新数据的记录... 再用 update 方法，去更新数据。
先注释掉它 ..
找出要更新数据的那条记录 ...  使用 Movie 这个模型的 find 方法 ...  给这个方法传递一个参数 ...  也就是数据记录的 id 号 ... 这个 id 号是从请求那里传递过来的 ...  可以使用 $id  这个变量   ...  因为 id 是 update 这个方法接受的参数的名称  ... 
       $movie = Movie::find($id);
给找出来的这个模型起个名字  ...  $movie  ...  然后再去设置它的属性的值  ...    
        $movie->movie_title   = $movie_title;
        $movie->movie_date  = $movie_date;
        $movie->budget          = $movie_budget;
最后，再调用 save 方法，去保存一下更新之后的数据 ...
        $movie->save();
 edit
下面，我们再去改造一下编辑表单页面的这个 edit 方法 ... 它的作用就是，找到想要编辑的数据记录，再把它传递给一个视图去处理 ...
注释掉这行代码  ..  然后用 Movie 这个模型 ..   使用 find 方法，去找出这条记录 ...  按照请求的 id 去查找  .. 
$movie = Movie::find($id);
保存 .. 
预览
回到浏览器 .. ..  打开要编辑的电影页面 ...   movies/1/edit 
修改一下电影的标题 ...   然后点击 更新 ...     在个电影列表页面上，会显示出更新之后的结果  ...


05-05-删除数据

用模型的 find 方法找到想要删掉的模型，可以是 1 个，也可以是多个  ... 然后再去调用这个模型的 delete 方法，就可以把它从数据库里删除掉了。
或者我们也可以直接使用模型的 destory 方法，给这个方法指定一个要删除的数据记录的 id  ... 可以直接把数据记录删除掉 ...   也可以给 destory 的方法传递一个数组参数 ... 数组里面的项目就是要删除掉的数据记录的 id 号 ...   或者 ... 直接给 destory 方法一个用逗号分隔开的 id 列表  ... 
下面，我们使用 destroy 方法去改造一下处理删除请求的方法 ...  找到 destory 这个方法 .. 
在这里，现在用的方法是，指定一下要删除记录的数据表，使用 where 设置条件，找出要删除的记录，再去调用 delete 方法删除掉它。
注释掉这几行代码 ...
然后输入 Movie 冒号冒号 ...  destroy ... 使用 Movie 模型的 destroy方法 ...  在这个方法里，去指定一下要删除的记录的 id 号 ... 这个 id 号是从删除请求那里传递过来的 .. 可以使用 $id 来表示 ... 
Movie::destroy($id);
保存 ...  再去预览一下 ....  找到一个想要删除掉的电影内容 .. 点击 删除 ...
可以把它从数据库里删除掉。


05-06-Mass Assignment

当我们给模型的 create 还有 update 方法传递一个数组的时候，会自动把数组里面的项目跟数据表里面的字段相匹配 ... 然后把这些数据放在数据库里，这就是 Mass Assignment  ...   这种方法用起来很方便，因为我们不需要挨个去设置数据表里面的每个字段，还有跟它对应的值了 ... 
不过这会暴露一个很严重的安全问题 ...  因为用户可以在本地去修改或者添加 input 字段，比如，在我们的数据表里，用户表里有一个用来标记用户是否是管理员的字段，叫做 admin ，如果是管理员，这个字段的值就会是 1  ... 
这样当用户在创建或者修改用户帐号的时候，如果他添加了一个字段，叫做 admin ，字段的值设置成 1 。并且我们使用了  Mass Assignment
这样在创建或者更新帐户信息以后，这个用户的记录，admin 这个字段的值就会被设置成 1 。
因为这个原因，在默认情况下 Laravel 会禁止所有的字段使用 Mass Assignment  ...  不过我们可以通过设置模型的 $fillable 属性，去指定一下，可以使用 Mass Assignment 的字段。
这个 $fillable 属性就相当于是一个白名单，也就是，这个属性的值就是可以使用 Mass Assignment 的字段，没在这里列出的其它的字段，都不能使用 Mass Assignment  ...  如果你想设置一个黑名单的话 ... 可以设置一下 guarded 属性 ..   这样除了在 guarded 属性里指定的字段以外，其它的字段都可以使用 Mass Assignment 　...
实践
下面，我们去试一下 ...  打开 MovieController 这个控制器 ...  然后找到处理保存电影内容的方法 ...   就是这个 store 方法 ... 
在这里，我们分别用 Input 类去获得用户填写的每一个表单元素里的值，再一个一个的把它们设置成对应的字段的值 ... 
先注释掉这几行代码  ...  
Input 类有一个 all 方法，可以获取到表单里面的所有的元素的值 ...  我们可以把用它得到的值，作为 create 方法的一个参数 ... 
Movie::create(Input::all());
保存 ... 回到浏览器 ...  打开创建电影的页面 ...  输入点内容  ... 然后点击 发布 ... 
在这里，会显示一个错误 ，MassAssignmentException  ...  这是因为 Laravel 默认会禁止所有的字段使用 Mass Assignment  ...
下面，我们可以去设置一下 Movie 模型的 $fillable 参数，去指定一下，可以使用 Mass Assignment 的字段。 
打开 Movie.php  ...  添加一个受保护的属性 ... 名字是 $fillable  ... 它的值是一个数组 ... 数组里面的项目就是可以使用 Mass Assignment 的字段 ... 这里我们先只添加一个 movie_title 字段  ... 
protected $fillable = array('movie_title');
保存 .. 回到浏览器 ... 打开创建电影的页面 ...   输入内容  ... 点击发布  ...
这次没有提示错误  ...  再打开数据库管理软件 ... 在 movies 这个表里面，可以找到刚才添加的这条记录 ... 
不过这个记录只有 movie_title 这个字段有内容  ...  movie_date，还有 movie_budget 这两个字段没有东西 ... 因为我们只设置了，可以让 movie_title 这个字段 Mass Assignment  ...  其它的字段，需要再去单独设置一下它们的值  ... 
先删掉这条记录 ...  
再回到 Movie 模型 ...  在给 $fillable 属性添加点东西 ...  加上 movie_date ...  还有 movie_budget  ... 
保存 ... 回到浏览器 ... 再去创建一个电影内容  ...  
点击发布 ... 
打开数据库管理软件  ...  这次，你会发现新添加的这条记录里面 movie_title ，movie_date，还有 movie_budget 这几个字段都有值了 ... 
只是用了一个 Input:all 得到表单里面的所有的数据 ...  因为我们用了 Mass Assignment ，并且在模型里面，设置了可以使用 Mass Assignment 的字段 ... 所以，在发布以后，这些字段会自动去匹配对应的表单元素里面的值 ... 
在使用 Mass Assignment 这个方法的时候，要非常小心，我们只对一般的字段使用这种方法，对于其它比较敏感的字段，需要单独去处理。


05-07-分页 - Pagination

分页是几乎是每个 Web 应用里都需要的功能，在 Laravel 框架里面使用分页功能非常的简单。 
下面，我们去给这个电影列表添加一个分页的功能。 设置分页，可以使用 paginate 方法 ... 
打开电影控制器 .. 在  index 这个方法里面，我们用的是 Movie 模型的 all 方法，得到所有的电影内容 ...  要分页显示的话，可以使用 paginate 方法 ... 在这个方法里面，再去指定一下每页显示的项目数量 ...   这里我们让电影列表页面每页显示 5 条记录 ... 
$movies = Movie::paginate(5);
得到的结果交给了 $movies，这个 $movies ，会传递给显示电影列表的视图  ... 在这个视图文件里面，我们可以使用 links 方法，去输出分页的链接 ... 
打开电影列表页面的视图  ..  app .. views ... movie  ...  index.blade.php ... 
在这里，使用 $movies 的 links 方法 ...  它可以输出分页的链接 ... 
{{  $movies->links() }}
保存 ...  我们再去预览一下 ...  （#浏览器）
这里，你会看到，一共会显示  5 个电影内容  ...  
在下面，还会显示一个分页链接 ...    点击链接上的数字，可以显示对应页面的内容  ...


06-01-关系 - Relationships

在应用里面，不同的数据之间会存在某种关系。关系的类型也有很多种 ...  一对一，一对多，多对多，还有间接关系等等。在定义模型的时候，可以顺便去描述一起模型之间的关系，这样在应用里面，我们就可以很方便的去使用这些关系。
比如配偶，应该就是一对一的关系。王皓跟小雪就是一对一的关系，王皓的媳妇是小雪，小雪的老公是王皓。
一对多的关系比较常见 ..  像评论和电影之间就是一对多的关系 ...  一条评论只能属于一个电影 ... 但是一部电影可以拥有多条评论内容。再比如评论和用户之间也是一对多的关系  ... 一个评论只能属于某一个用户 ... 一个用户，可以创建多条评论。
多对多的关系会复杂一点 ...  电影和电影里面的工作人员，就是一种多对多的关系  ...  一部电影里面，会包含很多的工作人员 ...   一个工作人员很可能会参与多部电影。通常我们需要一个额外的间接的数据表去存储这种多对多的关系。
间接的关系是数据与数据之间，通过一个中间人建立起的关系。比如。国家，用户，还有评论，用户里面会包含用户所属的国家的 id 号，在评论里面会包含发布这条评论的用户的 id 号。现在，虽然国家和评论之间没有直接的关系  ... 但是通过用户这个中间人，我们可以找出某个国家发布的所有的评论内容 ... 
多样化关系就是某种数据，可以属于其它的不同的数据类型。比如说图片，评论，还有电影 ...  在发布评论的时候，我们可以上传图片，在发布电影的时候，也可以上传图片...  
在图片这个表里，可能有这样几个字段，图片的 id 号，图片的路径，还有图片的拥有者的 id 号，还有图片拥有者的类型，这个类型可能是评论，也可能是电影。
使用多样化的关系，我们可以找到某个电影的所有的图片，或者某个评论里面的所有的图片 ... 而且我们还可以判断出图片的拥有者的类型。
最后我们再来了解一种多对多的多样化关系。
文章，视频，还有标签。它们之间应该就是一种多对多的多样化关系。
文章可以拥有多个标签 ... 不同的文章可以使用同一个标签 ... 不同的视频也可以使用这个标签..  
这种关系，通过需要这样几个表 ...  文章，视频，标签，还要有一个存储标签和它的拥有者的一个表。在这个表里，要存储一下标签的 id  ，标签使用者的 id ，还有这个使用者的类型 ...


06-02-定义一对多的关系

在我们的应用里，评论与电影之间的关系，就是一对多的关系。下面，我们可以在它们之间去创建这样的关系，然后再去看看怎么样利用这种关系。
我们先在电影模型里去描述一下这种关系。打开电影模型 ... 在 app ... models 目录的下面 ...  打开 Movie.php
在这个模型里，先去定义一个方法，在应用里使用这个方法，可以利用这种关系。我们可以叫它 reviews  ...  这应该是一个公开的方法 ...  public function reviews()  ..  在这个方法里，输入一个 return ... 返回一些东西...  返回的是  ...  $this ... 表示当前的电影模型的实例 ...  使用一个 hasMany ...  去描述一对多的关系  ...  在这个方法里，指定一个模型作为它的参数 . ..  这个模型应该就是 Review 模型 ... 
它的意思就是，电影 Movie 这个模型，拥有多个 Review 模型 ... 
    public function reviews() {
        return $this->hasMany('Review');
    }
Eloquent 会自动去找 reviews 里面的 movie_id 这个外键 ... 如果在 reviews 表里，你定义的外键不是这个名称 ... 可以把这个外键的名称作为 hasMany 的第二个参数传递进去 ... 
反向关系
下面，我们需要再到 Review 这个模型里，描述一下它跟 Movie 模型的关系 ...   到目前为止我们还没有去创建 Review 模型 .. ..  下面，去创建一下 ... 
在 models 里面新建一个文件 ... 命名为 Review.php  ...  然后在这个文件里去定义 Review 模型 ...  class Review extends Eloquent  ... 
再设置一下这个模型的主键 ...  设置为 review_id  ...  不设置这个 primaryKey 属性的值 ... Eloquent 默认会使用 id 作为这个模型的主键 ... 
<?php
class Review extends Eloquent {
    protected $primaryKey = 'review_id';
}
下面，我们再去描述一下它跟 Movie 之间的关系  ..  一条评论，属于某个电影 ... 所以，这里要用 belongsTo 去设置一下 Review 模型所属的模型 ...
同样先设置定义一个公开的方法 ...  public function...  方法的名字是 ...  movie ..   return ... 返回  $this .. 然后用 belongsTo 这个方法 ..  Review 模型所属的模型是 Movie
    public function movie() {
        return $this->belongsTo('Movie');
    }
在这里，Eloquent 同样会去找 movie 下划线 id 这个外键 ...   如果你在创建数据表的时候，外键字段不是用这种形式命名的 .. 可以在 belongsTo 方法的第二个参数里面，手工去指定一下... 
这样我们就成功的描述了 Review 模型，还有 Movie 模型之间的关系。在下面的视频里，我们再去看一下怎么样利用这种关系。


06-03-利用一对多的关系

在模型之间建立好关系以后，我们就可以去利用这种关系了。比如可以找出某个电影的所有的评论，或者评论所属的电影。我们也可以去查询关系，比如找出有评论的电影，或者评论的数量大于 5 的电影 ... 
先打开 MovieController 这个控制器 ... 在它的 index 方法里，我们去试一下 ...  先注释掉这里面的几行代码 .. 
下面我们可以找出所有的有评论的电影 .. 使用 Movie 这个模型 ...  调用 has 这个方法 ...  方法里面，指定一下跟它对应的关系  ..  这里就是 reviews  ...  这个 reviews 就是我们在 Movie 模型里面，定义的那个用来描述它跟 Review 模型关系的那个方法 ...  
在后面，可以用一个 get 方法去获取数据  ...  这里，我们用一个 lists 方法 ...  它可以让我们只列出指定的字段 ...   movie_title 
$data = Movie::has('reviews')-lists('movie_title');
再去把获取到的数据输出到屏幕上 ..
print_r($data);
保存 ... 回到浏览器 ...  在这里显示的电影都是有评论的 ... 
在 has 方法里，也可以去设置一下条件 ..  比如找出评论数大于 3 的电影  ... 
（#返回）把比较操作符作为 has 方法的第二个参数  ...  用一个 大于号 ..  比较的值，可以作为它的第三个参数  ..  大于 3  ... 
$data = Movie::has('reviews', '>', 3)->lists('movie_title');
（#浏览器）在返回的结果里，只有 xxx 这部电影，因为只有它的评论数大于 3 。
动态属性
（#返回）要找出跟某部电影相关的所有的评论 ... 可以这样 ...    
$data = Movie::find(1)->reviews
（#浏览器） 这里返回的结果就是 id 号是 1 的这部电影的所有的相关的评论。
（#返回）..   反过来也是一样的 ...  比如要找到某个评论所属的电影  ...  先去找到一条评论 ... 再去访问它的 movie 这个属性 ... 
$data = Review::find(1)->movie
（#浏览器）返回的结果就是id 号是 1 的评论所属的电影 .... 
（#返回）在这里我们可以使用动态属性去访问这个电影记录里面的东西 ...  比如输出它的标题 ... 可以这样 ...  直接在 movie 的后面 ... 访问它的 movie_title  ... 
$data = Review::find(1)->movie->movie_title;
（#浏览器）这里显示的就是 id 号是1 的评论所属电影的电影标题 ...


06-04-多对多关系 - 准备

想要演示多对多关系的话，我们需要再去准备两个数据表，一个是人物数据表，可以叫它 people ... 里面存储的是电影的相关的从业人员，然后还需要一个存储电影人物和电影关系的表。一般这个表的命名规范是用两个相关联的表的单数形式的名字，中间用一个下划线分隔一下 ... 表里面，需要两个字段 .... 分别是相关数据的 id 号，这里应该就是 电影的 id 号，还有参与这部电影的人物的 id 号。字段的名称一般使用表的名称加上下划线，还有再加上 id 。在我们这里，这两个字段的名字应该是 movie_id  还有 people_id .... 
下面，我们去创建这两个表的结构 ..  先去添加一个创建 people 表的 migration ... 打开命令行工具 ... php artisan ... 使用 migrate 命令的 make 方法 ...  这个 migration 的名字是 create_people_table ... 后面再加上一个 create 选项 ... 指定一下要创建的数据表的名字 ...  people
php artisan migrate:make create_people_table --create=people
再去添加一个创建 movie_people 表的 migration ... 
php artisan migrate:make create_movie_people_table --create=movie_people
下面再回到应用项目  ... 打开 app ... database ... migrations ...  先去设计一下 people 表的结构 ...  在 up 这个方法里面，设计一下它的 schema
表的主键可以命名为 people_id  ...  再去添加一个人物名称字段 ... 字段的类型是字符串 ... 可以使用 string 方法去创建这个字段 ...  
再添加一个人物出生地的字段   ... 同样是一个字符串类型的字段 ... 
再添加一个 date ，日期类型的字段 ...  里面可以存储人物的生日 ....  最后的这个 timestamps 方法，会自动生成一个 created_at 还有 updated_at 字段，分别存储的是人物记录的创建时间，还有更新的时间。
          Schema::create('people', function(Blueprint $table)
          {
               $table->increments('people_id');
               $table->string('people_name');
               $table->string('people_location');
               $table->date('people_birth');
               $table->timestamps();
          });
下面再去设计一下电影与人物关系的表的结构 ... 
在这个表里，不需要这个自动增加的 id 字段 ...  也不需要存储记录的创建时间，还有更新的时间 ..   先添加一个整数字段 ... 使用 integer 方法 ..字段的名称是 movie_id  ... 这里面放的是电影的 id 号 ..  然后使用 unsigned 方法，要求这个字段必须是正数  ... 用同样的方法，再去添加一个 people_id 字段  ...  
最后，可以再加上一个工作字段  ... 这个字段里面，可以存储人物在某部电影上的工作是什么 ... 比如演员，摄影，导演，编剧等等  ... 这个字段是一个字符串类型的 ... 
          Schema::create('movie_people', function(Blueprint $table)
          {
               //$table->increments('id');
               $table->integer('movie_id')->unsigned();
               $table->integer('people_id')->unsigned();
               $table->string('job');
               //$table->timestamps();
          });
Seed
下面， 我们再去往这两个数据库里创建一些演示的内容  ...  可以使用 seed ...   在这个课程的资料包里，你可以找到两个 Seeder 文件 ... 
把它们放在 app  ... database  ... seeds 这个目录的下面 .. 
再去编辑一下 DatabaseSeeder ...  
          $this->call('PeopleTableSeeder');
          $this->call('MoviePeopleTableSeeder');
命令行
保存 ... 再去执行一下这两个 migration  ...  同时再去 seed 一下 ...  这里我们可以使用 migrate 命令的 refresh 方法 ...  后面再加上一个 seed 选项 .. .  先回滚所有的 migration ，然后重新再执行一次  migrate ... 同时 seed 数据到数据库里面。
php artisan migrate:refresh --seed 
成功以后，再打开数据库管理工具 ...   这里会多出两个数据表. .. people... 还有 movie_people ...  先看一下 people 这个表 ...  你会看到这里面有了一些演示的数据  ... 
再看一下 movie_people 表 ...  同样有了一些演示的内容 ...


06-05-多对多关系 - 定义

在这个视频里，我们去定义一下多对多的关系。电影还有人物之间的关系是多对多的关系，这个关系会存储在 movie_people 这个表里 ... 
我们先去给 people 表创建一个 model  ... 在 app 目录的下面 ... models 目录里面，创建一个文件 ... 命名为 People.php ...   定义一个类 ...  名字是 People ... 让它去继承 Eloquent  .. 
<?php
class People extends Eloquent {
}
在这个类里，先去设置一下跟这个模型对应的数据表的名字 ...  可以去设置一下 $table 属性 ...  跟它对应的数据表是 people  ...  如果不设置这个属性的话 ... Eloquent 会认为这个模型的数据表是 peoples  ... 
protected $table = 'people';
去指定一下 people 表的主键  ... 可以通过 primaryKey 这个属性去设置 ..  设置为 people_id .
protected $primaryKey = 'people_id';
多对多关系
然后再去定义它跟 movies 表之间的多对多的关系 ...  先定义一个公开的函数 ...  public function ... 名字可以叫做 movies  .. .. 在这个函数里，输入 return  ... $this->  ...  然后用 belongsToMany 这个方法 ...  方法里面的参数是 movies 表的模型的名字 ...  Movie  ... 
    public function movies() {
        return $this->belongsToMany('Movie');
    }
这个 movies 方法，可以返回跟 People 模型相关联的所有的 Movie 模型 ...  也就是返回的是跟人物相关的所有的电影 ... 
Eloquent 会认为你的数据表里面，有一个 movie_people 表 ...  如果你不是用这样的形式命名这个保存电影和人物之间关系的数据表 ... 可以把你自己定义的表的名称，作为这个 belongsToMany 这个方法的第二个参数  ... 
在这个保存关系的表里面，Eloquent 也会认为你的表里会包含  movie_id  ... 还有 people_id 这两个字段  ... 如果你用的是其它的名字 .. 可以把它们作为 belongsToMany 的第三个，还有第四个参数传递进来。
下面，我们还需要到 Movie 模型里，去定义这个关系  ...
打开 Movie.php  ...   在它里面，再去定义一个公开的函数  ...  可以叫做 people  ...  然后返回使用 belongsToMany 方法得到的跟电影相关的所有的人物 ... 
    public function people() {
        return $this->belongsToMany('People');
    }
withPivot
在这个关系后面，可以再加上一个 withPivot ，去指定一下要用到的在中间表里面的字段 ... 在我们的 movie_people 表里面，有一个 job 字段，存储的是人物在电影上的工作 ... 如果你想在电影页面上输出相关人物的同时，也需要用到这个人物在电影上的工作，在这里，我们需要去指定一下。  
->withPivot('job')
现在， 我们就定义好了电影和人物之间的多对多的关系，在下面的视频里，我们再去看一下怎么样利用这个关系。


06-06-使用多对多的关系

这个视频我们再去看一下怎么样利用模型之间的多对多的关系，其实方法跟使用一对多的关系是一样的。比如我们要找出跟某部电影相关的所有的人物 ... 
先打开 MovieController.php 这个控制器 ...  我们先在 index 这个方法里，去试一下 ... 注释掉这里面的几行代码 ... 
比如我们要找出 id 号是 1 的电影相关的所有的人物 ...   Movie  ... .find(1)  ... 再调用它的 people 这个属性 ...  这个属性就是在 Movie 模型里面，我们定义的那个得到相关人物的方法的名字 ... 
给得到的结果起个名字 ...  然后再把它输出到屏幕上看一下 ..
         $data = Movie::find(1)->people;
         print_r($data);
（#浏览器）这里显示的都是 id 号是 1 的电影相关的人物 ...   （#返回）在它后面，我们可以再加上一个 toArray 方法 ... 把得到的结果转换成数组的形式 ... 
 $data = Movie::find(1)->people->toArray();
（#浏览器）这样会更清楚一点 .. 
想得到某个人物参与的所有的电影作品，我们可以这样 ...  使用 People 模型 ... 用 find 方法先找出这个人物 ... 比如 id 号是 1 的这个人物 ..
然后再访问它的 movies 这个属性 ...  这个属性就是我们在 People 模型里面，定义的那个得到所有相关电影的方法的名字 ... 
$data = People::find(1)->movies->toArray();
（#浏览器）
返回的结果就是 id 号是 1 的这个人物所有的参与过的电影。


06-07-在电影页面上显示相关的人物与评论

这个视频我们利用电影跟人物，还有评论之间的关系，去创建一个电影页面，在这个电影页面上，显示出跟它相关的人物，还有评论。
先去修改一下电影控制器里面的 show 方法 ...   打开 MovieController.php ... 找到 show 这个方法 ... 
这个方法是处理请求查看单个资源用的 ...   它会接收到请求查看的电影的 id 号 ...  使用这个 id 号，我们可以查询出请求的电影 ..  然后把找出来的结果发送给一个视图去处理 ... 
$movie 等于 .... 使用 Movie 模型 ...  因为我们需要在电影页面上，显示相关的人物，还有评论 .. 所在，这里可以使用一个 with 方法 ... 去指定一下这两个关系 ...  reviews  ... 还有 people  ...  然后再用 find 方法去找出这部电影  .... 
这样找出来的结果 ... 会包含电影相关的人物，还有评论 ...  因为我们使用了 with 这个方法 ... 
public function show($id)
{
  $movie = Movie::with('reviews', 'people')->find($id);
}
再去给它指定一个视图 ..  return ... View . make  ... 视图是 movie 目录下面的 single.blade.php  这个文件 ...   再用一个　with 方法，把上面查询出来的结果，传递给这个视图 ... 
          return View::make('movie.single')->with('movie', $movie);
创建视图
下面，再去创建这个视图 ...  app ...  views  ... 在 movie 这个目录的下面，创建一个视图文件 ... 命名为 single.blade.php  ....  再去编辑一下它 ... 
这个视图使用 movie 目录下面的 ... layout 目录里面的 master 这个布局文件 ... 
定义一个 content 区域  ... 
然后在这里面，先输出电影的标题 ...  用一个 h1 标签 ... 上面添加一个 page-header 类 ... 
输出的内容是从电影控制器的 show 方法里面传递过来的 movie 这个对象里面的 movie_title 这个属性 ...  它就是电影的标题 ... 
<h1 class="page-header">{{ $movie->movie_title }}</h1>
然后我们再去输出跟这部电影相关的所有的人物内容  ...   先输入一个标题 ...  h5  ... 人物 ... 一组无序列表标签 ... 在它里面，可以使用一个 foreach 循环，去输出相关的人物 ... 
所有的相关的人物包含在 movie 对象里面的 people 这个属性里面 ..   @foreach  ... 括号 ...  $movie->people  as $people  ...   在循环结束的地方，用一个 endforeach  ... 
在它里面，可以先输入一组列表标签  ...  列表里面的内容就是人物的名称  ...  它是在 people 的 people_name 这个属性里面。在后面，我们还可以输出这个人物在这部电影上的工作 ... 可以访问  people 的 pivot 属性里面的 job 属性  ..  表示利用中间表，也就是 movie_people 表里面的 job 这个字段 ... 
在定义多对多关系的时候，我们在 Movie 模型里面，已经使用 withPivot 方法指定了可以使用 job 这个字段 ... 所以在这里，可以访问 pivot 属性里面的这个 job 属性输出在中间表里面的 job 字段的值。
    <h5>人物</h5>
    <ul>
    @foreach ($movie->people as $people)
        <li>
            {{ $people->people_name }} - {{ $people->pivot->job }}
        </li>
    @endforeach
    </ul>
预览
我们先去预览一下 ... 打开浏览器 ...   打开一个电影页面  ... 比如 id 号是 1 的电影  ... movies/1  ...
在这个页面上，会显示电影的标题 ...  还有跟它相关的人物 ... 
相关评论
下面再去把跟当前电影相关的所有的评论要输出到这个页面上 ...  （#返回）
先输入一个标题 .. h5  .. 评论 ... 然后是一组无序列表 ...   在它里面，同样使用一个 foreach 循环，去输出评论的内容 ...  跟这个电影相关的所有的评论内容是在 reviews 这个属性里面 ...   要输出评论的内容，可以访问 review_content 这个属性 .. 
    <h5>评论</h5>
    <ul>
    @foreach ($movie->reviews as $review)
        <li>
            {{ $review->review_content }}
        </li>
    @endforeach
    </ul>
保存 ... 再去预览一下 ... 
现在，在电影页面上，会显示出跟这部电影相关的人物，还有属于这部电影的所有的评论。


06-08-在电影页面上发表评论 - 准备表单

在电影页面上我们可以添加一个发表评论的表单，表单里面有一个文本区域字段 ... 还有一个发表评论的按钮 ...  在文本区域里面输入内容，点击发布评论，可以保存评论内容，同时设置好它跟电影之间的关系，所以，会直接在电影页面上显示出评论的内容。
实现这个功能，我们得去设计一个这样的表单，还有去添加一条路由，再创建一个处理评论的控制器。
下面，我们先去准备一个表单 ...  在显示电影页面的这个视图文件里面，可以去添加这个表单 ... 
先用 Form 类的 open 方法，添加一个 form 标签的开始的那个标签 ...   给这个方法添加一个 array 参数   ...  然后设置一下相关的属性 ... 
首先设置一下 url  属性 ...   也就是点击提交按钮以后，把这个请求发送到的那个地址 ...  这个地址应该是 movies 斜线 ... 后面加上电影的 id 号 ...  接着是 reviews ... 
再设置一下表单的提交的方法 ... 使用一个 method ... 设置成 POST  ...  这样提交这个表单以后，处理评论的控制器里面的 store 方法，会接收到这个请求 ... 
这里为了好看一点，我们再去添加一个 css 类 ... 这个类的样式是 bootstrap 框架提供的 ... 
    {{ Form::open(
    array(
        'url' => 'movies/' . $movie->movie_id . '/reviews',
        'method' => 'POST',
        'class' => 'form-horizontal'
    )) }}
表单结束的地方，用一个 Form 类的 close 方法 ... 
{{ Form::close() }}
然后在里面，再去添加两个表单元素 ...   先要添加一个文本区域，可以输入评论的内容  ...  给这个文本区域先去添加一个 label ...   这个表单的设计是 bootstrap 框架提供的 ..  所以，需要一点额外的 html 标签，还有css类 ... 
用 Form 类的 label 方法去添加标签 ...  名字是 review_content  ...  标签上的文字是 评论内容 ...   再给它上面添加几个 css 类 ... 
然后再去添加文本区域元素 ...  用的是 Form 类的 textarea 方法 ...  这个元素叫做 review_content ... 可以跟评论这个数据表里面的存储评论内容的那个字段的名称一样 ...  也去给它添加几个 css 样式 ..  再设置一下它的 rows 属性 ...  指定一下它的高度 .. 
        <div class="form-group">
            {{ Form::label('review_content', '评论内容', array('class' => 'col-sm-2 control-label')) }}
            <div class="col-sm-10">
            {{ Form::textarea('review_content', '' , array('class' => 'col-sm-10 form-control', 'rows' => '3'))}}
            </div>
        </div>
最后，我们再去添加一个 发表评论 的按钮 ...  先加上一点额外的 html 标签  ...  然后用 Form 类的 submit 方法去添加这个提交的按钮 .. 
在这个按钮上，再去添加两个 css 类 ... 
        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                {{ Form::submit('发表评论', array('class' => 'btn btn-default')) }}
            </div>
        </div>
完成以后，保存一下 ..   回到浏览器 ..  打开一个电影内容的页面 ...  movies/1 
在这个页面的下面 ...  会显示一个提交评论用的表单 ...


06-09-在电影页面上发表评论 - 控制器

这个视频我们去创建一个评论控制器。打开命令行工具 ...  可以使用 artisan 的 controller:make 去创建这个控制器  ...   要创建的控制器可以叫它 ReviewController  ... 
php artisan controller:make ReviewController
完成以后，可以在 app  ...  controllers 这个目录下面找到它 ...   
打开以后，再找到 Resource 类型的控制器里面用来处理存储内容的请求，使用的方法 ...   就是这个 store  ... 
因为我们不但要保存评论的内容，还要保存它跟电影内容之间的关系 ... 也就是在保存评论内容的时候，我们还得保存评论所属的电影的 id 号 ... 
在提交评论以后，提交的地址里面，会包含电影的 id 号 ... 不过，如果你想在这个方法里面，得到这个电影的 id 号，需要去设置一下路由 ... 
打开 app 目录下面的 routes.php  ... 添加一条路由  ...  Route  ... 使用的 resource 方法，去给它指定一个 resource 类型的控制器 ... 
在这个方法里，先设置一下这个路由处理的基本的地址 ...  应该是 movies 斜线 一组花括号 ...  movie_id  ...  接着一个斜线 ... 然后是 reviews  ...  再把这个路由使用的控制器作为它的第二个参数传递过来 ...  ReviewController  ... 
Route::resource('movies/{movie_id}/reviews', 'ReviewController');
这样如果说请求里面包含电影的 id ，我们就可以在控制器的方法里面，得到它 ... 
store
再回到 ReviewController 控制器  ... 
在 store 这个方法里，给它一个参数 ..  叫做 $movie_id  ...  
然后我们先去创建一个评论模型的实例 ...  
$review = new Review; 
再去设置一下它的 review_content 这个属性的值  ... 它的值就是用户在评论内容这个文本区域里面输入的东西 ...  可以使用 Input 类的 get 方法得到它的值  .. 
$review->review_content = Input::get('review_content');
除了要保存评论内容以外，我们还得保存它跟电影内容之间的关系  ...  可以把它的 movie_id 这个属性的值，设置成请求里面发过来的 movie_id 的值  ... 
$review->movie_id = $movie_id;
最后，可以使用 save 方法，保存一下 ...  
$review->save();
这是一般的保存评论的方法 ...    
附加
还有一种方法 ... 就是可以把评论附加到电影内容上。先注释掉前面这两行代码..
然后，先用 Movie 模型的 find 方法，找到跟这个评论相关的电影  ... 再使用它跟评论之间的关系 ... reviews()  ... 然后，再用一个 save 方法 ... 
在这个方法里面，把在上面创建的评论模型作为它的一个参数 ... 
Movie::find($movie_id)->reviews()->save($review);
重定向
保存以后，我们可以用户带回到评论所属的电影页面上 ...  
return Redirect::to('movies/' . $movie_id);
预览
保存 ... 去浏览器里预览一下 ...  
在文本区域里面，输入点内容  ...   
然后点击 发表评论 ...   成功以后会把用户带回到当前这个电影页面上 ... 
在这里，你会看到，刚刚发布的评论内容 ....


06-10-插入与取消多对多关系 - attach 与 detach

插入多对多的关系，可以使用 attach 或者 sync 方法。比如我们要找给某部电影添加相关的人物，首先可以找到这部电影，然后利用它跟人物之间的多对多的关系，再调用 attach 方法，在方法里，可以指定跟这部电影相关人物的 id 号。
下面，我们可以去演示一下。
打开 routes.php ，在这里我们去添加一条路由 ...   添加一个 get 类型的路由 ...  地址是 related-people  ...  这里再用一个匿名函数 ... 这样请求查看 related-people 这个地址的时候，就会去执行在这个匿名函数里面的代码 ... 在这里，我们可以去演示一下插入多对多的关系..
Route::get('related-people', function() {}
 ...  比如我们想去给 id 号是 2 这部电影添加一个相关的人物。先去看一下这部电影 ... 打开它的页面 ...  movies/2 
在人物这里，是一个空白的列表，说明还没有给它指定相关的人物。
（#返回），先找到 id 号是 2 的这部电影 ...   可以使用 Movie 模型的 find 方法  ...  把电影的 id 号传递给这个方法。
$movie = Movie::find(2);
接着再去使用电影模型跟人物模型之间的关系 ...  就是我们在 Movie 模型里面定义的 people 方法 ...  再使用 attach ，去给这个电影内容添加相关的人物 .. 
比如我们让它去关联 id 号是 x 的这个人物 ...  在 attach 方法里面，输出这个 id 号   ..   这样，会在电影和人物的中间表里面，保存这部电影的 id ，还有在 attach 方法里面指定的这个人物的 id  ... 
在这个表里，还有一个 job 字段 ... 想同时去设置一下这个字段的值，可以作为 attach 方法的第二个参数传递进去  ...  这个参数是一个数组  ..  数组里面的每个项目就是字段的名称，还有要保存的对应的值  ... 
$movie->people()->attach(x, array('job' => '演员'));
（#返回）回到浏览器。
打开 related-people  ... 
然后再去查看一下 id 号是 2 的这部电影 ... 在人物这里，你会看到，刚才用 attach 方法给它添加的相关的人物 .. 
打开数据库管理软件 ...  找到 movie_people 这个表 ...  在这里，你会看到一行新的记录 ...  movie_id 是 x ，people_id 是 x  ...  job 字段的值是 演员 ... 
移除
删除电影和人物之间的关联，可以使用 detach  ...   
(#返回)，在这个方法里，指定要取消关联的人物的 id 号 ... 
$movie->people()->detach(1);
（#返回），再访问一次 related-people 这个地址 ... 
回到电影页面  ... 
你会看到，已经取消了之前用 attach 设置的那个关联。


06-11-sync

想要同时插入多个多对多的关系，可以使用 sync 这个方法。比如我可以同进为某部电影去关联多个人物，同时也可以设置中间表里面的字段，在我们这里，就是 job 这个字段。
打开 routes.php ...  还是在 related-people 这个路由里去试一下。
首先可以找到某部电影，用 Movie 模型的 find 方法。然后再利用它跟 People 模型之间的关系。再去使用 sync 这个方法 ...  这个方法的参数是一个数组，数组里面的项目可以是要关联的资源列表 ... 这里就是人物内容的 id 号 ...   比如要给 id 号是 2 的这部电影去关联 id 号是 x, x,x 的这几个人物 ... 
$movie->people()->sync(array(1,2,3));
(#浏览器) 去访问一下 related-people 这个地址 ...  
再回到 id 号是 2 的这个电影页面 ...  
在人物这里，你会看到，刚才使用 sync 方法关联人物。我们可以再去数据库里看一下 （sequel pro）... 
在 movie_people 表里面，会找到几条记录 ..   这就是刚才用 sync 方法插入进来了 ...  不过这些记录里面没有存储 job 这个字段的内容  ... 
(#返回)，我们可以先取消关联这些人物 ...  用的是 detach 方法 ... 
$movie->people()->detach(array(1,2,3));
(#浏览器)，访问一下 related-people 这个地址 ...  这样会为 id 号是 2 的这部电影，取消关联指定的人物 ... 
下面，我们再去试一下 sync 方法，这里，在关联人物的同时，去设置一下 job 字段的内容  ... 
要关联的东西还是在一个数组里面 ...  在这个数组里面，每个项目可以使用资源 id 号，再加上对应的中间表字段的名称还有值 ... 
先是要关联的人物内容的 id 号 ...  用它作为这个项目的 key ，然后再设置跟它对应的值 ... 也就是中间表的字段还有对应的值  ...  这些内容可以再放在一个数组里面 ...  再用这样的形式，去设置一下其它的要关联的人物 .. 
    $movie->people()->sync(array(
    1 => array('job' => '演员'),
    2 => array('job' => '演员'),
    3 => array('job' => '演员')
    ));
保存 ...  再去请求一下 related-people  ... 这个地址 ... 这样可以执行我们在处理这个地址的路由里面设置的代码 ... 
然后再回到电影页面  ...


06-12-创建关联的同时创建所关联的模型

在关联某个模型的时候，如果说这个模型还不存在的话，我们可以先去创建它，然后再用 save 方法去保存这个关联。比如， 我们在为电影关联人物的时候，如果人物还不存在 .. 可以先去创建一下人物 ...  然后再把它跟电影关联到一块儿 ...  下面，我们去演示一下 ... 
比如要给 xxx 这部电影关联 xx 这个人物 ...  你可能已经用了一些方法，判断出这个人物没在我们的数据库里 ...  然后可以先去创建一个人物模型 ... 
同样在这个 related-people 这个路由里面，去做这个试验 ... 
先新建一个人物模型 ...  
$people = new people;  
再去设置一下它的相关的属性 ...  
高登
美国
1981-02-17
$people->people_name = '金凯瑞';
$people->people_location = '美国';
$people->people_birth = '1963-06-09';
我们可以再把这个新创建的 people 模型，关联到 id 号是 2 的这部电影上 ...  使用电影和人物模型之间的关联  ... 再用一个 save 方法 ... 在这个方法里，指定要保存并且关联的人物 ...  就是上面创建的这个 $people  ... 
如果想再去设置一下中间表里面的字段 ... 可以放在第二个参数里面 ...  一个数组  ...  然后是字段的名称 ... 还有对应的值  ... 
    $movie->people()->save($people, array('job' => '演员'));
保存 ... 再去访问一下 related-people  ... 
再回到电影页面 ... 在这里，你会看到跟这个电影相关的人物列表里面，会有 xxx  这个人物 ...  
打开数据库管理软件  .. 
在 people 这个表里，你会看到新创建了一条人物记录 ...   它的 id 号是 x 
在 movie_people 表里面，可以找到这个人物跟 id 号是 x 的电影的关系 ...


