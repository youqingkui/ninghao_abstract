00-00-课程介绍

使用 PhoneGap 我们可以用已经熟悉的 HTML ，CSS，还有 JavaScript …. 去针对移动设备来开发应用 …  我们可以使用 HTML 和 CSS 来设计应用的界面 …
用 JavaScript 跟设备去沟通 ..  来调用设备的一些原生的功能 …  比如 相机，加速仪，罗盘，全球定位等等 … 
我们只需要使用这些统一的 JavaScript 接口 … 然后再配合不同的平台的开发环境 … 去把应用编译成可以在不同平台上使用的应用程序 …  比如 iOS 平台 … Android 平台 … 还有 Windows Phone 等等 …


01-01-安装与配置 Android SDK

想要为 Android 平台的设备去开发应用，我们需要先安装一下 Android SDK …  SDK 的意思就是 Software Development Kit … 软件开发的工具包 …  Android 的开发环境支持多种平台，你可以在 Windows ，Mac ，或者 Linux 平台上使用 Android SDK 去开发 Android 应用程序  … 
先打开这个地址 … developer.android.com/sdk …
这个 Android SDK 里面包含了很多东西 ，Eclipse 软件，Android SDK ，Android 模拟器等等 …  
点击页面右边的这个下载按钮，可以下载 Android SDK …  
它会判断我们当前使用的系统，下载对应版本的 SDK …  
如果你想选择下载的话 .. 可以点击页面下方的这个 Download for Other Platforms ，在这里，你可以选择 Windows 版，Mac 版，或者 Linux 版的 SDK ....
这里我已经事先下载好了 … 找到下载下来的压缩包 …  先解压一下 ..
里面会有两个文件夹 … eclipse … 还有 sdk …  
我们可以重命名一下解压以后的这个文件夹  … 命名为 Android … 然后找一个熟悉的地方 … 把它放在里面 … 这里我们把它放在 应用程序 里面 …  
PATH
然后在应用程序里，再打开 Android …  SDK …  
以后面的视频里，我们会使用 PhoneGap 的命令行工具去创建应用项目，去编译或者安装应用到设备上 …   想要让这个命令行工具能去处理 Android 平台的应用 … 
我们要做这个 SDK 目录下面的 tools 还有 platform-tools 这两个目录的路径包含到系统的 PATH 环境里面 … 
Mac 用户可以去编辑一下 .bash_profile 文件  … 
先打开终端工具 … 然后输入 sudo vim ~/.bash_profile … 使用 vim 工具去编辑一下当前用户的 .bash_profile 文件  …
如果这个文件不存在的话，会去创建一个 … 
按一上小 i 键 … 输入 export PATH=${PATH}:
冒号的后面，可以再去输入 tools 还有 platform-tools 这两个目录的位置  …  是在 
export PATH=${PATH}:/Applications/Android/sdk/tools:/Applications/Android/sdk/platform-tools 
再输入一个冒号，去添加 tools 目录的位置 ….
ESC 退出编辑模式 … 输入一个冒号 …  wq ，保存并退出 …
下面我们就可以使用 tools 还有 platform-tools 里面的一些命令行工具了 … 
验证一下，可以输入 android  … 回车 …  这样可以打开 Android SDK 的管理工具 ….   如果能打开就说明已经可以用终端工具去执行 android 相关的命令了 …


01-02-手工安装 Android SDK

录这个视频的时候，Android 最新的版本是 4.3 …  这里显示，我们已经安装了 4.3 版本的 SDK …  还有设备的模拟器 …
不过我在使用 4.3 测试的时候，PhoneGap 总是不能正常的编译好 Android 应用 …  解决的办法是可以安装 Android 4.2 … 
找到 Android 4.2 … 然后再勾选一下它下面的 SDK Platform …   还有 ARM EABI v7a System Image … 
再点击右下角的 Install pactages 去安装 ..
但是国内用户这样安装可能会有问题 … 很多时候我们连接不上 Google 的下载服务器 …
所以，我们需要手工去安装这个 4.2 版的 SDK …   在这个地址里，你可以下载到所需要的东西 …. 
先找到 android-17_r01.zip … 解压一下 …  把这个文件夹命名为 android-17
再打开 SDK 所在的目录  … 应用程序 .. Android  … SDK …   把刚才解压得到的文件夹放在 platforms 这个目录的下面 …
再找到  sysimg_armv7a-17_r02.zip 这个文件 … 解压  ..
回到 SDK 目录  … 打开 system-images  … 在这里新建一个文件夹 … 命名为 android-17 …
再把刚才解压得到的东西放在这个新建的目录下面 …  
然后关掉 Android SDK 管理工具 …  再重新打开它 …
你会发现 … 我们已经安装好了  Android 4.2 ….


01-03-配置 Android 虚拟设备

想要使用 PhoneGap 的命令行工具去把应用安装到 Android 的模拟器，我们还得去配置一下 … 
打开 应用程序  .. Android … eclipse   下面的 …   Eclipse
打开 Window 菜单 ..  选择 Android Virtual Device Manager  …  Android 虚拟设备管理工具 ..
点击 New 去新建一个虚拟设备 … 
打开这个 Device 列表  … 在这里，你可以选择一个要虚拟的设备 … 比如这个 Nexus One … 
AVD Name  … 就是虚拟设备的名称  … 叫它 Nexus One ..
Target，目标系统  …  选择 Android 4.2.2 ….   
下面还有一些选项，可以进一步去配置这个虚拟的 Android 设备 …  
Back Camera … 可以模拟手机的相机功能 … 默认是 none ，没有相机 ..  如果选择  Emulated ，会给我们虚拟一个相机的功能 ..
如果选择 Webcam ..   会把电脑的摄影头虚拟成设备上的相机 …  这里我们可以选择 Emulated ..
Memory Options 是跟设备内存相关的设置 …
Internal Storage .. 是设备的存储空间的大小 …   SD Card 可以给设备添加一个虚拟的 SD 卡 … 
在这里，我们可以指定这个 SD 卡的大小 …    设置成 1000 MB  …
然后点击 OK …
现在，我们就配置好了开发 Android 应用需要的所有的工具 … 


01-04-在 Windows 系统上安装 Android SDK

Android SDK 支持在多种平台上运行，这个视频我们来看一下在 Windows 平台上安装 Android SDK  … 先打开 developer.android.com/sdk …
在这里我们可以下载在不同平台上运行的 Android SDK …  点击页面右边的下载按钮 … 它可以自动判断我们当前使用的系统，然后下载对应版本的 SDK …
在这里需要先勾选一下同意许可协议  …  然后再选择操作系统的位数 …  这里我们选择 64 位的 SDK …
点击 Download 按钮 … 就可以下载了 …
不过这里我提前下载好了 … 找到下载下来的 SDK …   先解压一下 ….  把它放在桌面上 … 
解压以后重命名一下这个目录  …  修改成 Android …    可以再打开看一下 …
这里面有 eclipse 开发软件  … 还有 Android sdk … 另外还有一个可以管理 SDK 的工具 …
我们可以把它解压以后的 SDK 软件包 … 放在 C 盘的根目录下面 …   
环境变量
下面我们要去配置一下系统的环境，让我们的系统可以执行 android 相关的命令 … 
在资源管理器上面 … 右键点击 计算机 …
点击边栏上面的 高级系统设置 …  
在 高级 这个选项卡里面 …  打开 环境变量 …
然后在 系统变量 这个区域里面 …  选中  Path 变量 …  点击 编辑 …  
在这个 变量值  这里面 …  我们需要指定 Android SDK 软件包里的 sdk 目录下面的 tools 还有 platform-tools 这两个目录的路径  …
先输入一个 ; 号分隔一下 …
然后输入 C:\Android\sdk\  …  在这里面 …  我们可以找到 tools 还有  platform-tools …
回过来 … 再输入 tools …  下面再去指定 platform-tools 的路径  … 
同样是在 C:\Android\sdk\ …   platform-tools 
输入好以后，点击确定 …. 确定 … 再确定 
测试
下面我们可以打开命令提示符工具… 去测试一下 ….  搜索 cmd …
输入 android  …. 回来 …
这里出现提示 … 说我们的系统里面没有安装 java … 
在下面的视频里我们再去看一下 … ﻿


01-05-在 Windows 系统上安装 Java 与 Ant

下面我们还需要去安装两个东西 … Java 的开发工具包，还有 ant …   在这个地址里，我们可以找到 Java 的开发工具包 …
打开跟我们的系统相匹配的软件版本 … 64 位的 Windows 就下载 Windows x64  … 32 位的，去下载 Windows x86 …
然后打开这个地址 … 可以下载到 ant ….   点击这个链接就行了 … 
这里我提前都已经下载好了  …
先去安装一下 Java 的开发工具包 …
下一步 …   再点击 下一步 …  完成以后，点击 关闭 …
下面我们需要去复制一个工具到 JRE 目录里面 … 
找到 Java 开发工具包的安装目录  … 
C:\Program Files\java  …  打开 jdk 这个目录 …  找开 lib …
在这个目录里面 … 我们可以复制一下 tools.jar 这个文件  ….
再回到 java 目录  … 
打开 jre 目录  … 打开 lib … 把刚才复制的文件粘贴到这里 …
安装  ant
下面我们再去安装 ant …. 
先解压一下 …  
修改一下目录的名称  …  改成 ant …    我们可以把它放在 c 盘根目录下面的 Android 这个目录里面 …
为了让系统能执行 ant 相关的命令 … 我们还得去添加一个环境变量  …
右键点击 计算机 …   属性  …    高级系统设置 …
点击 环境变量 …   在 系统变量 区域里面 …  选中 Path …    然后再编辑一下 …
在 变量值 这里，我们需要指定一下 ant 所在的目录下面的 bin 目录  …
在结尾处 …  注意先要加上一个分号分隔一下 …
然后再输入 C:\Android\ant\bin  ..  确定  … . 
下面我们可以使用 命令提示符 … 去验证一下 ….
输入 Android ….   你会看到，  这样会打开 Android SDK 管理器 …. 说明我们的 Windows 系统上的 Android 开发环境就已经配置好了 …


01-06-安装与配置 iOS 开发工具 - iOS SDK

如果你想为 iOS 设备去开发应用程序，比如 iPhone， iPad …  我们只需要去安装一个 Xcode 就行了 …  它里面包含了用来开发 iOS 应用的工具 …  另外还有 iOS 设备的模拟器 … 
使用 Xcode 不但可以开发 iOS 应用程序，还可以开发 Mac 电脑上的应用程序 ..    不过如果你想使用 Xcode 的话，你需要有一台 Mac 电脑 … 
在这个地址里，可以去下载 Xcode  … https://developer.apple.com/downloads/index.action 
或者我们可以直接打开 App Store …   
然后搜索一下 Xcode …    找到以后  … 点击打开 … 然后 安装  …   Xcode 是免费的软件  …  ﻿
配置
这里我已经提前安装好了 Xcode … 安装好以后，我们还得再去简单的配置一下  …   打开 Xcode …
打开 Xcode 菜单  … Preferences … 偏好设置 … 
这里我们需要安装一下这个 Command Line Tools …  命令行的工具 … 这样我们就可以通过  PhoneGap 的命令行工具 … 去使用 Xocde 编译安装应用了 … 
另外，最新版的 Xcode 里面有 iOS 设备虚拟器是 iOS 7.0 …   如果你需要其它版本的 iOS 模拟器 .. 可以在这里，选择去下载 …


02-01-PhoneGap 命令行工具

使用 PhoneGap 的命令行工具我们去创建，运行，或者去部署应用程序，可以为不同的平台去编译应用程序。
这个命令行工具可以让我们更有效率。想要使用 PhoneGap 的命令行工具，我们首先要去安装和配置不同平台的 SDK，比如你想开发 iOS 应用，需要先安装 Xcode，想要开发 Android 应用，需要安装 ADT 。
在前面视频里我们已经介绍了安装这些 SDK，然后我们需要安装 node.js ，这样我们就可以使用 npm 命令来安装或者更新 PhoneGap 了。
安装 node.js 
先打开 http://nodejs.org/， 点击 Download ，你可以根据自己的系统选择对应的 node.js ，或者，我们也可以直接点击 Install ，这样会自动判断我们当前使用的系统，下载对应的 node.js 。
这里我已经提前下载好了，打开下载下来的 node.js ，双击安装  …


02-02-PhoneGap 的安装

安装了 node.js 以后，我们就可以系统的命令行工具去执行 npm 命令了。npm 可以打包，管理，安装，发布 node 程序，我们需要用到它来安装 PhoneGap。
Mac 用户可以使用终端工具 … 然后输入 sudo npm install -g phonegap
sudo 表示我们要用 root ，也就是超级管理员用户执行命令 … 然后使用 npm install ，后面加上一个 -g … 表示在全局范围内安装 … 最后是要安装的东西，这里就是 phonegap ….
PhoneGap 命令
安装完成以后，我们就可以使用 phonegap 命令了。下面可以先试一下 …. 输入 phonegap 回车 …
会返回 phonegap 命令的帮助的信息 … 证明我们已经成功的安装了 phonegap …
输入 phonegap -v … v 就是英文 version 的简称，这行命令可以查看当前安装的 phonegap 的版本 …
想要升级 phonegap ，可以使用 sudo npm update -g phonegap …


02-03-在 Windows 系统上安装 PhoneGap

想在 Windows 系统上安装 PhoneGap  .. 并且使用 PhoneGap 的命令行工具去创建和管理应用项目 … 我们需要先安装一下 node …
先打开 nodejs.org … 然后点击 INSTALL …  下载完成以后再去安装一下 node …
点击 next 下一步 … 同意许可协议  .. next … 下一步 …  
指定安装目录 … 再次点击 next …   然后点击 Install 进行安装  ..
完成以后，我们可以去搜索一下 node … 这样可以找到 Node.js 的命令提示符工具 …
在这里输入 npm install -g phonegap …  这行命令可以去自动的安装 phonegap …
完成以后 … 再输入 phonegap  … 回车 …  
这里会出现 phonegap 命令的帮助的信息 …. 
输入 phonegap -v …  
可以查看当前我们安装的 phonegap 的版本 …﻿.


02-04-创建应用程序

创建一个 PhoneGap 应用我们可以使用 phonegap create 命令 … 打开终端工具 … 然后先进入到你想存储应用的目录下面 … 
cd desktop … 进入到当前用户的桌面上 …  cd 命令的意思就是改变工作目录 … 
再输入 phonegap create hello net.ninghao.hello HelloWorld …
phonegap create 可以创建应用程序  … 后面加上存放这个应用项目的目录 … hello … 这样会在我的桌面上创建一个叫 hello 的目录… 里面会存放我的应用项目所需求的一些文件 … 
后面我们可以加上一个应用的识别符，想要发行你的应用，比如放在 app store 上去卖的话，需要指定应用的识别符，这个识别符必须是唯一的。一般我们可以使用反向域名的命名方式 …. 
比如我的网站域名是 ninghao.net …  这里我们倒过来，把域名的后缀放在前面  net.ninghao  … 后面加上一个点 … 然后再加上应用的名称  … 
这样这个应用的识别符应该在全世界范围内都是唯一的了。
输入空格 … 再定义一下这个应用的显示的名称 … 
应用的识别符还有这个应用的显示的名称，我们可以在应用的 config.xml 配置文件里去修改 …. 
预览
下面回到桌面上 …   在这里，你可以找到刚才我们用命令创建的应用所在的目录 … 就是这个 hello …
在这个目录下面，还包含一些其它的目录 ….  www 这个目录是应用程序主目录，里面有应用程序的主页… index.html .. 
我们可以使用浏览器打开这个页面看一下 ….  页面上已经有一些内容了，这个页面上使用的样式表，js 文件 ，还有图像，会放在各自的目录下面 ...
我们可以基于这个目录里的东西去开发自己的应用。在后面的视频里再详细的去了解一下。
plugins 这个目录下会存放的是我们安装的 phonegap 的一些插件 ….  比如你想使用设备的定位功能，你需要安装 Geolocation 插件，安装以后，插件会放在这个目录的下面。
目前这里是空的，因为我们还没有安装 phonegap 的插件  …. 
platforms 下面会存放针对不同平台编译的应用 … 在下面的视频里我们去﻿使用 phonegap 的 build 命令去编译一个 iOS 应用。


02-05-编译，安装，运行应用

这个视频我们可以去试一下，使用 PhoneGap 的命令行工具，创建一个应用，再把它编译成指定平台的应用 … 然后再把它安装在 iOS 模拟器上去运行一下 …
Build
打开终端工具 … Windows 用户可以使用命令提示符工具 … 
先进入到应用所在的目录 …. 我们的应用是在桌面上的 hello 这个目录的下面 …  输入  cd desktop/hello ….
phonegap build ios
输入 phonegap build…  后面加上要编译的平台的名称 ….  ios …  回车 … 
这样 phonegap 会基于之前我们使用 create 命令创建的简单的应用，也就是在 hello 这个目录下面的 www 这个目录里的应用，把它编译成一个 ios 平台上的应用 ….
回到桌面，打开应用所在的目录 ….  在 platforms 这个目录的下面 …  现在会多出一个 ios 目录 … 这个目录下面就是编译好的 ios 平台下面的应用 …
phonegap 的 build 命令会为我们生成一些针对 ios 平台所需求的文件 …. 
这个 HelloWorld.xcodeproj 是一个 xcode 项目文件  …  双击可以打开这个项目文件  …
打开以后，可以使用 Xcode 工具来调试我们的应用。 点击这个 build and run 按钮，可以编译应用并且安装的 iOS 的模拟器上 ….
(#关闭 iOS 模拟器)
或者我们也可以使用命令把应用安装在模拟器上 …. 
回到终端工具 ….  输入 phonegap install …. 后面加上要安装到的平台的名字….  
phonegap install ios …. 
这里我们也可以使用 --device 参数，把应用安装在设备上，或者使用 --emulator ，把应用安装在设备的模拟器上。如果不单独指定这些参数的话… 
这个命令会先试着把应用安装在设备上，不过这里我并没有连接任何的设备到我的电脑上，所以，找不到具体的设备， phonegap 会继续尝试，去把应用安装在指定平台的模拟器上 …. 
不过这里会提示说 … 没找到 ios-sim …  它是一个小插件 … 可以让我们使用命令行控制  iOS 设备的模拟器 … 
安装这个小插件  … 可以使用 homebrew ..
先打开这个地址 ...http://brew.sh/index_zh-cn.html
复制一下安装 homebrew 的这行代码  .. 
粘贴到终端工具里面 … 回来 …     输入密码 …  这行命令会自动去下载并且初建 homebrew … 
然后我们可以使用 brew 命令去安装 ios-sim …
brew install ios-sim
再输入 phonegap install --emulator ios … 
会把应用安装在 ios 设备的模拟器上 … 
run
这里我们先使用 build 把应用编译成可以在指定平台上运行的应用，然后使用 install 命令把应用安装在设备或者设备的模拟器上。
另外 phonegap 还提供了一个 run 命令，可以把编译和安装这两个动作结合在一起 …
比如使用 phonegap run ios …  
phonegap 会把应用先编译成可以在 ios 平台上使用的应用，然后再把它安装在设备上 … 
首先它会去试着把应用安装到连接的真正的设备上 … 如果找不到设备的话 …  会把应用安装到设备的模拟器上 …
这里我们也可以通过参数，去指定让它安装到的那个目标 … 
比如安装到真正的设备上，我们可以使用 phonegap run --device ios …   device 就是设备的意思 … 前面要加上两个连字符 … 
如果想直接安装到模拟器上的话 …  可以把这个 device 改成 emulator   它的后面是平台的名称  …
你会看到 … 命令会直接把应用安装到指定平台的模拟器上 ...


02-06-管理插件

想要使用 PhoneGap 的一些设备级别的功能，比如加速计，罗盘，访问设备本地的文件，创建联系人，定位等等，这些我们都需要去安装  PhoneGap 的插件。
这些插件提供了使用设备的这些原生组件的一个接口，你甚至可以自己去创建 PhoneGap 插件。
我们可以使用 phonegap local plugin add ，这个命令来安装想要使用的插件 …
安装 console 插件
先进入到应用项目的目录里面 … cd desktop/hello …. 
然后输入 phonegap local plugin add ….  后面要加上插件的 Repository … 也就是插件的代码库的地址 … 在 PhoneGap 的文档网站上，你可以找到这些插件库的地址，还有详细的介绍。
这里我们先安装一个 console ，控制台插件，这个插件可以帮助我们调试应用，它可以在 SDK 工具上显示我们指定要输出到控制台上的信息。 在后面的视频里我们再去详细的了解一下这个插件的使用。
phonegap local plugin add https://git-wip-us.apache.org/repos/asf/cordova-plugin-console.git
安装好的插件会存放在应用目录下面的 plugins 这个目录里面 …
默认情况下这个插件可以用在所有的平台上，iOS，Android 等等，想要单独为某个平台安装插件，你需要做一些其它的手工配置，具体的做法可以参考 phonegap 的文档 …. 
查看安装的插件
查看已经安装的插件，可以使用 phonegap local plugin list ….   先要确定当前的工具目录是在项目所在的目录里面 …
这里你会看到一个插件  ….  org.apache.cordova.console ….    最后的这个 .console 可以确定这是什么插件 …. 也就是我们刚才安装的控制台插件 …
移除安装的插件
移除安装好的插件，可以使用 phonegap local plugin remove ….   remove 就是移除的意思 …   后面要加上想要移除的插件的名称 …
复制一下 …  粘贴  …. 按下回车 …   
提示成功以后，我们可以再次使用 phonegap local plugin list …. 来查看一下 ….
现在，已经移除掉了刚才安装的插件 …. 


03-01-理解创建的应用模板

使用 phonegap create 命令可以创建一个应用程序的骨架或者叫模板，我们可以基于这个简单的应用去开发自己的应用程序。这个视频我们先来了解一下这个应用的模板。
打开应用项目所在的目录 ….  www  这个目录里面就是创建的应用程序的主体内容， index.html 就是应用的主页 …. 我们可以使用文本编辑软件打开这个文件来看一下 …
这里我用的是 brackets … 所以可以打开整个目录 ….  在桌面上，打开 hello 下面的 www 这个目录 …  然后打开里面的 index.html …
这其实就是一个简单的 html 网页，用的是 html5 的文档规范 …  
先看一下这两个特殊的 meta 标签  … 
format-detection
这个 format-detection meta 标签，指定了 telephone=no …  比如在 iOS 设备上的 safari 浏览器，会检测页面上出现的可能是电话号码的数字 … 这样会生成一个链接，用户点击这个链接可以呼叫这个电话号码 …
不过有时候浏览器可能会把不是电话的数字转换成这个呼叫的链接 …  这个 meta 标签的作用就是关掉了浏览器的这个自动检测页面上电话号码的功能。

viewport
下面还有一个 viewport 可视窗口的这个 meta 标签，在 《 响应式网页设计 》这个课程里，我们详细的介绍了这个 viewport 标签 … 
user-scalable=no 就是不让用户可以缩放页面，initial-scale=1 是设置页面的初始的缩放比例为 1 倍，也就是不去缩放页面，maximum-scale=1 设置要最大的缩放级别是 1，minimum-scale=1 设置的是最小的缩放级别也是1… width=device-width 设置了可视窗口的宽度等于设备的宽度。
height=device-height 的意思是把可视窗口的高度设置成跟设备的高度一样。
最后这个 target-densitydpi=device-dpi 很多浏览器已经不支持它了，所以，我们可以去掉它。
其它
在页头部分，链接了一个自定义的样式表 index.css，放在了 css 这个目录的下面。
底部
再看一下页面的底部，在这里，嵌入了 phonegap.js ，另外还有一个自定义的 js 文件，index.js ，我们可以把应用需要的 js 代码放在这个文件里面。
最后，执行 app.initialize(); … app 是在 index.js 里面定义的一个对象 …. initialize() 是 app 的一个函数，或者叫 method …  合起来的意思就是去执行 app 这个对象里的 initialize() 这个函数。
下面的视频里，我们再详细的看一下在 index.js 文件里定义的 app 对象。﻿


03-02-应用模板里的 index.js

下面我们再打开 index.js ，去看一下这个 app 对象里的东西。
这个文件里定义了一个叫 app 的对象，你可以看到，它里面的东西都放在了一组大括号里面 …
最开始就是在 index.html 里面执行的 initialize …. 它是一个函数，函数在对象里叫做 method ，方法，可以理解成对象的动作。
在这里，它调用了这个对象的另一个动作，bindEvents()，它前面的 this 表示当前这个 app 对象 。
也就是当页面加载以后，会执行 app 的 initialize ，initialize 要做的事情就是去调用 bindEvents() …
在下面定义了 bindEvents() 要做的事情，这里，用了一个 addEventListener() ，绑定了一个 deviceready 事件 …  这个事件会在 phonegap 准备好以后触发执行一次，这样我们就可以安全的去使用 phoneGap 里的东西了 …. 
当发生这个事件以后，会调用 onDeviceReady 这个函数 ….  onDeviceReady 做的事情在下面已经定义好了，就是去调用 receivedEvent()  …
它前面的 app 表示 app 这个对象…  这里我们并没有使用 this 来引用当前这个对象，因为在这里 this 表示的是 deviceready 这个事件 …. 
这个函数里传递了一个参数，参数的值是 deviceready …
在下面定义了 receivedEvent  …  这允许我们传递一个参数叫 id …. 
在它的里面，先定义了一个变量叫 parentElement … 它的值是在页面上找到的包含指定 id 的元素 …  在 onDeviceReady 里，我们调用这个函数的时候，传递的参数值是 deviceready …
所以，在这里，就是找到页面上包含 deviceready 这个 id 的元素 …. 给它起个名字，叫 parentElement …. 
第二行，又定义了一个变量，叫 listeningElement …. 它的值是，在 parentElement 里找到的 deviceready  这个 id 下面的 .listening 这个类的元素。
第三行的 receivedElement 的值是 在 parentElement 里找到的 deviceready  这个 id 下面的 .received 这个类的元素 …
然后把 listeningElement 里面找到的那个元素上设置一个 style 属性，属性的值是 display:none ，也就是把元素隐藏起来。
同样在 receivedElement 里面找到的那个元素上设置一个 style 属性，属性的值是 display:block …. 就是把元素显示出来 ….
回到 index.html ，我们再解释一下 receivedEvent ，也就是在 deviceready 这个事件发生以后所做的事情 …
先是找到 deviceready 这个 id 所在的元素 … 再找到它下面的 .listening 这个类，使用 display:none ，把它隐藏起来 …
再找到 received 这个类所在的元素… 使用 display:block ，把它显示出来 ….  
最后会在控制台上显示一个 接收到的事件 … 后面加上这个 id 参数 …  
模拟器
下面我们可以使用设备的模拟器运行一下这个简单的应用 …. 
打开终端 …. 进入到应用所在的目录 … cd desktop/hello …
输入命令 phonegap run ios …. 这样可以先编译应用，然后再把它安装在 ios 模拟器上 …. 
完成以后会自动打开这个 HelloWorld 这个应用 …
这个应用上会显示 设备已经准备好了 …. 说明 deviceready 这个事件已经发生了 …   
safari
下面我们可以使用本地电脑上的 safari 浏览器的开发者工具查看一下 ….
打开 safari ….  找到 开发 菜单 …  如果没有显示这个菜单，可以先打开 safari - 偏好设置 …  找到 高级 选项卡 …
勾选一下 在菜单栏中显示“开发”菜单 …
然后在 开发 菜单里，找到 iPhone Simulator  ….  选择 HelloWorld 下面的 index.html 
在这里，你可以看到 …  .listening 这个类所在的元素上面，会有一个 display:none ….   .received 这个类上，会添加一个 display:block … 


03-03-调试 - Weinre

使用 Weinre ，我们可以在本地电脑的浏览器来调试在模拟器上的应用。Weinre 是基于 Chrome Developer Tools ，所在用起来跟 Chrome 浏览器的开发者工具差不多。
下面我们可以先去安装一个 Weinre ，然后再看一下怎么样使用它来调试应用。
先安装一下 node.js ，在之前的视频里我们已经安装好了 … 然后打开 终端工具 …
我们使用 npm 来安装 Weinre …  输入   sudo npm -g install weinre 
安装好以后，再输入 weinre ，可以启动 weinre 服务  …  提示成功以后 …  打开浏览器 ..
输入 localhost:8080 …  这样可以打开 weinre 服务在本地电脑上的站点 …  
这里我们可以把 localhost 改成本地电脑的调试的 ip 地址 …  也就是 127.0.0.1 ….  
这个 debug client user interface …. 就是调试应用的界面  … 点击后面的链接 … 可以在新的标签里打开这个链接 …. 
你会发现，它跟 Chrome 浏览器的开发者工具长的差不多 …
再回到 weinre 站点的页面上 …   我们需要在应用的网页上嵌入一个 Target Script ….  这样才能使用 weinre 调试应用…
复制一下这行代码 …. 
再打开我们的应用的主页 …  也就是应用项目目录下的 www 这个目录下面的 index.html ….
把复制的代码粘贴到页面上 …. 然后保存一下…
Feature
另外我们还需要去配置一下应用的 config.xml …    这个文件在应用项目目录下面的 www 这个目录里面。
    
在这个文件里，需要输入一组 feature 标签  ….  
它的作用就是启用 debug-server ，调试服务器 ….  然后指定一下调度服务器的 ip  地址 ….   这里我们设置成了 127.0.0.1 ，表示使用本地电脑上的调试服务器。
在它的下面，我们需要再指定一下这个应用的 key ，也就是应用的唯一的标识符 …. 
保存 …. 
编译并安装
回到终端工具，新建一个窗口 …  进入到应用目录 …  再去重新编译并安装一下 iOS 的应用 …   phonegap run ios …
预览
如果一切正常的话，在调度的界面上，Targets 下面的文字会变成绿色的。
打开 Elements 选项卡 … 可以看到应用的页面上的代码 …   你可以像调试一般的网页一样 …  修改页面上的元素 …  还有元素上应用的样式等等 ….


04-01-事件 - Events

PhoneGap 的 Events API 也就是事件 API，它可以监测设备上发生的事情。比如暂停，恢复，在线，下线，电量低，增大音量等等 ，这些动作都会触发对应的事件  ...
根据这些发生的事情，你可以去设计一下让设备要执行的动作。  比如当应用暂停使用的时候，会触发 pause 事件，你可能想要让应用去保存一下用户所做的事情，
当用户再次回到这个应用的时候，会触发 resume 事件，你可以根据这个事件再去做一些事情。
下面我们先来看一下这两个事件。
pause 与 resume  暂停与恢复 
先打开应用的 js 目录下面的 index.js 这个脚本文件，在创建这个应用的时候，PhoneGap 在这个文件里已经用到了事件 API 里的一个事件，就是这个 deviceready …  当 phonegap 准备好以后，会触发这个事件。
一般我们可以把其它的要做的事件放在当这个事件发生以后要做的事里面。也就是这个 onDeviceReady ….
在这里，可以使用 document.addEventListener() 去添加一个事件的监听器 …
 // 添加 pause 事件的监听器
        document.addEventListener('pause', app.onPause, false);
document 是事件发生的目标， addEventListener …   括号 …  最后是一个分号 …. 括号里可以指定 addEventListener 的三个参数 …
第一个参数是事件的类型 … 这里我们使用 pause 这个事件，就是应用在暂停的时候会发生的事件 …  第二个参数是 listener ，也就是监听器 …  
你可以把它理解成，事件发生以后，要做的事情的名称，在下面，我们可以去具体的定义要执行的动作 … 
这里设置成  app.onPause …   app 是这个文件时定义的 app 对象，后面的 onPause 是我们自己定义的名称 …
最后是 useCapture 参数，这个参数可以控制事件的传播的方式 …   在以后的 JavaScript 课程里，我们会详细的介绍一下 JavaScript 里面的事件 .. 
这个参数一般我们都可以设置成 false …  
onPause
下面我们再去定义发生 pause 事件以后要做的事情 …  在这个 onDeviceReady 的下面，我们去定义 onPause  …
先输入一段注释 …   // 当发生 pause 事件以后要做的事
onPause: function(){}, 
onPause 冒号 … 后面输入一个 function() 再加上一组大括号 …  表示这个 onPause 是一个函数 ….  在大括号里，可以定义具体要做的事 …
onPause: function(){
     console.log('应用被暂停了');
}, 
这里我们使用一个 console.log ，在控制台上输出一些文字，这样当我们在控制台上看到这些文字，就证明这个 pause 事件已经发生了，并且执行了 onPause 里面定义的东西….
resume
用类似的方法，我们可以再去添加一个 resume 事件的监听器，去监听恢复事件。
复制一下这个添加监听器的代码 …   把 pause 改成 resume …  app.onPause 改成 app.onResume …  
再去定义 onResume ….  可以基于这个 onPause 去修改一下 …
// 当发生 resume 事件以后要做的事
onResume: function(){
     console.log('应用已经恢复');
}     


04-02-事件 - 在线与离线 - online & offline

online 和 offline 是设备在连接到互联网和断开互联网的时候发生的事件 ….  下面我们来看一下这两个事件的使用。
在应用的 index.js 文件里，可以添加这两个事件的监听器 …   可以把它们放在 deviceready 发生以后要做的事情里面，这样做会更安全一些。
可以复制前面视频里添加的这个事件的监听器 …
// 添加 online 事件的监听器
        document.addEventListener('online', app.onOnline, false);
添加下注释  …  要监听的事件的类型 …  我们先看一下 online 这个事件 …  再添加一下事件发生以后，要做的事情 …   改成 onOnline … 这个名字你可以随便定义 …
然后再去定义这个 onOnline …  
 // 当发生 online 事件以后要做的事
    onOnline: function(){
        console.log('已经连接到互联网');
    },
用类似的方法，我们再去添加一个 offline 事件的监听器，当断开互联网时触发的事件。
// 添加 offline 事件的监听器
        document.addEventListener('offline', app.onOffline, false);
// 当发生 offline 事件以后要做的事
    onOffline: function() {
        console.log('掉线了！');
    },
修改好以后，保存一下文件。
安装 Connection 插件
要想让这个 online 与 offline 事件能够正常的工作，我们还需要去安装一个 Connection 插件，这两个事件，需要用到 Connection 插件里提供的一些信息。
打开终端工具，进入到应用项目的目录里面 …   然后使用 phonegap local plugin add 命令去添加这个插件 …
phonegap local plugin add https://git-wip-us.apache.org/repos/asf/cordova-plugin-network-informati...
安装好以后，再使用 phonegap run ios …  重新编译并安装一下修改之后的应用 …
测试
打开 weinre 的调试界面  …  选择 console 这个选项卡 …  因为我们现在用的是设备的模拟器，所以只要断开电脑的互联网连接，这个模拟器也会断开互联网连接。
这样就会触发 offline 这个事件 … 
你会看到，在控制台上，会显示 掉线了！ …
再连接到互联网 ….   控制台上会显示 已经连接到互联网 …


04-03-联网类型 - Connection

Connection API 可以判断设备的联网类型，比如 WIFI ，蜂窝移动网络等等。你可以根据用户的联网的类型，去让应用去做相应的事情。
想要使用这个功能，我们需要先安装一下 network-information 这个插件。在前面介绍 online 和 offline 事件的时候，我们已经安装了这个插件。
用命令可以判断一下应用是否已经安装了这个插件。
打开终端，进入到应用项目的目录 ..  cd desktop/hello
然后用 phonegap local plugin list …    这个命令可以查看项目已经安装的插件  … 在这里，你可以看到 org.apache.cordova.network-information
证明已经安装好了这个插件。
下面打开应用的 index.js  ….
我们先去定义一个检查连接的函数  …  checkConnection: function() {},  
这个名称你可以根据自己的需求去命令它。
在这个函数里，我们可以使用 connection.type 来检查当前的网络连接的类型 ….  前面我们要加上一个 navigator ，因为 connection.type 是在 navigator 下面。
navigator.connection.type; 
我们可以把检查到的联网类型输出到控制台上面。
console.log('网络连接的类型是：' + navigator.connection.type);
下面我们可以决定在什么情况下执行这个检查联网类型的动作。 你可以把它放在 deviceready 事件发生的时候，这样这个检查联网类型的动作在 phonegap 准备好以后，会被执行一次。
不过这里我们可以把它放在 resume 这个事件发生以后要做的事情里面，这样每次恢复应用的时候，都会去检查一次联网的类型 ..
onResume: function(){
        app.checkConnection();
    },
保存 ….
打开终端，重新编译安装一下这个应用 …. phonegap run ios
打开 weinre 调试工具的控制台 ….
按一下 Home 键 ….  再次打开应用 … 这样会触发 resume 事件 … 也就会去执行检查联网类型的动作，它会把联网类型输出到控制台上 …
在控制台上，你会看到，现在的 网络连接的类型是： wifi
下面我们再断开网络连接试一下 …. 
按下 Home 键，再回到应用 ….  在控制台上，会显示现在的网络连接的类型是 none …. 也就是没有连接网络。
重新定义连接类型的常量
在这里显示的这个网络连接类型的名称，我们可以重新去定义一下。
回到 index.js … 
使用这段代码 …  这里我们先把检查到的连接类型交给 networkState …. 
然后新建一个叫 states 的对象，并且重新定义了各种网络连接类型的名称 ….  
最后我们再修改一下这个 console.log 里的东西，想要显示重新定义的名称 …   把这个  navigator.connection.type s
改成 states[networkState]
重新编译安装一下应用 ….
按下 Home 键 …  再打开应用 ….  
现在控制台上显示的网络连接的类型，就会使用我们重新定义的名称了。  


04-04-通知 - Notification

Notification API 可以使用对话框，响铃，或者震动来提醒用户。
notification.alert
下面我们先看一下使用对话框提醒的功能，我们可以使用 notification.alert。这里需要先去安装一下 dialogs 插件。
打开终端 ，进入到应用项目的目录 … cd desktop/hello
然后用 phonegap local plugin add 后面加上插件代码库的地址
phonegap local plugin add  https://git-wip-us.apache.org/repos/asf/cordova-plugin-dialogs.git
然后打开应用的 index.js 这个文件。
找到想要显示这个提醒对话框的地方，这里我们把它放在当断开互联网以后要做的事情里面。 offline 这个事件发生以后，会执行 onOffline 里面的动作。
在这里，输入  navigator.notification.alert();
使用 navigator 的 notification 的 alert 功能。
这个功能有四个参数我们需要指定一下 …   第一个参数就是对话框里要显示的信息。
'掉线了！',
不同的参数之间用英文状态下的逗号分隔开，第二个参数是关掉对话框以后要做的事情，
app.alertDismissed, 
这个意思就是去执行 app 这个对象里的 alertDismissed 这个函数 … 一会儿我们需要再去定义这个函数 …
第三个参数是对话框的标题，这个参数是可选的，如果不指定的话，默认会是 Alert …  把它设置成 '网络状态提醒'
最后一个参数是 按钮上的文字，这也是一个可选参数，默认是 OK。 这里我们设置成 '知道了'
下面再去定义一下 alertDismissed() ，也就是关掉对话框窗口以后要做的事情。
// 关掉提醒窗口以后要做的事
    alertDismissed: function() {
        console.log('已经关掉了提醒窗口');
    },
这里用一个简单的 console.log() ，在控制台上输出一些文字  …. 
完成以后，保存一下 …
打开终端，重新再编译并且安装一下这个应用 ….  
启用以后，断开网络连接 …   这会触发  offline 事件 …   事件发生以后，会在设备上显示一个提醒的对话框  … 上面的内容都是我们刚才定义好的 …
下面再打开 weinre 的控制台 ….    
点击对话框上的 按钮 ….   会执行我们自己定义的 alertDismissed …   它做的事就是在控制台上输出，已经关掉了提醒窗口  这几个字 …


04-05-通知 - 确认 - notification.confirm

这个视频我们来看一下 notification.confirm ，它跟前面介绍的 notification.alert 差不多，会弹出一个对话框，不同的是，notification.confirm 可以定义多个按钮。
你可以根据用户点击的不同的按钮，去做不同的事。
打开应用的 index.js 这个文件  …   先给 app 这个对象添加一个函数 …  命名为 showConfirm … 先输入一段注释 ...
// 点击 '显示对话框'  按钮显示对话框内容
    showConfirm: function(){
  },
再去定义这个函数要做的事情 ….   输入  navigator.notification.confirm();   在它的里面我们需要设置它的参数 …  对话框上的文字，回调函数，也就是点击不同的按钮所做的事情。另外还有两个可选的参数，对话框的标签，还有按钮。
        navigator.notification.confirm(
            '软件有新版本了',
            app.onConfirm,
            '软件更新',
            ['以后再说','立即下载']
        );
先定义要显示的文字，把它放在一组引号里面 …   '软件有新版本了' …  然后指定它的回调函数  …. app.onConfirm ….  app 对象里的 onConfirm … 一会再去定义这个函数 …
第三个参数是对话框的标签 …  如果不指定的话，默认会是 Confirm ，确认 …  这里我们设置成 '软件更新',
最后一个参数是要显示的按钮 …  我们可以为对话框添加多个按钮 …  默认会显示两个按钮 … OK ，确定，还有 Cancel 取消 …
要定义的按钮我们需要放在一个数组里面，数组就是存放一些有顺序的数据的容器。
数组里的数据要放在一组方框号里面 … []  …   '以后再说', '立即下载' …   你可以继续去添加想要的按钮 …  两个按钮会并排显示 … 超过两个按钮，按钮会堆叠在一起显示 …
下面再找一个地方去执行这个 showConfirm …  可以把它放在 onDeviceReady 里面 …   也就是一开始运行应用以后，就会立即显示一次这个对话框 ….
app.showConfirm(); 
onConfirm
下面我们再去定义一下 onConfirm .. 也就是点击不同的按钮要做的事情  ….
// 点击确认对话框以后做的事情
    onConfirm: function(buttonIndex) {
    },
这个函数里需要一个参数，我们叫它 buttonIndex …   它可以传递按钮的顺序  …   这个按钮的顺序从 1 开始，也就是第一个定义的按钮的顺序值是 1，第二个按钮的顺序的值就是 2 …  
在这里，第一个按钮就是 以后再说 … 第二个按钮是 立即下载 …
我们可以使用 if 语句，去判断一下用户点击的按钮，然后根据用户的选择去做一些事情 …
if(buttonIndex === 1){}
这里判断的条件是，如果用户点击了第一个按钮，也就是 以后再说 这个按钮 …  会去执行在后面大括号里的代码。
还是使用 console.log();  去在控制台上输出一些文字  …. console.log('以后再说');
然后我们再加上一个 else{}  …  再这组大括号里，我们可以去定义当用户点击另外一个按钮，也就是 立即下载 这个按钮要做的事 …
同样是在控制台上输出一些文字  ….   console.log('立即下载')
保存一下 …   先打开 weinre 调试工具的控制台 ….  再打开终端工具，重新去编译并安装一下这个应用 …   phonegap run ios
应用启动以后，会显示我们定义的那个确认的对话框 …  
点击 以后再说 ….  你会看到在控制台上，会输出  以后再说 ….
快速按两下 Home 键，可以使用快捷键 shift + command + H …   关掉这个应用 …  下面再重新打开这个应用 ….
这次我们点击 立即下载 这个按钮 ….    在控制台上，会输出 立即下载  …. 
这就说明，我们成功的捕获了用户所点击的按钮，并且去执行事先设计好的动作。


04-06-通知 - 提示窗口 - notification.prompt

使用对话框提醒用户，并且在对话框上提供了一个可以让用户输入内容的文本框，这就是 notification.prompt 的功能 … 它跟 notification.confirm 差不多，只不过，在对话框上多出来一个文本框。
你可以根据用户输入的内容，还有点击按钮，去做一些指定的事情。 下面我们一起来看一下这个 notification.prompt …
先定义一个函数，可以叫它 showPrompt: function(){};
它的作用就是去显示一个提示的对话框  ….    这里我们要用的是 navigator.notification.prompt();
在它的里面，需要指定五个参数，在对话框上显示的内容，处理对话框的动作，对话框的标题，对话框的按钮，还有文本框里默认的文字 ….
先定义对话框上要显示的内容 …  '请输入您的姓名',
然后是处理这个对话框动作的函数，就是在用户输入内容还有点击的按钮以后，根据这些内容要做的事情。  app.onPrompt,
一会在下面，我们再去定义这个 onPrompt ...
第三个参数是对话框的标题 …  '注册',
然后是对话框上的按钮 …  我们可以在对话框上显示多个按钮，这些按钮要放在一个数组里面，先输入一组方括号，这里我们添加两个按钮，取消，还有确认 …   ['取消,'确认']
这个按钮的顺序从 1 开始，也就是用户点击 取消这个按钮，在返回的结果里，按钮的顺序就是 1，确定按钮是 2  …
最后一个参数是文本框里默认的文字 …  默认这个默认的文字是 Default text  …  这里我们设置成 '王二麻子'
完成以后，找一个地方去执行这个 showPrompt … 放在 deviceready 这个事件发生以后 … app.showPrompt();
onPrompt
下面我们需要再去定义 onPrompt 去处理接收到的用户输入的内容还有点击的按钮 …  
// 点击提示对话框以后做的事情
onPrompt: function(results) {}, 
接收到的结果会放在 results 这个对象里面 …  这里把它作为 onPrompt 的一个参数 …
这个 results 里面有两个属性， buttonIndex 里面包含用户点击的按钮，input1 里面是用户在文本框里输入的具体的内容 …
访问这两个属性可以这样 …  results.buttonIndex …  这个代码会输出用户点击的按钮 …  用户点击第一个按钮，它就会输出 1，点击第二个按钮，它就会是 2 ….
results.input1 …  这个代码会访问到用户在文本框里输入的内容 ….   你可以使用这些内容去做一些复杂的事情，不过这里，我们还是简单的把这些内容输出到控制台上来 …   
 console.log('用户点击了按钮：' + results.buttonIndex + ' 用户输入的姓名是：' + results.input1);
保存一下 …  
测试
先打开 weinre 的控制台 …    然后打开终端重新去编译一下这个应用 …   phonegap run ios 
应用启用以后，会显示这个提示的对话框  …   在文本框里会显示默认的文字 … 用户可以输入自己的内容 …  王皓 …
然后点击按钮 …
在控制台上你会看到，会根据用户输入的内容，还有点击的按钮，输出一些内容。  用户点击了按钮 …  


04-07-定位 - Geolocation

在应用中我们可以使用 Geolocation API 来获取到用户当前的位置，一般的智能手机上面都有 GPS 芯片，可以获得准备的位置，没有 GPS 芯片的设备也可以使用其它的参考值来获得用户的位置，比如使用 IP 地址，来获得用户的大概的位置。
在应用里，我们可以利用获取到的位置，比如显示在 Google 地图上，这样用户可以了解到自己当前的位置，或者去搜索附近的餐馆，商店等等。
使用这个位置功能，我们要先去安装一下 genlocation 插件 …
打开终端工具，Windows 用户可以使用命令行工具 … 进入到应用项目的目录  …  cd desktop/hello
phonegap local plugin add https://git-wip-us.apache.org/res/asf/cordova-plugin-geolocation.git
index.js
然后打开应用的 index.js …  先去新建一个函数 …   叫它 getPosition: function() {},
在它的里面，可以使用 geolocation.getCurrentPosition  去获取位置信息 …   它属于 navigator 这个对象  …
navigator.geolocation.getCurrentPosition(app.geolocationSuccess); 
然后再去定义 getCurrentPosition 的三个参数 ….  第一个参数是 geolocationSuccess …  就是成功获取到位置信息以后要做的事情 …   
第二个参数是 geolocationError …  获得位置出现错误的时候要做的事情 …  最后一个参数是 geolocationOptions …  它是位置的一些选项 …
先定义第一个参数 …  我们可以叫它 geolocationSuccess …  在它前面加上一个 app ，表示去执行 app 对象里面的这个 geolocationSuccess 函数 …  
其它的参数我们在后面的视频里再去介绍 … 因为除了 geolocationSuccess 以外，其它的参数都是可选的，所以在这里我们可以不用去定义他们 …
把这个 getPosition 放在 deviceReady 事件发生以后去执行 …  这样启动应用以后，就可以去获取位置信息 …  app.getPosition()
geolocationSuccess
下面再去定义当成功获得位置信息以后要做的事情，就是这个 geolocationSuccess ..    geolocationSuccess: function() {},
获取到的位置信息会放在 position 里面，我们可以把它传递给 geolocationSuccess 去处理 ..  geolocationSuccess: function(position) 
要访问获得的位置信息，可以这样做 …   position.coords.latitude …   它会输出获取到的 latitude，也就是纬度的值 ….
把这个   latitude 改成 longitude.. 就会输出位置的经度的值  …
类似的还有海拔，速度等等 ….    这里我们先只用一个 longitude 还有 latitude …  其它的位置信息你可以搜索一下 w3c geolocation …
我们把这个经度和纬度信息输出到控制台上 ….  用一个 console.log()
console.log(
            '纬度: '+ position.coords.latitude     + '\n' +
            '经度: '+ position.coords.longitude    + '\n' +
        );
这里的 \n 是换行的意思 …   保存 …  打开 weinre 调试工具的控制台 ….
测试
再打开终端工具 … 重新编译并且安装一下修改之后的应用 …  phonegap run ios 
在应用启动以后，弹出一个确认的对话框 …  提示是否允许应用使用位置服务  …  选择 允许  ...
然后﻿在控制台上，你会看到获取到的纬度和经度的位置信息 …  因为我们用的是模拟器，所以这个位置信息并不是我的真实的位置 … 
我们可以事先为 iOS 模拟器添加一些位置信息 …   打开 调试 -  位置 …  选择自定位置  … 可以手工去输入一个续度和经度值  …
或者，我们也可以在这个位置列表里选择一个事先定义好的位置 …  比如选择这个 Apple Stores …
关闭掉应用 …  按两下 Home 键 …  关掉应用 …  再重新打开应用 …  这样会重新获得位置信息 …
在控制台上，你会发现，位置信息发生了一些变化 …   现在的纬度和经度的位置应该就是 Apple Stores 的位置 ….


04-08-定位 - geolocationError

下面我们需要再定义一下 geolocationError … 也就是获取位置信息出现错误的时候要做的事情 …  这个错误可能是用户不允许使用位置信息，可能是获取不到位置，或者获取信息超时 …. 
// 获取位置信息失败后做的事
    geolocationError: function(positionError) {},
失败以后，会把失败相关的内容，比如失败的代号和相关说明放在 positionError 这个对象里面 … 它有两个属性，一个是 code，错误的代码，还有 message ，错误的描述信息 … 
我们把这个 positionError 传递给 geolocationError 这个函数 …
然后使用 positionError.code  …  可以输出错误的代码 …   用 positionError.message 来输出错误的描述信息 …
console.log('错误代码：' + positionError.code +  ' 错误描述：' + positionError.message) 
保存 … 
然后先打开模拟器 …  删除掉 HelloWorld 这个应用 ….    再打开 weinre 工具的控制台 ...
再去重新再编译并且安装一下修改以后的应用 …
启动以后，会弹出一个确认的对话框 ，提示用户是否允许应用使用位置服务  ..   这次我们选择  不允许  …
在控制台，会显示，错误代码是1，1 就表示用户不允许使用位置服务 ..  2 代表位置服务不可用，3 表示超时 …
错误代码的下面，还会显示一个错误的描述的信息 … 
用户拒绝应用使用位置服务以后，也可以重新决定允许应用使用位置服务  …   
打开 设置 菜单  …  隐私  ..  位置  …  点击开启 HelloWorld 这个应用的位置服务  …
按两下 Home 键 …  关掉应用 …  再重新打开应用 …
在控制台上，会输出位置信息 ….  ﻿


04-09-设备 - Device

想要了解设备的硬件跟软件相关的信息，我们可以使用 Device API …  
打开终端工具，先安装一下 Device 这个插件， 先进入到应用项目所在的目录 …  cd desktop/hello
phonegap local plugin add https://git-wip-us.apache.org/repos/asf/cordova-plugin-device.git
打开应用的 index.js … 
想要得到设备的型号，可以使用 device.model …  要想得到设备的操作系统，可以使用 device.platform …
这里我们把这些跟设备相关的东西输出到应用的主页上 … 
先打开应用的主页 index.html …   输入一组

我们一会儿可以使用代码，把设备相关的信息放在这组

回到 index.js …  
新建一个函数… getDeviceInfo: function() {},
用 document.getElementById('deviceinfo')  获取到包含 deviceinfo 这个 id 的元素 ….   然后可以把它交给一个变量 …  
var deviceInfo …  命名为 deviceInfo …
再用 innerHTML 设置一下 deviceInfo 里面的 HTML 代码 … 
deviceInfo.innerHTML= …  注意 HTML 这几个字母都是大写的 …
等号后面就是你想设置的，deviceinfo 这个 id 所在的元素里面的 HTML 代码 …
在课程资料包 04-09 里面，你可以找到一段代码 …   复制一下 … 粘贴到这个 等号后面 …
这里就是一些自定义的文字，HTML 标签，还有使用 device 获取到的设备相关的信息 …
device.model 是设备的型号 …  device.platform 是设备运行平台，也就是设备的操作系统 ..  比如 iOS ，或者 Android …
device.version 是系统的版本 …  
device.uuid 是设备的唯一的编码 …  device.cordova 是应用使用的 cordova 的版本 ….
最后我们需要去执行这个 getDeviceInfo() 函数 … 可以把它放在 deviceready 这个事件发生以后去执行 …  app.getDeviceInfo()
保存 … 
重新再编译并且安装一下应用 …  phonegap run --emulator ios
打开应用以后，在应用的主页上，会显示出设备相关的信息…
这里设备型号是 X86_64 这是因为我们用的是设备的虚拟器 … 
运行的平台是 iOS，版本是 7.0  ….  应用使用的 Cordova 的版本是 3.0 …. ﻿


04-10-全局设置 - Globalization

Globalization 可以获取到用户本地化的相关信息。先去安装一下这个插件 … 
phonegap local plugin add https://git-wip-us.apache.org/repos/asf/cordova-plugin-globalization.git
下面我们先来看一下 globalization 的 getPreferredLanguage ，它可以获得用户为设备设置的语言，也就是操作系统当前所使用的语言，比如简体中文的代号是 zh-Hans ，繁体中文的代码是 zh-Hant，如果选择英文的话，应该就是 en … 
打开应用的 index.js …  然后在这个 app 对象里面，我们先添加一个用来获得 Globalization 的方法 … 可以把这命名为 getGlobalization …
getGlobalization: function(){}, 
获得用户为设备所选的语言，可以使用 navigator 对象里的 globalization 的 getPreferredLanguage() 这个方法 …
navigator.globalization.getPreferredLanguage(); 
它的里面有两个参数，一个是获得成功以后要执行的函数，一个是发生错误的时候要执行的函数 ..   我们可以命名这两个函数 … 然后在下面再去创建这两个函数 ….
不过这里我们只想在成功的时候把获取到的语言代号输出到控制台上 …  这种简单的动作，我们可以直接使用一个匿名函数 … 也就是没有名字的函数 …
function(language){},
这个 gePreferredLanguage 会把获得的语言代号放在一个带有 value 属性的对象，然后交给这个成功以后执行的函数来处理 … 所以在这个函数里，我们得指定一个参数 …  叫它 language …
在这个函数里，再用一个 console.log … 把获得的语言代码输出到控制台上 …   language 对象的 value 属性就是语言代码 ...
console.log("当前的语言是：" + language.value); 
错误函数
下面我们需要再去定义一下发生错误的时候要执行的函数 … 这里同样使用一个匿名函数 … 
function(error){}
发生错误以后，错误信息会放在 GlobalizationError 对象里面 …  可以把它交给这个错误函数去处理 …. 这里我们简单的叫它 error …
然后在函数里面，可以使用 error.code 输出错误的代号，用 error.message 输出错误的具体信息 ..  具体是什么意思，可以参考 Globalization API 里面的 GlobalizationError
在函数里，用一个 console.log() 把错误信息输出到调试的控制台上 …
console.log(
                    '错误代码：' + error.code     + '\n' +
                    '错误信息：' + error.message  + '\n'
                );


04-11-全局设置 - 点击按钮获取语言与区域代码

下面我们需要去设计在什么情况下，去获得这些信息，你可以把它放在 deviceready 这个事件发生以后，去执行一下 … 不过这里我们去试一下其它的方式，在应用上面添加一个按钮 … 每点一次按钮，就会执行一次获取信息的动作 … 也就是这个 getGlobalization
先打开应用的 index.html …   添加一个按钮 …   …  在上面定义一个 ID，这样我们可以使用 document.getElementById 定位到这个按钮上 ...
获得全局信息 
再回到 index.js …   在 onDeviceReady 里面 …  用一个 document.getElementById('getinfo');
可以把它交给一个变量，叫它 getInfo …  var getInfo = ….
下面再去为这个 getInfo 对象添加一个事件的监听器 … 
getInfo.addEventListener(); 
监听的事件是 click ，也就是点击 …   然后再指定点击事件发生以后要做的事情 …  我们让它去执行 getGlobalization …  它的前面需要加上 app 这个对象的名称 … 最后一个参数设置成 false ..
getInfo.addEventListener('click', app.getGlobalization, false); 
这样，如果用户点击了 getinfo 这个 id 所在的按钮以后，就会去执行 getGlobalization … 也就是在控制台上输出用户设置的语言的代码 ..
getLocaleName 
下面我们可以使用类似的方法去获得用户设置的区域的代码 …  比如用户如果设置为中国大陆，代码应该就是 zh_CN，如果设置成香港，代码是 zh_HK，设置成台湾的话，代码会是 zh_TW ..
先复制一下获得本地语言的这段代码  …  粘贴到它的下面 … 然后再修改一下 …  获得用户当前设置的区域格式
getPreferredLanguage 改成 getLocaleName …  当前的区域是  …  
传递的这个参数，language 可以改成 locale … 这样做更有意义，也为了区分一下上面的 language …  
这样 language.value 需要改成  local.value  …    其它的可以保持一致 …   保存一下 ….
测试
打开 weinre 调试工具的控制台 …  再去重新编译并且安装一下修改以后的应用 …   phonegap run --emulator ios
应用启动以后，点击这个 获得全局信息 按钮 ….   你会看到，在控制台上，会输出获取到的设置当前的语言是 zh_Hans，表示简体的中文 ….    当前的区域是 zh_CN  ，表示中国大陆 …
下面我们可以修改一下设置的这些设置 …
回到主屏幕 … 可以使用快捷键 command + shift + h  …  打开 设置 ….  通用 ..  多语言环境 ..  
语言这里，就是 getPreferredLanguage 获取到的东西 …  区域格式，是 getLocaleName 获取到的东西 …  先打开区域格式 …
选择 United States … 美国 …   然后再设置一下语言 ….   选择  English …   点击 完成 …
再打开我们的应用 …   点击 获得全局信息  ….
现在，你会看到，当前的语言是 en ，表示英文 …  当前的区域是 en_US，表示美国 ….  


04-12-相机 - Camera

Camera 可以让我们在应用里去调用设备的相机功能去拍一张照片，或者可以在设备的相册里直接选择一张已有的照片，成功以后，得到的照片会用 base64 编码的字符串的形式，或者照片文件的地址的形式，传递给成功以后要执行的函数去处理。
比如你可以把照片显示在应用的界面上，或者上传到服务器上等等 …
camera API 有两个方法， getPicture，还有 cleanup ，这里说的方法，其实就是在对象里的函数。
下面我们使用 getPicture ，去选择在设备相册里的图片，然后再把它显示在应用的界面上 …
首先我们需要去安装一下 camera 插件  …  打开 终端工具 … 进入到应用项目所在的目录 … cd desktop/hello
phonegap local plugin add https://git-wip-us.apache.org/repos/asf/cordova-plugin-camera.git
index.js
打开 index.js  … 这里我已经事先为 app 这个对象，添加了一些空白函数 …   getPhoto，onSuccess，还有 onError …
    // 在设备相册里选择已有的图片
    getPhoto: function(){},
    // 得到图片成功以后执行的动作
    onSuccess: function(){},
    // 获取照片出现错误执行的动作
    onError: function(){},
在这个 getPhoto 里，可以使用一个 navigator.camera.getPicture() …  调用 navigator 这个对象下面的 camera 的 getPicture() 函数 …
在它的里面我们需要再去指定三个参数 …  获取照片成功以后的函数，出现错误的函数，还有一个选项参数，这个选项是可选的参数 … 使用这些选项我们可以去定制  camera   ….  比如你可以决定是使用相册拍一张新的照片，还是直接从相册里去选择 ...
app.onSuccess, app.onError, cameraOptions … 
成功的时候，去执行 onSuccess … 失败的时候，使用 onError 去处理 … 相关的选项，可以放在一个叫做 cameraOptions 的对象里面 …
cameraOptions
在上面再去定义这个 cameraOptions 里的东西 …   var cameraOptions = {};
这行代码就是去定义一个叫做 cameraOptions 的对象  …  在这个括号里我们需要去定义它的属性，也就是这个对象里的具体的东西 …
这些东西可以去定制相机的功能 …  下面我们先来看一下其中的两个选项 …  sourceType  … 还有 destinationType .. 
先输入  sourceType: 
这个选项可以决定是使用相机拍照，还是从相册里直接选择 … 它的值是在 Camera.PictureSourceType 里面定义的 …
Camera.PictureSourceType.PHOTOLIBRARY
它的意思就是，把 sourceType 的值设置成 Camera.PictureSourceType.PHOTOLIBRARY..  也就是直接在相册里选择已有的图片 ...
这个 sourceType 的默认的值是 Camera.PictureSourceType.CAMERA ..  使用相机去拍一张新的照片 …
sourceType: Camera.PictureSourceType.PHOTOLIBRARY
下面再去设置一下  destinationType: …. 
这个选项是图像文件目标的类型…  其实就是照片文件的地址 … 默认它的值是基于 base64 编码的字符串 … 它会把拍的照片或者直接选择的照片转换成 base64 形式的字符串 …  
照片越大，转换以后的字符就越多 … 这样的形式会占用很多内存 .. 所以推荐的做法是，使用图片文件在本地存储里的路径 …
destinationType: Camera.DestinationType.FILE_URI,
可以把它设置成 Camera.DestinationType.FILE_URI  …  
onSuccess
下面再去处理一下获得照片成功以后要做执行的动作 …  也就是这个 onSuccess … 我们可以把成功获取到的内容传递给这个函数去处理 …
给它添加一个 image 参数 … 这样在这个函数里 … image 就会包含获取到的内容  … 应该就是所选择的图像的地址 …
onSuccess: function(image)
在里面，我们还是简单的使用一个 console.log … 在控制台上输出这个 image … 
console.log('图像的地址是：' + image)
onError
再定义一下出错以后要做的事情 …  可以把错误信息交给这个 onError … 
onError: function(message)
这样 message 里面包含的就是错误信息 …    把它输出到控制台上 …
console.log(message)
结束
现在我们已经准备好了获得照片的代码，在下面的视频里，我们去添加一个触发这个获取照片动作的按钮，再把获取到的照片显示在应用的界面上 ...


04-13-相机 - 点击按钮获取照片

先打开应用的界面的主页 … index.html … 然后添加一个按钮 …  button … 在上面再定义一个 ID … 叫它 getimage … 
选择图片
下面我们要让这个按钮可以去触发执行获取图片的动作 … 回到 index.js ..
在 deviceready 事件发生以后要做的事情里面 …  输入 
 var getImage = document.getElementById('getimage);
 getImage.addEventListener('click', app.getPhoto, false);
先找到页面上 ID 是 getimage 的元素 … 也就是选择图片的按钮 … 然后监听这个按钮的点击事件 … 当点击以后，就会执行 getPhoto() 里面设计的动作 …
预览 
我们先去预览一下 … 保存 …   然后打开设备的模拟器 … 
在电脑上找到一张图片 … 直接拖到这个模拟器上面 …  然后点击这个 分享 的小图标 … 选择 存储  … 这样会把图片存储到设备的相册里面 …
下面再去重新编译并且安装一下应用 …  phonegap run --emulator ios 
完成以后，点击 选择图片 这个按钮 … 因为 sourceType 选项我们设置成了 PHOTOLIBRARY，而不是 Camera ，所以会让我们直接在相册里去选择图片，而不是去拍一张新的照片 ..
第一次运行这个应用的时候，会提示用户是否允许应用访问设备的相册 …   
找到刚才我们保存在相册里的图片 … 选择 …. 
在调试的控制台上，会输出选择的图片的地址 ….


04-14-显示在应用的界面上

下面我们再去改进一下这个应用，当选择图片以后，让图片直接显示在应用的界面上 … 回到应用项目…  打开 index.html …
先来为要显示的图片添加一个容器 …  可以使用

待会儿我们可以把图片显示在这个容器里面 ..
在没有图片显示的时候，可以隐藏这个容器 …  添加一个 style 属性 …  style="display:none"
保存一下，再打开 index.js ..
index.js
在获取照片成功以后要做的事情这里 …  先找到图片的容器 …   document.getElementById('imagecontainer');
把它交给一个变量 … 命名为 imageContainer …  var imageContainer =
下面我们去创建一个 img 元素 .. 把这个元素的 src 属性的值设置成获取到的图片的路径 …
再把这个 img 元素添加到图片容器里面 …  然后再设置图片容器的 display 属性，让它显示出来 .. 
var imageEntity = document.createElement("img");
imageEntity.src = imageData;
imageContainer.appendChild(imageEntity);
imageContainer.style.display = "block";
保存一下这个文件  … 
index.css
为了让图片的宽度跟包装它的容器的宽度一样 .. 可以再去添加点样式 … 打开 www 下面的 css 目录下面的 index.css
添加一个 img{width:100%} … 把 img 标签的宽度设置成 100% …    保存 ...
演示
再重新编译并且安装一下修改以后的应用 ..   phonegap run --emulator ios
点击选择图片 … 在相册里，找到一张要使用的图片 …  选择 ….
回返回到应用 …  在应用的界面上 … 会直接显示出刚才选择的图片 …. 


04-15-通讯录 - Contacts

这个视频我们学习一下 Contacts ，它可以让我们去访问设备的 通讯录，你可以添加新的联系人到通讯录里面，可以找到通讯录里的联系人，也可以删除掉通讯录里的联系人。
通过录有两个方法， contacts.create 还有 contacts.find … 
使用 contacts.create 可以去创建一个新的 contact 联系人对象，你需要为它指定一些属性，比如 联系人 的名称 …  地址 … 备注 等等 …
然后我们可以使用 save ，把新创建人的联系人对象保存到设备的通讯里 …  下面我们一起演示一下 … 
先要安装一下 contacts 插件 … 
安装
phonegap local plugin add https://git-wip-us.apache.org/repos/asf/cordova-plugin-contacts.git
index.html
打开项目的 index.html ..   添加一个 创建联系人 的按钮 … 上面定义一个 ID ， create-contact … 
index.js
再打开 index.js … 在 device ready 事件发生以后 …  我们监听创建联系方式按钮的点击事件 … 当这个事件发生以后 … 去执行 createContact 这个动作 …
下面我们再去定义这个 createContact 要做的事情 ...
createContact 
输入 navigator.contacts.create()；  ..  用它来创建一个新的联系人对象 …  在它的里面，我们需要指定一些属性 … 这些属性都在一个 Contact 对象里 …  
所以先输入一组大括号 .. {}
然后输入属性的名称  …   先定义一下联系人的名称 …  这个属性是 displayName …   冒号右边是这个属性的值  … 
displayName: '王皓',
这样新创建的联系人对象里，联系人的名称会是 王皓 ..    不同的属性之间用逗号分隔一下 ..
再使用一个 note 属性 … 它是联系人信息里的备注 …    note:'来自宁皓网'
另外 Contact 对象里面还有很多其它的属性，emails， addresses，birthday 等等 …  不过这里我们为了演示，尽量的保持简单一些 … 暂时只添加这两个属性  …
contacts.create() 会根据这些属性，返回一个联系人对象 ..  下面我们可以给它一个名字 …
var newContacts =
现在，使用 newContacts 点，后面加上属性名称的形式，就可以访问到属性的值了 … 比如 newContacts.displayName 会是 王皓 …   newContacts.note 会是 来自宁皓网 …
save
到目前为止，我们只是创建了一个新的联系人对象，它并不会保存在设备的通讯录里面 … 想要保存这个联系人的话 … 需要使用 contact 对象的 save 方法 …
先输入想要保存的对象的名称 .. 也就是 newContacts ..   点 save … 这个方法里还有两个参数 … 保存成功以后要执行的动作，还有保存失败的时候要做的事情 …
newContacts.save(app.onSuccess, app.onError) 
onSuccess
再定义一下成功的时候做的事情 ..   我们可以把保存成功以后的对象交给这个 onSuccess 去处理 …   输入一个 contact …
然后在它的里面，可以使用 contact 点的形式，去访问到对象里的东西 ..
console.log(‘保存成功！联系人ID’： + contact.id); 
onError 
再处理一下保存失败以后做的事 …  错误信息会在一个对象里 … 先把它交给 onError 去处理 … 输入 error 
然后 console.log(error.code);
这个 error.code 可以输出错误信息 …   保存 … 
测试
下面再去测试一下 …   打开 终端工具 …   phonegap run --emulator ios  ..  重新编译并且安装一下这个应用到模拟器上面 …
应用启动以后 …  点击 创建联系人 这个按钮 …
系统会提示，是否允许应用访问通讯录 … 点击 OK …
打开控制台 … 你会看到保存成功以后，把联系人的信息输出到了控制台上 …
command + shfit + h ，回到系统的主界面上 …  打开 通讯录 … 
在这里，你会找到刚才我们新创建的  王皓 这个联系人 …   打开这个联系人 ..
上面会有联系人的名字 … 还有一个 备注 信息 …


04-16-联系人 - 查找与移除联系人

contacts.find，可以去搜索设备通讯录里的联系人，找到的联系人对象会在一个数组里面，我们可以使用循环，去处理所有找到的联系人。
contacts.find 有四个参数 ..  contactFields ，它可以指定想要查找的联系人里的字段  … contactSuccess 是成功以后执行的动作 … contactError 是失败的时候要做的事情 ..
最后一个参数是 contactFindOptions …  在这个参数里我们要指定搜索的关键词 … 还有是否要返回多个结果 … 
index.html
先打开应用项目的 index.html … 在这里，我添加了一个 查找联系人 的按钮 .. 上面定义一个叫 find-contact 的 ID ..
index.js
再打开 index.js …  在 deviceready 发生以后监听了 查找联系人 按钮的点击事件 ..  点击这个按钮以后，会去执行 app 对象里的 findContact 函数 ..
在这个函数里先输入 navigator.contacts.find() 
然后是这个方法的几个参数  …         navigator.contacts.find(contactFields, app.onSuccess, app.onError, contactFindOptions)
在这个 contactFields 里面，我们可以定义想要查找的联系人的字段  .. 
在它的上面输入 var contactFields = [] ;   这些字段会放在一个数组里，所以这里要加上一个方括号 …  然后是字段的名称  ..  ['name', 'note'] 
name 里面包含联系人所有跟名字相关的内容 … note 是联系人的备注信息 …   
注意这里我们指定了两个字段，这样找到联系人以后，也只有这两个字段的内容可以使用 …  比如你想输出联系人的电话，是不行的，除非在这里，你再指定一个 phoneNumbers 电话号码  … 
contactFindOptions
下面再去定义一下 contactFindOptions .. var contactFindOptions = {};
相关的选项在一个对象里，所以这里要加上一组大括号 …  然后定义一下 filter 属性 …  它的值就是我们要查找的关键词 …
filter: "宁皓网",
又一个逗号分隔一下 … 再定义一下 multiple 属性 … 把它的值设置成 true .. 意思就是允许返回多个查找到的结果 ..
multiple: true 
现在 findContact 做的事情就是，去查找通讯录里的名称还有备注字段里面包含 宁皓网 这几个字的联系人 …
成功以后 … 去执行 onSuccess 里面定义的东西 …
onSuccess
找到的结果会传递给这个函数 …  添加一个 contacts 参数  … 这个参数里面包含的就是找到的联系人 ..
我们可以先在控制台上输出找到的联系人的数量 … 
console.log('找到 ' + contacts.length + ' 个联系人'); 
因为找到的结果是一个数组，所以，我们可以使用数组的 length 来输出数组里面的项目的个数 …
然后我们需要循环的输出找到的联系人的相关的信息 ..  这里用一个 for 语句 ..
for (var i = 0; i 

在括号里我们需要指定一些参数  …    最开始我们设置了一个小 i，让它等于 0 ，然后去判断一下设置的条件，看看这个小 i 是不是小于找到的联系人的结果数 … 如果条件为真 … 那么就会去执行在后面大括号里的东西 … 判断完条件以后 …每一次循环， 我们都让这个小 i 的值加上 1  …  
直到这个小 i 的值大于了找到的联系人的结果数 … 这样这个判断的条件都会为假 … 循环也就会结束 … 
下面我们在大括号里，再去定义一下每一次循环的时候要做的事儿 .. 
可以在控制台上输出找到的联系人的相关的信息  …
console.log(
                '联系人姓名：' + contacts[i].name.formatted  +
                ' 备注：' + contacts[i].note + '\n'
  );
第一次循环的时候，这个 contacts 后面的方框号里的小 i 会是 0 ，也就是 contacts 这个数组里面的第一个项目 … 
 .name.formatted …  意思就是输出联系人的 名字 里面的格式化以后的名称  … 
如果你想输出名字里面的其它的名称 … 比如 昵称 .. 你可以把 formatted 替换成 nickname  … 
保存一下 ….
演示
找到调试工具 ….   
再去重新编译并且安装一下这个修改以后的应用 …  安装到模拟器的上面 …  phonegap run --emulator ios 
我们可以先打开通讯录去看一下 …   这里你会看到有王皓跟小雪这两个联系人 … 
再返回到应用 … 点击 查找联系人 这个按钮 …
在控制台上，你会看到输出了找到的联系人 …   王皓 跟 小雪 这两个联系人里面的备注字段 … 都包含我们要查找的 宁皓网 这几个字 …
移除 
下面我们可以再看一下 remove ，移除联系人的方法 …  回到 index.js .. 这里我们只需要在 查找联系人成功以后要做的事情里面 …  添加一行 contacts[i].remove(); 
这样就可以删除掉查找到的联系人 ..
保存 …  再重新去编译一下 …. 
点击这个查找联系人 …   在控制台上会输出找到的结果  …   我们再点一下这个按钮 … 你会看到现在找到的结果是 0 … 因为点击这个按钮，会移除到找到的联系人 … 
回到 通讯录 …  在这里，我们已经找不到 王皓 和 小雪 这两个联系人的信息了 …


04-17-加速计 - Accelerometer

现在大部分的移动设备里面都有一种可以测量设备倾斜或者动作的感应器，这就是 Accelerometer ，加速计 …  比如它可以监测到用户改变了设备的使用方向，系统的屏幕会自动转动  ..  另外还有摇摆或者晃动手机的动作等等 ..  在很多游戏里用的比较多 … 赛车游戏可以左右摇摆设备来控制赛车的方向， 一些音乐播放器支持晃动手机切换播放的歌曲  … 
这些功能都是通过获取到加速计的值  … 然后根据这些值让应用程序做出不同的响应 … 
下面我们就去使用 PhoneGap 的 Accelerometer API 去获取到设备加速计的值  … 
这个 API 里面有三个方法 …  accelerometer.getCurrentAcceleration … 它可以获取到当前的加速度的值 …   accelerometer.watchAcceleration .. 可以实时的监测当前的加速度的值  … 
还有 accelerometer.clearWatch .. 它可以停止实时监测加速度值  ..
下面我们去使用 accelerometer.watchAcceleration 去实时监测设备的加速度的值 …


04-18-加速计 - 实时监测加速值

先去安装一下 cordova 的 device motion 插件  …
打开终端 …  phonegap local plugin add https://git-wip-us.apache.org/repos/asf/cordova-plugin-device-motion.git
index.html
再打开应用项目的 index.html …
这里我事先添加了两个按钮 …  触摸 startwatch 按钮的时候，让应用开始监测加速度 …  然后再把实时获取到的加速度的 x,y, 还有 z 轴的值，输出到这个 acceleration-value 容器里面 …
当我们触摸 stopwatch 按钮的时候，让应用停止监测加速度 …
index.js
下面再打开 index.js … 
在 deviceready 事件发生以后要做的事情里面 … 我们去监测 startwatch 还有 stopwatch 按钮的触摸事件 …  当 startwatch 按钮的 touchstart 事件发生以后，也就是触摸开始的事件 …  去执行 startWatch 里面定义的动作 …
触摸 stopwatch 按钮的时候，去执行 stopWatch 里面定义的动作 …
startWatch
下面我们去定义这个 startWatch …  输入 navigator.accelerometer.watchAcceleration() …  使用这个 watchAcceleration 去实时的监测加速度值 …  
它有三个参数 …   监测成功的时候要做的事 … 监测失败的时候要做的事 ..  还有 一个选项参数 　…
navigator.accelerometer.watchAcceleration(app.onSuccess, app.onError, options); 
成功的时候，去执行 onSuccess  …  失败的时候去执行 onError …   一会儿我们再去定义这两个函数 … 
选项的值可以放在这个 options 里面 … 
在它的上面再去定义一下这个 options …  var options = {}; 
在它的里面，去定义一个 frequency 属性 …  这个属性就是监测加速度值的间隔时间 …  它的值的单位是毫秒 … 这里我们设置成 1000 毫秒 … 也就是每秒钟去看一下设备的加速度值 … 
onSuccess
监测成功以后，会把得到的数据值放在 acceleration 对象里面 … 我们可以把它交给成功以后执行的函数里面去处理一下 …
在 onSucess 这个函数里面，传递一个 acceleration 参数  … 
这样在这个函数里，就可以使用 acceleration.x 输出加速度 x 轴的值  … acceleration.y 可以输出 y 轴的值  …  acceleration.z 可以输出 z 轴的值 …
在这里粘贴一段代码 … 这段代码你可以在这节课的资料包里找到 …
先找到 index.html 里面的 acceleration-value 这个容器 ..  再去设置一下这个容器里面的内容 …   也就是输出加速度的 x，y，z，还有时间戳的值 …
测试
下面我们去测试一下 …  保存 … 
打开终端工具重新去编译一下这个应用 …  把它编译成 iOS 平台的应用 ...  phonegap build ios …   
再打开应用项目的目录 … platforms … ios … HelloWorld.xcodeproj …   用 xcode 打开编译之后的应用项目 …
这里我们需要使用真正的设备去测试加速仪 …  选择 小雪的 iPhone … 
然后点击 运行 … 
这样会把应用安装在小雪的 iPhone 上面 … 
点击 开始监测加速度 …     在屏幕上 … 每隔一秒钟就会显示出当前的加速度的值  …  
在下面的视频里，我们再去看一下怎么样停止监测加速度 …. 


04-19-加速计 - 停止实时监测设备的加速度

在上一个视频里我们使用 accelerometer.watchAcceleration 去实时的监测设备的加速度的值  .. .  它会返回一个 watchID … 使用这个 watchID … 配合 accelerometer.clearWatch … 可以停止应用监测设备的加速度 ..
首先我们在 initialize 里面去定义一个 watchID …  var watchID = null ;
然后把 watchAcceleration 返回的值 … 交给这个 watchID …
app.watchID = ...app.watchID = navigator.accelerometer.watchAcceleration…
stopWatch
下面我们去再去定义触摸 停止监测加速度 按钮以后执行的函数 stopWatch … 
在它的里面，我们先用一个 if 语句，去判断一下 watchID 是否有值 …  如果有 … 说明应用正在监测加速度 … 这样我们就可以使用 clearWatch 去清除这个 watchID … 也就是停止监测加速度 … 
if (app.watchID) {}
再输入 navigator.accelerometer.clearWatch(app.watchID);   另起一行 … 
再把 watchID 设置成 null …  app.watchID = null ;
保存 …
测试
下面我们再重新去编译一下这个应用 …  phonegap build ios 
打开应用项目 …  platforms … ios …  HelloWorld.xcodeproj …
选择要测试应用的设备 …   
点击 运行 …
点击 开始监测加速度 …   可以实时去监测设备的加速度值  …  watchAcceleration 会返回一个 watchID … 
点击 停止监测加速度 …  执行 clearWatch … 会清除掉 watchAcceleration 返回的 watchID … 这样应用就会﻿停止监测设备的加速度值  …


05-01-申请 Apple ID

在这个视频里，我们去申请一个 Apple ID。
打开地址 developer.apple.com … 然后点击页面右上角的 Member Center 用户中心 … 在这里你可以使用已有的 ID　登录　…  注册新的 ID … 点击 Register ….
然后点击 Create Apple ID … 创建一个新的 Apple ID ..
First Name … 是你的名字 ..  这里我们最好要使用拼音 …  而且必须是你的真实的名字 .. 不然在申请加入 Apple 开发者计划的时候不能通过审核 … 
我叫王皓 … 所以名字是 HAO …  Middle Name 是中间名 …  这是一个可选项 …
Last Name 是姓氏 …  输入 Wang
再输入想要的 Apple ID  … 这里你可以使用一个常用的邮箱的地址 …  设置一下密码 …   再确认一次我们设置的密码 …
然后我们需要再去设置几个安全的问题 …  
这些问题可以在我们忘记密码的时候用来验证我们的身份 …
先选择这个 What was the name of your first pet? 你的第一个宠物叫啥名字 …
在 Answer 这里，要输入这个问题的答案  …
然后再选择一个问题 …  这次我们选择  你在高中的时候最喜欢的歌手或者乐队是谁？ 
在下面再输入问题的答案  ..
最后再选择一个问题 … In what city did your parents meet ?  … 你的父母在哪里认识的 ？
再输入答案  … 
然后在 Date of Birth .. 这里 .. 选择你的生日 ..
Rescue Email Address  …  安全邮箱地址 … 可以再去指定一个你的邮箱地址 … 这个地址不能跟你的 Apple ID 的邮箱地址重复 …
再去配置一下地址相关的内容 …
先输入你所在的国家 …     再输入你的详细的地址 …  要注意的是 … 这个地址必须是你的身份证上面的地址 … 
城市 …..
再选择省份 ..
最后。输入安全码 … 
同意许可 …   然后点击 Create Apple ID … 创建 Apple ID …
Apple 会给我们的 Apple ID 的邮箱地址里面发送一封验证的邮件 …
登录到我们的邮箱 …   
然后打开 请验证 Apple ID 的联系人电子邮件地址 这封邮件 …
打开以后 … 点击 立即验证 这个链接 …
使用刚刚注册的 Apple ID 登录一下 …   然后点击 验证地址 ..
提示成功以后 … 我们就成功的创建了一个 Apple ID … 
第一次登录
第一次登录 Apple 的开发者网站的时候  …
首先我们得同意 Apple 的许可协议 …  勾选一下 … 点击 Agree 同意．．．
然后可能还要填个表 …
先选择我们的工作 …. 
然后选择开始在 Apple 平台上开发的时间 …
再选择 开发的东西 …
还有开发的其它平台 …  这里选择 Android 
然后点击  Register  … 注册 …


05-02-加入 Apple 开发者计划

想去为 iOS 设备开发应用 .. 在真正的 iOS 设备上去调试应用 … 把应用发布到 App Store 去上卖 .. 这都需要我们加入 Apple 的开发者计划 …
这个计划每年的费用的是 99 美金 …  首先我们先要申请一个 Apple ID … 然后再准备一张信用卡 .. 信用卡的名字最好跟 Apple ID 上注册的名字一致 … 
不然的话 … Apple 需要验证你的真实身份 … 需要上传你的身份证 … 
准备好以后，先打开 developer.apple.com  ..  然后点击 programs  … 
点击 iOS Developer Program ..  现在注册 …
继续  …
已经申请了 Apple ID … 可以直接点击 Sign In 登录  …
下面我们需要选择是以什么身份加入到开发者计划 … 可以选择 Individual … 个人用户 …  或者选择 Company 或者 Organization … 公司或者组织  ..
这里我们选择 个人 …
用你的 Apple ID 登录一下 …
这里我们需要输入一些内容  …  Title … 选择 Mr.  先生 …
First Name .. 你的名字 …  Last Name …  姓氏 …
在下面，还要输入信用卡的账单地址 …
选择国家 … 输入地址 …
城市 …  省份 …
在下面还有邮编和电话号码  …
点击 Continue 继续  … 
选择想要加入的开发者计划 … 这里我们选择 iOS Developer Program …    继续  …
检查一下注册信息 …  再点一下 继续  …
这里我们需要同意 iOS 开发者计划的许可协议 …
先勾选一下 … 然后点击  I Agree …. 我同意
支付信息
下面我们需要配置支付相关的信息 …   在 Payment Information ，支付信息这个区域 …  先选择信用卡的类型 … 
MasterCard 还有 Visa 都是常见的信用卡类型 .. 在你的信用卡上面都有标志 … 
我的信用卡是 MasterCard …
在 Number 这里输入你的信用卡的卡号 …
Cardholder's Name … 是信用卡的拥有人 …  注意在这里填写的信用卡最好是你本人的 … 如果不是本人的信用卡 ..  你可以联系 Apple 客服 … 他们会给你一个链接 … 让你上传你本人的身份证 …  
Expires …  是信用卡的过期时间  … 在你的信用卡上面，可以找到这个日期 ..
然后再输入账单信息 ...
完成以后，点击 Continue  … 继续  …
再确认一下订单 ….
点击 Place Order … 提交订单 …
这样你会收到 Apple 给你发的一些邮件 … 订单的状态 … 收据 … 等等 …
如果没有什么意外 … 过几天 …  你会收到一封  Apple Developer Program Activation Code 的邮件  …
这封邮件里面会包含一个用来激活 开发者计划 的激活码 …
点击这个包含激活码的链接  …. 
然后点击 Activate … 激活 … 
这样你就会成功的加入到 Apple 的 iOS 开发者计划了 …  


05-03-证书与 Provisioning Profiles

当我们成功加入到了 Apple 的 iOS 开发者计划以后 … 我们还得去申请一个证书 … 另外我们还需要基于这个证书的 Provisioning Profiles  …  这样才能在我们的电脑上开发应用 ..
还是先打开 developer.apple.com …
点击 Member Center …. 再用已经加入到 iOS 开发者计划的 Apple ID 登录一下 ..
打开 证书，ID，还有档案这个链接 …
在 iOS Apps 下面，点击 Certificates ..  证书 …
目前这里我们还没有申请任何的证书 … 申请这个证书有两种方法 … 可以使用 Xcode 去申请 … 或者手工去申请  … 
再看一下 Provisioning Profiles …  目前也还没有 Provisioning Profiles …  生成它也有两种方法 … 可以通过 Xcode … 或者手工去生成 …
下面我们可以使用 Xocde 去请求一个证书还有生成一个 Provisioning Profiles ..  
首先我们需要把你想用来开发应用或者调试应用的 iOS 设备连接到电脑上 …  你可以使用 iPad … iPhone … 或者 iPod Touch …
Xcode
连接好以后，打开 Xcode …    
然后打开 Window 窗口菜单 …  点击 Organizer …   
打开 Devices … 设备选项卡..   在这里，应该可以找到我们刚才连接到电脑上的 iPad ..
提示说要我们先解锁 iPad … 然后在弹出的对话框里，点击 信任 …
这样这个设备的列表会刷新一下 … 
然后我们再重新点击选择这个 iPad 设备 … 
点击 Use for Development … 用作开发 …
选择事先添加到 Xcode 里面的 Apple ID 帐户 …  这个 ID 就是我们加入到 Apple iOS 开发者计划里面的那个 ID …
勾选一下 … 点击 选择 ..
然后会出现提示，说没找到证书…   想让 Xcode 请求一个证书… 可以点击 Request ..
再回到 Apple 开发者网站 … 点击 证书 下面的 ALL  … 查看所有的证书 …
要这里，你会看到 Apple 给我们生成的一个证书 …
点击 Revoke 可以吊销这个证书…  
点击 Download 可以下载这个证书 …
下面我们再去看一下 Provisioning Profiles …
这里也给我们生成了一个 Provisioning Profiles …. 
现在我们就可以使用这个 iOS 设备去调试应用了 … 


05-04-在云上编译应用  - PhoneGap Build

PhoneGap Build 是 PhoneGap 提供的一项服务 … 它可以让我们把做好的应用项目上传到 PhoneGap Build 上面 … 然后它会在线给我们编译成可以在不同平台上使用的应用 …
不需要担心去配置各种平台的开发环境 .. 
这个视频我们介绍一下 PhoneGap Build 的使用 ..
我们可以先用命令行工具去创建一个应用项目 …  
先进入到保存应用项目的地方 …
然后使用 phonegap create 命令 …  创建一个叫做 HelloWorld 的应用 … 
进入到应用项目 …
phonegap remote login
下面我们可以使用 phonegap remote login …   远程登录到 phonegap build  …
输入你的 phonegap build 的用户名 … 还有 密码 …    
提示我们用这个用户登录到了 phonegap build … 
退出登录 … 可以使用 phonegap remote logout ..
下面我们再登录一下 …
在 PhoneGap 上编译应用 …  可以使用命令 …  phonegap remote build … 后面加上想要编译的平台的名称  …
这样 phonegap 会先去压缩应用项目 .. 然后上传到 phonegap build 上面去编译 …
这里出现了一个要错误提示… 说已经达到了私有应用的上限 …
私有应用
phonegap build 是一项收费的服务 …  免费的话 .. 只允许我们编译一个私有的应用 …   因为之前我已经编译了一个私有应用 … 所以这里会提示达到了上限 ..
下面我们登录到 phonegap build  …
输入用户名 … 密码 … 然后点击 登录 ..
找到我之前编译的私有应用 …    这里你会看到一个 private … 说明这是一个私有应用 …
打开这个应用 …    然后点击 settings … 设置选项卡 ..
你可以取消这个 只有授权合作者才能下载这个应用 这个选项 …  然后点击 保存 … 这样这个应用就会变成一个公用的应用 …
也就是任何人都可以下载和使用这个应用 …
这里我们可以直接删除掉这个应用 …    浏览到页面的最下方 .. 点击 Delete this app … 
重新编译
再回到命令行工具 …  重新去编译一下 ….
这里让 phonegap build 编译的是 iOS 平台的应用 …   这需要我们先去添加一个密钥 …  如果你编译的是其它平台的应用 … 不需要使用密钥 ...
回到 phonegap build  …  刷新一下 ..    打开这个 HelloWorld 应用 ..
你会发生在 iOS 这里，会出现一个错误 …
因为我们还没有上传密钥 …  另外还有 Provisioning Profiles … 
这个密钥是根据我们的 iOS 开发证书生成的 …  不过它需要一个特定的格式 … 一会儿我们可以在电脑上生成这个密钥 … 
先打开 Provisioning Profiles .. 
点击 Download ..   把它下载下来 …
然后我们可以去搜索一下 钥匙串访问  工具  … 搜索一下 key …
钥匙串 选择 登录 …    在 种类 这里 … 选择 我的证书 …
在这里你可以找到一个 iPhone Developer … 
里面有一个 iOS Developer  …  右键点击它 …
然后选择 导出 ….
文件格式  要选择 p12 …  
再选择一个保存的位置 …
修改一下文件名 …   点击 存储 …
提示我们需要为这个密钥设置一个密码 … 一会儿我们需要用到这个密码 …
再输入电脑的登录密码 …    点击 允许 …
上传密钥
回到 PhoneGap Build …
在编译 iOS 这里 ..  点击这个下拉菜单  …  选择 add a key 
输入一个标题..
然后再选择刚才我们从电脑里面导出的那个密钥 …
再找到从 Apple 开发者网站里面下载下来的 Provisioning Profiles 
点击 提交  …
然后点击这个小锁头的小图标 …
输入我们导出密钥的时候设置的那个密码 ..
可以把它设置为默认的密钥 …   再点一下提交  …
重新编译
下面我们可以点击 iOS 后面的这个 Rebuild 按钮 …
这样 PhoneGap Build 会重新去编译我们上传的应用 … 
完成以后.. 点击这个 ipa 按钮 … 可以下载编译好的可以在 iOS 平台上使用的应用 …   
Android 平台，可以点击下载 apk 格式的应用 ..
或者，可以点击这个 install 按钮 …
在这个页面上，你可以下载编译好的 … 在不同平台上运行的应用程序 … ﻿


